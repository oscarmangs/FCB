{"version":3,"file":"optimizely.node.min.js","sources":["../node_modules/tslib/tslib.es6.js","../lib/modules/logging/models.ts","../lib/modules/logging/errorHandler.ts","../lib/utils/fns/index.ts","../lib/modules/logging/logger.ts","../lib/core/odp/odp_config.ts","../lib/core/odp/optimizely_segment_option.ts","../lib/shared_types.ts","../lib/core/odp/odp_event.ts","../lib/optimizely_decision/index.ts","../lib/utils/enums/index.ts","../lib/optimizely_user_context/index.ts","../lib/core/condition_tree_evaluator/index.ts","../lib/core/optimizely_config/index.ts","../lib/utils/config_validator/index.ts","../lib/core/project_config/index.ts","../lib/core/project_config/project_config_manager.ts","../lib/core/bucketer/index.ts","../lib/utils/semantic_version/index.ts","../lib/core/custom_attribute_condition_evaluator/index.ts","../lib/core/audience_evaluator/odp_segment_condition_evaluator/index.ts","../lib/core/audience_evaluator/index.ts","../lib/utils/string_value_validator/index.ts","../lib/core/decision_service/index.ts","../lib/utils/event_tag_utils/index.ts","../lib/utils/attributes_validator/index.ts","../lib/core/event_builder/index.ts","../lib/core/decision/index.ts","../lib/core/event_builder/event_helpers.ts","../lib/core/notification_center/index.ts","../lib/core/notification_center/notification_registry.ts","../lib/utils/user_profile_service_validator/index.ts","../lib/optimizely/index.ts","../lib/utils/event_tags_validator/index.ts","../lib/plugins/logger/index.ts","../lib/plugins/error_handler/index.ts","../lib/plugins/event_dispatcher/index.node.ts","../lib/utils/event_processor_config_validator/index.ts","../lib/modules/event_processor/events.ts","../lib/modules/event_processor/eventQueue.ts","../lib/modules/event_processor/eventProcessor.ts","../lib/modules/event_processor/pendingEventsStore.ts","../lib/modules/event_processor/pendingEventsDispatcher.ts","../lib/modules/event_processor/v1/buildEventV1.ts","../lib/modules/event_processor/requestTracker.ts","../lib/modules/event_processor/v1/v1EventProcessor.ts","../lib/modules/datafile-manager/config.ts","../lib/modules/datafile-manager/nodeRequest.ts","../lib/modules/datafile-manager/eventEmitter.ts","../lib/modules/datafile-manager/backoffController.ts","../lib/modules/datafile-manager/httpPollingDatafileManager.ts","../lib/modules/datafile-manager/nodeDatafileManager.ts","../lib/modules/datafile-manager/index.node.ts","../lib/plugins/datafile_manager/http_polling_datafile_manager.ts","../lib/utils/http_request_handler/node_request_handler.ts","../lib/utils/lru_cache/cache_element.ts","../lib/utils/lru_cache/lru_cache.ts","../lib/utils/lru_cache/server_lru_cache.ts","../lib/plugins/vuid_manager/index.ts","../lib/core/odp/odp_utils.ts","../lib/core/odp/odp_manager.ts","../lib/core/odp/odp_event_manager.ts","../lib/plugins/odp/event_api_manager/index.node.ts","../lib/core/odp/odp_event_api_manager.ts","../lib/plugins/odp/event_manager/index.node.ts","../lib/core/odp/odp_segment_manager.ts","../lib/core/project_config/project_config_schema.ts","../lib/core/odp/odp_response_schema.ts","../lib/core/odp/odp_segment_api_manager.ts","../lib/utils/json_schema_validator/index.ts","../lib/plugins/odp_manager/index.node.ts","../lib/index.node.ts","../lib/plugins/event_processor/index.ts"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    function next() {\r\n        while (env.stack.length) {\r\n            var rec = env.stack.pop();\r\n            try {\r\n                var result = rec.dispose && rec.dispose.call(rec.value);\r\n                if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n};\r\n","/**\n * Copyright 2019, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum LogLevel {\n  NOTSET = 0,\n  DEBUG = 1,\n  INFO = 2,\n  WARNING = 3,\n  ERROR = 4,\n}\n\nexport interface LoggerFacade {\n  log(level: LogLevel | string, message: string, ...splat: any[]): void\n\n  info(message: string | Error, ...splat: any[]): void\n\n  debug(message: string | Error, ...splat: any[]): void\n\n  warn(message: string | Error, ...splat: any[]): void\n\n  error(message: string | Error, ...splat: any[]): void\n}\n\nexport interface LogManager {\n  getLogger(name?: string): LoggerFacade\n}\n\nexport interface LogHandler {\n  log(level: LogLevel, message: string, ...splat: any[]): void\n}\n","/**\n * Copyright 2019, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @export\n * @interface ErrorHandler\n */\nexport interface ErrorHandler {\n  /**\n   * @param {Error} exception\n   * @memberof ErrorHandler\n   */\n  handleError(exception: Error): void\n}\n\n/**\n * @export\n * @class NoopErrorHandler\n * @implements {ErrorHandler}\n */\nexport class NoopErrorHandler implements ErrorHandler {\n  /**\n   * @param {Error} exception\n   * @memberof NoopErrorHandler\n   */\n  handleError(exception: Error): void {\n    // no-op\n    return\n  }\n}\n\nlet globalErrorHandler: ErrorHandler = new NoopErrorHandler()\n\n/**\n * @export\n * @param {ErrorHandler} handler\n */\nexport function setErrorHandler(handler: ErrorHandler): void {\n  globalErrorHandler = handler\n}\n\n/**\n * @export\n * @returns {ErrorHandler}\n */\nexport function getErrorHandler(): ErrorHandler {\n  return globalErrorHandler\n}\n\n/**\n * @export\n */\nexport function resetErrorHandler(): void {\n  globalErrorHandler = new NoopErrorHandler()\n}\n","/**\n * Copyright 2017, 2019-2020, 2022-2023, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { v4 } from 'uuid';\n\nconst MAX_SAFE_INTEGER_LIMIT = Math.pow(2, 53);\n\n// eslint-disable-next-line\nexport function assign(target: any, ...sources: any[]): any {\n  if (!target) {\n    return {};\n  }\n  if (typeof Object.assign === 'function') {\n    return Object.assign(target, ...sources);\n  } else {\n    const to = Object(target);\n    for (let index = 0; index < sources.length; index++) {\n      const nextSource = sources[index];\n      if (nextSource !== null && nextSource !== undefined) {\n        for (const nextKey in nextSource) {\n          // Avoid bugs when hasOwnProperty is shadowed\n          if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n    }\n    return to;\n  }\n}\n\nfunction currentTimestamp(): number {\n  return Math.round(new Date().getTime());\n}\n\nfunction isSafeInteger(number: unknown): boolean {\n  return typeof number == 'number' && Math.abs(number) <= MAX_SAFE_INTEGER_LIMIT;\n}\n\nexport function keyBy<K>(arr: K[], key: string): { [key: string]: K } {\n  if (!arr) return {};\n  return keyByUtil(arr, function(item) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (item as any)[key];\n  });\n}\n\nfunction isNumber(value: unknown): boolean {\n  return typeof value === 'number';\n}\n\nexport function uuid(): string {\n  return v4();\n}\n\nexport type Omit<T, K> = Pick<T, Exclude<keyof T, K>>;\n\nexport function getTimestamp(): number {\n  return new Date().getTime();\n}\n\n/**\n * Validates a value is a valid TypeScript enum\n *\n * @export\n * @param {object} enumToCheck\n * @param {*} value\n * @returns {boolean}\n */\n// TODO[OASIS-6649]: Don't use any type\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\nexport function isValidEnum(enumToCheck: { [key: string]: any }, value: number | string): boolean {\n  let found = false;\n\n  const keys = Object.keys(enumToCheck);\n  for (let index = 0; index < keys.length; index++) {\n    if (value === enumToCheck[keys[index]]) {\n      found = true;\n      break;\n    }\n  }\n  return found;\n}\n\nexport function groupBy<K>(arr: K[], grouperFn: (item: K) => string): Array<K[]> {\n  const grouper: { [key: string]: K[] } = {};\n\n  arr.forEach(item => {\n    const key = grouperFn(item);\n    grouper[key] = grouper[key] || [];\n    grouper[key].push(item);\n  });\n\n  return objectValues(grouper);\n}\n\nexport function objectValues<K>(obj: { [key: string]: K }): K[] {\n  return Object.keys(obj).map(key => obj[key]);\n}\n\nexport function objectEntries<K>(obj: { [key: string]: K }): [string, K][] {\n  return Object.keys(obj).map(key => [key, obj[key]]);\n}\n\nexport function find<K>(arr: K[], cond: (arg: K) => boolean): K | undefined {\n  let found;\n\n  for (const item of arr) {\n    if (cond(item)) {\n      found = item;\n      break;\n    }\n  }\n\n  return found;\n}\n\nexport function keyByUtil<K>(arr: K[], keyByFn: (item: K) => string): { [key: string]: K } {\n  const map: { [key: string]: K } = {};\n  arr.forEach(item => {\n    const key = keyByFn(item);\n    map[key] = item;\n  });\n  return map;\n}\n\n// TODO[OASIS-6649]: Don't use any type\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\nexport function sprintf(format: string, ...args: any[]): string {\n  let i = 0;\n  return format.replace(/%s/g, function() {\n    const arg = args[i++];\n    const type = typeof arg;\n    if (type === 'function') {\n      return arg();\n    } else if (type === 'string') {\n      return arg;\n    } else {\n      return String(arg);\n    }\n  });\n}\n\n/**\n * Checks two string arrays for equality.\n * @param arrayA First Array to be compared against.\n * @param arrayB Second Array to be compared against.\n * @returns {boolean} True if both arrays are equal, otherwise returns false.\n */\nexport function checkArrayEquality(arrayA: string[], arrayB: string[]): boolean {\n  return arrayA.length === arrayB.length && arrayA.every((item, index) => item === arrayB[index]);\n}\n\nexport default {\n  assign,\n  checkArrayEquality,\n  currentTimestamp,\n  isSafeInteger,\n  keyBy,\n  uuid,\n  isNumber,\n  getTimestamp,\n  isValidEnum,\n  groupBy,\n  objectValues,\n  objectEntries,\n  find,\n  keyByUtil,\n  sprintf,\n};\n","/**\n * Copyright 2019, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getErrorHandler } from './errorHandler'\nimport { isValidEnum, sprintf } from '../../utils/fns'\n\nimport { LogLevel, LoggerFacade, LogManager, LogHandler } from './models'\n\ntype StringToLogLevel = {\n  NOTSET: number,\n  DEBUG: number,\n  INFO: number,\n  WARNING: number,\n  ERROR: number,\n}\n\nconst stringToLogLevel: StringToLogLevel = {\n  NOTSET: 0,\n  DEBUG: 1,\n  INFO: 2,\n  WARNING: 3,\n  ERROR: 4,\n}\n\nfunction coerceLogLevel(level: any): LogLevel {\n  if (typeof level !== 'string') {\n    return level\n  }\n\n  level = level.toUpperCase()\n  if (level === 'WARN') {\n    level = 'WARNING'\n  }\n\n  if (!stringToLogLevel[level as keyof StringToLogLevel]) {\n    return level\n  }\n\n  return stringToLogLevel[level as keyof StringToLogLevel]\n}\n\ntype LogData = {\n  message: string\n  splat: any[]\n  error?: Error\n}\n\nclass DefaultLogManager implements LogManager {\n  private loggers: {\n    [name: string]: LoggerFacade\n  }\n  private defaultLoggerFacade = new OptimizelyLogger()\n\n  constructor() {\n    this.loggers = {}\n  }\n\n  getLogger(name?: string): LoggerFacade {\n    if (!name) {\n      return this.defaultLoggerFacade\n    }\n\n    if (!this.loggers[name]) {\n      this.loggers[name] = new OptimizelyLogger({ messagePrefix: name })\n    }\n\n    return this.loggers[name]\n  }\n}\n\ntype ConsoleLogHandlerConfig = {\n  logLevel?: LogLevel | string\n  logToConsole?: boolean\n  prefix?: string\n}\n\nexport class ConsoleLogHandler implements LogHandler {\n  public logLevel: LogLevel\n  private logToConsole: boolean\n  private prefix: string\n\n  /**\n   * Creates an instance of ConsoleLogger.\n   * @param {ConsoleLogHandlerConfig} config\n   * @memberof ConsoleLogger\n   */\n  constructor(config: ConsoleLogHandlerConfig = {}) {\n    this.logLevel = LogLevel.NOTSET\n    if (config.logLevel !== undefined && isValidEnum(LogLevel, config.logLevel)) {\n      this.setLogLevel(config.logLevel)\n    }\n\n    this.logToConsole = config.logToConsole !== undefined ? !!config.logToConsole : true\n    this.prefix = config.prefix !== undefined ? config.prefix : '[OPTIMIZELY]'\n  }\n\n  /**\n   * @param {LogLevel} level\n   * @param {string} message\n   * @memberof ConsoleLogger\n   */\n  log(level: LogLevel, message: string) : void {\n    if (!this.shouldLog(level) || !this.logToConsole) {\n      return\n    }\n\n    const logMessage = `${this.prefix} - ${this.getLogLevelName(\n      level,\n    )} ${this.getTime()} ${message}`\n\n    this.consoleLog(level, [logMessage])\n  }\n\n  /**\n   * @param {LogLevel} level\n   * @memberof ConsoleLogger\n   */\n  setLogLevel(level: LogLevel | string) : void {\n    level = coerceLogLevel(level)\n    if (!isValidEnum(LogLevel, level) || level === undefined) {\n      this.logLevel = LogLevel.ERROR\n    } else {\n      this.logLevel = level\n    }\n  }\n\n  /**\n   * @returns {string}\n   * @memberof ConsoleLogger\n   */\n  getTime(): string {\n    return new Date().toISOString()\n  }\n\n  /**\n   * @private\n   * @param {LogLevel} targetLogLevel\n   * @returns {boolean}\n   * @memberof ConsoleLogger\n   */\n  private shouldLog(targetLogLevel: LogLevel): boolean {\n    return targetLogLevel >= this.logLevel\n  }\n\n  /**\n   * @private\n   * @param {LogLevel} logLevel\n   * @returns {string}\n   * @memberof ConsoleLogger\n   */\n  private getLogLevelName(logLevel: LogLevel): string {\n    switch (logLevel) {\n      case LogLevel.DEBUG:\n        return 'DEBUG'\n      case LogLevel.INFO:\n        return 'INFO '\n      case LogLevel.WARNING:\n        return 'WARN '\n      case LogLevel.ERROR:\n        return 'ERROR'\n      default:\n        return 'NOTSET'\n    }\n  }\n\n  /**\n   * @private\n   * @param {LogLevel} logLevel\n   * @param {string[]} logArguments\n   * @memberof ConsoleLogger\n   */\n  private consoleLog(logLevel: LogLevel, logArguments: [string, ...string[]]) {\n    switch (logLevel) {\n      case LogLevel.DEBUG:\n        console.log(...logArguments)\n        break\n      case LogLevel.INFO:\n        console.info(...logArguments)\n        break\n      case LogLevel.WARNING:\n        console.warn(...logArguments)\n        break\n      case LogLevel.ERROR:\n        console.error(...logArguments)\n        break\n      default:\n        console.log(...logArguments)\n    }\n  }\n}\n\nlet globalLogLevel: LogLevel = LogLevel.NOTSET\nlet globalLogHandler: LogHandler | null = null\n\nclass OptimizelyLogger implements LoggerFacade {\n  private messagePrefix = ''\n\n  constructor(opts: { messagePrefix?: string } = {}) {\n    if (opts.messagePrefix) {\n      this.messagePrefix = opts.messagePrefix\n    }\n  }\n\n  /**\n   * @param {(LogLevel | LogInputObject)} levelOrObj\n   * @param {string} [message]\n   * @memberof OptimizelyLogger\n   */\n  log(level: LogLevel | string, message: string, ...splat: any[]): void {\n    this.internalLog(coerceLogLevel(level), {\n      message,\n      splat,\n    })\n  }\n\n  info(message: string | Error, ...splat: any[]): void {\n    this.namedLog(LogLevel.INFO, message, splat)\n  }\n\n  debug(message: string | Error, ...splat: any[]): void {\n    this.namedLog(LogLevel.DEBUG, message, splat)\n  }\n\n  warn(message: string | Error, ...splat: any[]): void {\n    this.namedLog(LogLevel.WARNING, message, splat)\n  }\n\n  error(message: string | Error, ...splat: any[]): void {\n    this.namedLog(LogLevel.ERROR, message, splat)\n  }\n\n  private format(data: LogData): string {\n    return `${this.messagePrefix ? this.messagePrefix + ': ' : ''}${sprintf(\n      data.message,\n      ...data.splat,\n    )}`\n  }\n\n  private internalLog(level: LogLevel, data: LogData): void {\n    if (!globalLogHandler) {\n      return\n    }\n\n    if (level < globalLogLevel) {\n      return\n    }\n\n    globalLogHandler.log(level, this.format(data))\n\n    if (data.error && data.error instanceof Error) {\n      getErrorHandler().handleError(data.error)\n    }\n  }\n\n  private namedLog(level: LogLevel, message: string | Error, splat: any[]): void {\n    let error: Error | undefined\n\n    if (message instanceof Error) {\n      error = message\n      message = error.message\n      this.internalLog(level, {\n        error,\n        message,\n        splat,\n      })\n      return\n    }\n\n    if (splat.length === 0) {\n      this.internalLog(level, {\n        message,\n        splat,\n      })\n      return\n    }\n\n    const last = splat[splat.length - 1]\n    if (last instanceof Error) {\n      error = last\n      splat.splice(-1)\n    }\n\n    this.internalLog(level, { message, error, splat })\n  }\n}\n\nlet globalLogManager: LogManager = new DefaultLogManager()\n\nexport function getLogger(name?: string): LoggerFacade {\n  return globalLogManager.getLogger(name)\n}\n\nexport function setLogHandler(logger: LogHandler | null) : void {\n  globalLogHandler = logger\n}\n\nexport function setLogLevel(level: LogLevel | string) : void {\n  level = coerceLogLevel(level)\n  if (!isValidEnum(LogLevel, level) || level === undefined) {\n    globalLogLevel = LogLevel.ERROR\n  } else {\n    globalLogLevel = level\n  }\n}\n\nexport function getLogLevel(): LogLevel {\n  return globalLogLevel\n}\n\n/**\n * Resets all global logger state to it's original\n */\nexport function resetLogger() : void {\n  globalLogManager = new DefaultLogManager()\n  globalLogLevel = LogLevel.NOTSET\n}\n\nexport default {\n  setLogLevel: setLogLevel,\n  setLogHandler: setLogHandler\n}\n","/**\n * Copyright 2022-2023, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { checkArrayEquality } from '../../utils/fns';\n\nexport class OdpConfig {\n  /**\n   * Host of ODP audience segments API.\n   * @private\n   */\n  private _apiHost: string;\n\n  /**\n   * Getter to retrieve the ODP server host\n   * @public\n   */\n  get apiHost(): string {\n    return this._apiHost;\n  }\n\n  /**\n   * Public API key for the ODP account from which the audience segments will be fetched (optional).\n   * @private\n   */\n  private _apiKey: string;\n\n  /**\n   * Getter to retrieve the ODP API key\n   * @public\n   */\n  get apiKey(): string {\n    return this._apiKey;\n  }\n\n  /**\n   * Url for sending events via pixel.\n   * @private\n   */\n  private _pixelUrl: string;\n\n  /**\n   * Getter to retrieve the ODP pixel URL\n   * @public\n   */\n  get pixelUrl(): string {\n    return this._pixelUrl;\n  }\n\n  /**\n   * All ODP segments used in the current datafile (associated with apiHost/apiKey).\n   * @private\n   */\n  private _segmentsToCheck: string[];\n\n  /**\n   * Getter for ODP segments to check\n   * @public\n   */\n  get segmentsToCheck(): string[] {\n    return this._segmentsToCheck;\n  }\n\n  constructor(apiKey?: string, apiHost?: string, pixelUrl?: string, segmentsToCheck?: string[]) {\n    this._apiKey = apiKey ?? '';\n    this._apiHost = apiHost ?? '';\n    this._pixelUrl = pixelUrl ?? '';\n    this._segmentsToCheck = segmentsToCheck ?? [];\n  }\n\n  /**\n   * Update the ODP configuration details\n   * @param {OdpConfig} config New ODP Config to potentially update self with\n   * @returns true if configuration was updated successfully\n   */\n  update(config: OdpConfig): boolean {\n    if (this.equals(config)) {\n      return false;\n    } else {\n      if (config.apiKey) this._apiKey = config.apiKey;\n      if (config.apiHost) this._apiHost = config.apiHost;\n      if (config.pixelUrl) this._pixelUrl = config.pixelUrl;\n      if (config.segmentsToCheck) this._segmentsToCheck = config.segmentsToCheck;\n\n      return true;\n    }\n  }\n\n  /**\n   * Determines if ODP configuration has the minimum amount of information\n   */\n  isReady(): boolean {\n    return !!this._apiKey && !!this._apiHost;\n  }\n\n  /**\n   * Detects if there are any changes between the current and incoming ODP Configs\n   * @param configToCompare ODP Configuration to check self against for equality\n   * @returns Boolean based on if the current ODP Config is equivalent to the incoming ODP Config\n   */\n  equals(configToCompare: OdpConfig): boolean {\n    return (\n      this._apiHost === configToCompare._apiHost &&\n      this._apiKey === configToCompare._apiKey &&\n      this._pixelUrl === configToCompare._pixelUrl &&\n      checkArrayEquality(this.segmentsToCheck, configToCompare._segmentsToCheck)\n    );\n  }\n}\n","/**\n * Copyright 2022, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Options for defining behavior of OdpSegmentManager's caching mechanism when calling fetchSegments()\nexport enum OptimizelySegmentOption {\n  IGNORE_CACHE = 'IGNORE_CACHE',\n  RESET_CACHE = 'RESET_CACHE',\n}\n","/**\n * Copyright 2020-2023, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This file contains the shared type definitions collected from the SDK.\n * These shared type definitions include ones that will be referenced by external consumers via export_types.ts.\n */\n\nimport { ErrorHandler, LogHandler, LogLevel, LoggerFacade } from './modules/logging';\nimport { EventProcessor } from './modules/event_processor';\n\nimport { NotificationCenter as NotificationCenterImpl } from './core/notification_center';\nimport { NOTIFICATION_TYPES } from './utils/enums';\n\nimport { IOptimizelyUserContext as OptimizelyUserContext } from './optimizely_user_context';\n\nimport { ICache } from './utils/lru_cache';\nimport { RequestHandler } from './utils/http_request_handler/http';\nimport { OptimizelySegmentOption } from './core/odp/optimizely_segment_option';\nimport { IOdpSegmentApiManager } from './core/odp/odp_segment_api_manager';\nimport { IOdpSegmentManager } from './core/odp/odp_segment_manager';\nimport { IOdpEventApiManager } from './core/odp/odp_event_api_manager';\nimport { IOdpEventManager } from './core/odp/odp_event_manager';\nimport { IOdpManager } from './core/odp/odp_manager';\nimport { IUserAgentParser } from './core/odp/user_agent_parser';\n\nexport interface BucketerParams {\n  experimentId: string;\n  experimentKey: string;\n  userId: string;\n  trafficAllocationConfig: TrafficAllocation[];\n  experimentKeyMap: { [key: string]: Experiment };\n  experimentIdMap: { [id: string]: Experiment };\n  groupIdMap: { [key: string]: Group };\n  variationIdMap: { [id: string]: Variation };\n  logger: LogHandler;\n  bucketingId: string;\n}\n\nexport interface DecisionResponse<T> {\n  readonly result: T;\n  readonly reasons: (string | number)[][];\n}\n\nexport type UserAttributeValue = string | number | boolean | null;\n\nexport type UserAttributes = {\n  [name: string]: UserAttributeValue;\n};\n\nexport interface ExperimentBucketMap {\n  [experiment_id: string]: { variation_id: string };\n}\n\n// Information about past bucketing decisions for a user.\nexport interface UserProfile {\n  user_id: string;\n  experiment_bucket_map: ExperimentBucketMap;\n}\n\nexport type EventTags = {\n  [key: string]: string | number | null;\n};\n\nexport interface UserProfileService {\n  lookup(userId: string): UserProfile;\n  save(profile: UserProfile): void;\n}\n\nexport interface DatafileManagerConfig {\n  sdkKey: string;\n  datafile?: string;\n}\n\nexport interface DatafileOptions {\n  autoUpdate?: boolean;\n  updateInterval?: number;\n  urlTemplate?: string;\n  datafileAccessToken?: string;\n}\n\nexport interface OdpOptions {\n  disabled?: boolean;\n  segmentsCache?: ICache<string, string[]>;\n  segmentsCacheSize?: number;\n  segmentsCacheTimeout?: number;\n  segmentsApiTimeout?: number;\n  segmentsRequestHandler?: RequestHandler;\n  segmentManager?: IOdpSegmentManager;\n  eventFlushInterval?: number;\n  eventBatchSize?: number;\n  eventQueueSize?: number;\n  eventApiTimeout?: number;\n  eventRequestHandler?: RequestHandler;\n  eventManager?: IOdpEventManager;\n  userAgentParser?: IUserAgentParser;\n}\n\nexport interface ListenerPayload {\n  userId: string;\n  attributes?: UserAttributes;\n}\n\nexport type NotificationListener<T extends ListenerPayload> = (notificationData: T) => void;\n\n// NotificationCenter-related types\nexport interface NotificationCenter {\n  addNotificationListener<T extends ListenerPayload>(\n    notificationType: string,\n    callback: NotificationListener<T>\n  ): number;\n  removeNotificationListener(listenerId: number): boolean;\n  clearAllNotificationListeners(): void;\n  clearNotificationListeners(notificationType: NOTIFICATION_TYPES): void;\n}\n\n// An event to be submitted to Optimizely, enabling tracking the reach and impact of\n// tests and feature rollouts.\nexport interface Event {\n  // URL to which to send the HTTP request.\n  url: string;\n  // HTTP method with which to send the event.\n  httpVerb: 'POST';\n  // Value to send in the request body, JSON-serialized.\n  // TODO[OASIS-6649]: Don't use any type\n  // eslint-disable-next-line  @typescript-eslint/no-explicit-any\n  params: any;\n}\n\nexport interface EventDispatcher {\n  /**\n   * @param event\n   *        Event being submitted for eventual dispatch.\n   * @param callback\n   *        After the event has at least been queued for dispatch, call this function to return\n   *        control back to the Client.\n   */\n  dispatchEvent: (event: Event, callback: (response: { statusCode: number }) => void) => void;\n}\n\nexport interface VariationVariable {\n  id: string;\n  value: string;\n}\n\nexport interface Variation {\n  id: string;\n  key: string;\n  featureEnabled?: boolean;\n  variablesMap: OptimizelyVariablesMap;\n  variables?: VariationVariable[];\n}\n\nexport interface Experiment {\n  id: string;\n  key: string;\n  variations: Variation[];\n  variationKeyMap: { [key: string]: Variation };\n  groupId?: string;\n  layerId: string;\n  status: string;\n  audienceConditions: Array<string | string[]>;\n  audienceIds: string[];\n  trafficAllocation: TrafficAllocation[];\n  forcedVariations?: { [key: string]: string };\n}\n\nexport enum VariableType {\n  BOOLEAN = 'boolean',\n  DOUBLE = 'double',\n  INTEGER = 'integer',\n  STRING = 'string',\n  JSON = 'json',\n}\n\nexport interface FeatureVariable {\n  type: VariableType;\n  key: string;\n  id: string;\n  defaultValue: string;\n  subType?: string;\n}\n\nexport interface FeatureFlag {\n  rolloutId: string;\n  key: string;\n  id: string;\n  experimentIds: string[];\n  variables: FeatureVariable[];\n  variableKeyMap: { [key: string]: FeatureVariable };\n  groupId?: string;\n}\n\nexport type Condition = {\n  name: string;\n  type: string;\n  match?: string;\n  value: string | number | boolean | null;\n};\n\nexport interface Audience {\n  id: string;\n  name: string;\n  conditions: unknown[] | string;\n}\n\nexport interface Integration {\n  key: string;\n  host?: string;\n  publicKey?: string;\n  pixelUrl?: string;\n}\n\nexport interface TrafficAllocation {\n  entityId: string;\n  endOfRange: number;\n}\n\nexport interface Group {\n  id: string;\n  policy: string;\n  trafficAllocation: TrafficAllocation[];\n  experiments: Experiment[];\n}\n\nexport interface TrafficAllocation {\n  entityId: string;\n  endOfRange: number;\n}\n\nexport interface Group {\n  id: string;\n  policy: string;\n  trafficAllocation: TrafficAllocation[];\n  experiments: Experiment[];\n}\n\nexport interface FeatureKeyMap {\n  [key: string]: FeatureFlag;\n}\n\nexport interface OnReadyResult {\n  success: boolean;\n  reason?: string;\n}\n\nexport type ObjectWithUnknownProperties = {\n  [key: string]: unknown;\n};\n\nexport interface Rollout {\n  id: string;\n  experiments: Experiment[];\n}\n\n//TODO: Move OptimizelyDecideOption to @optimizely/optimizely-sdk/lib/utils/enums\nexport enum OptimizelyDecideOption {\n  DISABLE_DECISION_EVENT = 'DISABLE_DECISION_EVENT',\n  ENABLED_FLAGS_ONLY = 'ENABLED_FLAGS_ONLY',\n  IGNORE_USER_PROFILE_SERVICE = 'IGNORE_USER_PROFILE_SERVICE',\n  INCLUDE_REASONS = 'INCLUDE_REASONS',\n  EXCLUDE_VARIABLES = 'EXCLUDE_VARIABLES',\n}\n\n/**\n * options required to create optimizely object\n */\nexport interface OptimizelyOptions {\n  UNSTABLE_conditionEvaluators?: unknown;\n  clientEngine: string;\n  clientVersion?: string;\n  // TODO[OASIS-6649]: Don't use object type\n  // eslint-disable-next-line  @typescript-eslint/ban-types\n  datafile?: string | object;\n  datafileManager?: DatafileManager;\n  errorHandler: ErrorHandler;\n  eventProcessor: EventProcessor;\n  isValidInstance: boolean;\n  jsonSchemaValidator?: {\n    validate(jsonObject: unknown): boolean;\n  };\n  logger: LoggerFacade;\n  sdkKey?: string;\n  userProfileService?: UserProfileService | null;\n  defaultDecideOptions?: OptimizelyDecideOption[];\n  odpManager?: IOdpManager;\n  notificationCenter: NotificationCenterImpl;\n}\n\n/**\n * Optimizely Config Entities\n */\nexport interface OptimizelyExperiment {\n  id: string;\n  key: string;\n  audiences: string;\n  variationsMap: {\n    [variationKey: string]: OptimizelyVariation;\n  };\n}\n\nexport type FeatureVariableValue = number | string | boolean | object | null;\n\nexport interface OptimizelyVariable {\n  id: string;\n  key: string;\n  type: string;\n  value: string;\n}\n\nexport interface Client {\n  // TODO: In the future, will add a function to allow overriding the VUID.\n  getVuid(): string | undefined;\n  createUserContext(userId?: string, attributes?: UserAttributes): OptimizelyUserContext | null;\n  notificationCenter: NotificationCenter;\n  activate(experimentKey: string, userId: string, attributes?: UserAttributes): string | null;\n  track(eventKey: string, userId: string, attributes?: UserAttributes, eventTags?: EventTags): void;\n  getVariation(experimentKey: string, userId: string, attributes?: UserAttributes): string | null;\n  setForcedVariation(experimentKey: string, userId: string, variationKey: string | null): boolean;\n  getForcedVariation(experimentKey: string, userId: string): string | null;\n  isFeatureEnabled(featureKey: string, userId: string, attributes?: UserAttributes): boolean;\n  getEnabledFeatures(userId: string, attributes?: UserAttributes): string[];\n  getFeatureVariable(featureKey: string, variableKey: string, userId: string, attributes?: UserAttributes): FeatureVariableValue;\n  getFeatureVariableBoolean(\n    featureKey: string,\n    variableKey: string,\n    userId: string,\n    attributes?: UserAttributes\n  ): boolean | null;\n  getFeatureVariableDouble(\n    featureKey: string,\n    variableKey: string,\n    userId: string,\n    attributes?: UserAttributes\n  ): number | null;\n  getFeatureVariableInteger(\n    featureKey: string,\n    variableKey: string,\n    userId: string,\n    attributes?: UserAttributes\n  ): number | null;\n  getFeatureVariableString(\n    featureKey: string,\n    variableKey: string,\n    userId: string,\n    attributes?: UserAttributes\n  ): string | null;\n  getFeatureVariableJSON(featureKey: string, variableKey: string, userId: string, attributes?: UserAttributes): unknown;\n  getAllFeatureVariables(\n    featureKey: string,\n    userId: string,\n    attributes?: UserAttributes\n  ): { [variableKey: string]: unknown } | null;\n  getOptimizelyConfig(): OptimizelyConfig | null;\n  onReady(options?: { timeout?: number }): Promise<{ success: boolean; reason?: string }>;\n  close(): Promise<{ success: boolean; reason?: string }>;\n  sendOdpEvent(action: string, type?: string, identifiers?: Map<string, string>, data?: Map<string, unknown>): void;\n}\n\nexport interface ActivateListenerPayload extends ListenerPayload {\n  experiment: import('./shared_types').Experiment;\n  variation: import('./shared_types').Variation;\n  logEvent: Event;\n}\n\nexport interface TrackListenerPayload extends ListenerPayload {\n  eventKey: string;\n  eventTags: EventTags;\n  logEvent: Event;\n}\n\n/**\n * Entry level Config Entities\n * For compatibility with the previous declaration file\n */\nexport interface Config extends ConfigLite {\n  datafileOptions?: DatafileOptions; // Options for Datafile Manager\n  eventBatchSize?: number; // Maximum size of events to be dispatched in a batch\n  eventFlushInterval?: number; // Maximum time for an event to be enqueued\n  eventMaxQueueSize?: number; // Maximum size for the event queue\n  sdkKey?: string;\n  odpOptions?: OdpOptions;\n}\n\n/**\n * Entry level Config Entities for Lite bundle\n * For compatibility with the previous declaration file\n */\nexport interface ConfigLite {\n  // Datafile string\n  // TODO[OASIS-6649]: Don't use object type\n  // eslint-disable-next-line  @typescript-eslint/ban-types\n  datafile?: object | string;\n  // errorHandler object for logging error\n  errorHandler?: ErrorHandler;\n  // event dispatcher function\n  eventDispatcher?: EventDispatcher;\n  // event dispatcher to use when closing\n  closingEventDispatcher?: EventDispatcher;\n  // The object to validate against the schema\n  jsonSchemaValidator?: {\n    validate(jsonObject: unknown): boolean;\n  };\n  // level of logging i.e debug, info, error, warning etc\n  logLevel?: LogLevel | string;\n  // LogHandler object for logging\n  logger?: LogHandler;\n  // user profile that contains user information\n  userProfileService?: UserProfileService;\n  // dafault options for decide API\n  defaultDecideOptions?: OptimizelyDecideOption[];\n  clientEngine?: string;\n  clientVersion?: string;\n}\n\nexport type OptimizelyExperimentsMap = {\n  [experimentKey: string]: OptimizelyExperiment;\n};\n\nexport type OptimizelyVariablesMap = {\n  [variableKey: string]: OptimizelyVariable;\n};\n\nexport type OptimizelyFeaturesMap = {\n  [featureKey: string]: OptimizelyFeature;\n};\n\nexport type OptimizelyAttribute = {\n  id: string;\n  key: string;\n};\n\nexport type OptimizelyAudience = {\n  id: string;\n  name: string;\n  conditions: string;\n};\n\nexport type OptimizelyEvent = {\n  id: string;\n  key: string;\n  experimentsIds: string[];\n};\n\nexport interface OptimizelyFeature {\n  id: string;\n  key: string;\n  experimentRules: OptimizelyExperiment[];\n  deliveryRules: OptimizelyExperiment[];\n  variablesMap: OptimizelyVariablesMap;\n\n  /**\n   * @deprecated Use experimentRules and deliveryRules\n   */\n  experimentsMap: OptimizelyExperimentsMap;\n}\n\nexport interface OptimizelyVariation {\n  id: string;\n  key: string;\n  featureEnabled?: boolean;\n  variablesMap: OptimizelyVariablesMap;\n}\n\nexport interface OptimizelyConfig {\n  environmentKey: string;\n  sdkKey: string;\n  revision: string;\n\n  /**\n   * This experimentsMap is for experiments of legacy projects only.\n   * For flag projects, experiment keys are not guaranteed to be unique\n   * across multiple flags, so this map may not include all experiments\n   * when keys conflict.\n   */\n  experimentsMap: OptimizelyExperimentsMap;\n\n  featuresMap: OptimizelyFeaturesMap;\n  attributes: OptimizelyAttribute[];\n  audiences: OptimizelyAudience[];\n  events: OptimizelyEvent[];\n  getDatafile(): string;\n}\n\nexport { OptimizelyUserContext };\n\nexport interface OptimizelyDecision {\n  variationKey: string | null;\n  // The boolean value indicating if the flag is enabled or not\n  enabled: boolean;\n  // The collection of variables associated with the decision\n  variables: { [variableKey: string]: unknown };\n  // The rule key of the decision\n  ruleKey: string | null;\n  // The flag key for which the decision has been made for\n  flagKey: string;\n  // A copy of the user context for which the decision has been made for\n  userContext: OptimizelyUserContext;\n  // An array of error/info messages describing why the decision has been made.\n  reasons: string[];\n}\n\nexport interface DatafileUpdate {\n  datafile: string;\n}\n\nexport interface DatafileUpdateListener {\n  (datafileUpdate: DatafileUpdate): void;\n}\n\n// TODO: Replace this with the one from js-sdk-models\ninterface Managed {\n  start(): void;\n\n  stop(): Promise<unknown>;\n}\n\nexport interface DatafileManager extends Managed {\n  get: () => string;\n  on(eventName: string, listener: DatafileUpdateListener): () => void;\n  onReady: () => Promise<void>;\n}\n\nexport interface OptimizelyDecisionContext {\n  flagKey: string;\n  ruleKey?: string;\n}\n\nexport interface OptimizelyForcedDecision {\n  variationKey: string;\n}\n\n// ODP Exports\n\nexport {\n  ICache,\n  RequestHandler,\n  OptimizelySegmentOption,\n  IOdpSegmentApiManager,\n  IOdpSegmentManager,\n  IOdpEventApiManager,\n  IOdpEventManager,\n  IOdpManager,\n};\n","/**\n * Copyright 2022-2023, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class OdpEvent {\n  /**\n   * Type of event (typically \"fullstack\")\n   */\n  type: string;\n\n  /**\n   * Subcategory of the event type\n   */\n  action: string;\n\n  /**\n   * Key-value map of user identifiers\n   */\n  identifiers: Map<string, string>;\n\n  /**\n   * Event data in a key-value map\n   */\n  data: Map<string, unknown>;\n\n  /**\n   * Event to be sent and stored in the Optimizely Data Platform\n   * @param type Type of event (typically \"fullstack\")\n   * @param action Subcategory of the event type\n   * @param identifiers Key-value map of user identifiers\n   * @param data Event data in a key-value map.\n   */\n  constructor(type: string, action: string, identifiers?: Map<string, string>, data?: Map<string, unknown>) {\n    this.type = type;\n    this.action = action;\n    this.identifiers = identifiers ?? new Map<string, string>();\n    this.data = data ?? new Map<string, unknown>();\n  }\n}\n","/****************************************************************************\n * Copyright 2020, Optimizely, Inc. and contributors                   *\n *                                                                          *\n * Licensed under the Apache License, Version 2.0 (the \"License\");          *\n * you may not use this file except in compliance with the License.         *\n * You may obtain a copy of the License at                                  *\n *                                                                          *\n *    http://www.apache.org/licenses/LICENSE-2.0                            *\n *                                                                          *\n * Unless required by applicable law or agreed to in writing, software      *\n * distributed under the License is distributed on an \"AS IS\" BASIS,        *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *\n * See the License for the specific language governing permissions and      *\n * limitations under the License.                                           *\n ***************************************************************************/\nimport { OptimizelyUserContext, OptimizelyDecision } from '../shared_types';\n\nexport function newErrorDecision(key: string, user: OptimizelyUserContext, reasons: string[]): OptimizelyDecision {\n  return {\n    variationKey: null,\n    enabled: false,\n    variables: {},\n    ruleKey: null,\n    flagKey: key,\n    userContext: user,\n    reasons: reasons,\n  };\n}\n","/****************************************************************************\n * Copyright 2016-2024 Optimizely, Inc. and contributors                   *\n *                                                                          *\n * Licensed under the Apache License, Version 2.0 (the \"License\");          *\n * you may not use this file except in compliance with the License.         *\n * You may obtain a copy of the License at                                  *\n *                                                                          *\n *    https://www.apache.org/licenses/LICENSE-2.0                            *\n *                                                                          *\n * Unless required by applicable law or agreed to in writing, software      *\n * distributed under the License is distributed on an \"AS IS\" BASIS,        *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *\n * See the License for the specific language governing permissions and      *\n * limitations under the License.                                           *\n ***************************************************************************/\n\n/**\n * Contains global enums used throughout the library\n */\nexport const LOG_LEVEL = {\n  NOTSET: 0,\n  DEBUG: 1,\n  INFO: 2,\n  WARNING: 3,\n  ERROR: 4,\n};\n\nexport const ERROR_MESSAGES = {\n  BROWSER_ODP_MANAGER_INITIALIZATION_FAILED: '%s: Error initializing Browser ODP Manager.',\n  CONDITION_EVALUATOR_ERROR: '%s: Error evaluating audience condition of type %s: %s',\n  DATAFILE_AND_SDK_KEY_MISSING: '%s: You must provide at least one of sdkKey or datafile. Cannot start Optimizely',\n  EXPERIMENT_KEY_NOT_IN_DATAFILE: '%s: Experiment key %s is not in datafile.',\n  FEATURE_NOT_IN_DATAFILE: '%s: Feature key %s is not in datafile.',\n  FETCH_SEGMENTS_FAILED_INVALID_IDENTIFIER: '%s: Audience segments fetch failed. (invalid identifier)',\n  FETCH_SEGMENTS_FAILED_NETWORK_ERROR: '%s: Audience segments fetch failed. (network error)',\n  FETCH_SEGMENTS_FAILED_DECODE_ERROR: '%s: Audience segments fetch failed. (decode error)',\n  IMPROPERLY_FORMATTED_EXPERIMENT: '%s: Experiment key %s is improperly formatted.',\n  INVALID_ATTRIBUTES: '%s: Provided attributes are in an invalid format.',\n  INVALID_BUCKETING_ID: '%s: Unable to generate hash for bucketing ID %s: %s',\n  INVALID_DATAFILE: '%s: Datafile is invalid - property %s: %s',\n  INVALID_DATAFILE_MALFORMED: '%s: Datafile is invalid because it is malformed.',\n  INVALID_CONFIG: '%s: Provided Optimizely config is in an invalid format.',\n  INVALID_JSON: '%s: JSON object is not valid.',\n  INVALID_ERROR_HANDLER: '%s: Provided \"errorHandler\" is in an invalid format.',\n  INVALID_EVENT_DISPATCHER: '%s: Provided \"eventDispatcher\" is in an invalid format.',\n  INVALID_EVENT_TAGS: '%s: Provided event tags are in an invalid format.',\n  INVALID_EXPERIMENT_KEY: '%s: Experiment key %s is not in datafile. It is either invalid, paused, or archived.',\n  INVALID_EXPERIMENT_ID: '%s: Experiment ID %s is not in datafile.',\n  INVALID_GROUP_ID: '%s: Group ID %s is not in datafile.',\n  INVALID_LOGGER: '%s: Provided \"logger\" is in an invalid format.',\n  INVALID_ROLLOUT_ID: '%s: Invalid rollout ID %s attached to feature %s',\n  INVALID_USER_ID: '%s: Provided user ID is in an invalid format.',\n  INVALID_USER_PROFILE_SERVICE: '%s: Provided user profile service instance is in an invalid format: %s.',\n  LOCAL_STORAGE_DOES_NOT_EXIST: 'Error accessing window localStorage.',\n  MISSING_INTEGRATION_KEY: '%s: Integration key missing from datafile. All integrations should include a key.',\n  NO_DATAFILE_SPECIFIED: '%s: No datafile specified. Cannot start optimizely.',\n  NO_JSON_PROVIDED: '%s: No JSON object to validate against schema.',\n  NO_VARIATION_FOR_EXPERIMENT_KEY: '%s: No variation key %s defined in datafile for experiment %s.',\n  ODP_EVENT_FAILED: 'ODP event send failed.',\n  ODP_FETCH_QUALIFIED_SEGMENTS_SEGMENTS_MANAGER_MISSING:\n    '%s: ODP unable to fetch qualified segments (Segments Manager not initialized).',\n  ODP_IDENTIFY_FAILED_EVENT_MANAGER_MISSING:\n    '%s: ODP identify event %s is not dispatched (Event Manager not instantiated).',\n  ODP_INITIALIZATION_FAILED: '%s: ODP failed to initialize.',\n  ODP_INVALID_DATA: '%s: ODP data is not valid',\n  ODP_EVENT_FAILED_ODP_MANAGER_MISSING: '%s: ODP Event failed to send. (ODP Manager not initialized).',\n  ODP_FETCH_QUALIFIED_SEGMENTS_FAILED_ODP_MANAGER_MISSING:\n    '%s: ODP failed to Fetch Qualified Segments. (ODP Manager not initialized).',\n  ODP_IDENTIFY_USER_FAILED_ODP_MANAGER_MISSING: '%s: ODP failed to Identify User. (ODP Manager not initialized).',\n  ODP_IDENTIFY_USER_FAILED_USER_CONTEXT_INITIALIZATION:\n    '%s: ODP failed to Identify User. (Failed during User Context Initialization).',\n  ODP_MANAGER_UPDATE_SETTINGS_FAILED_EVENT_MANAGER_MISSING:\n    '%s: ODP Manager failed to update OdpConfig settings for internal event manager. (Event Manager not initialized).',\n  ODP_MANAGER_UPDATE_SETTINGS_FAILED_SEGMENTS_MANAGER_MISSING:\n    '%s: ODP Manager failed to update OdpConfig settings for internal segments manager. (Segments Manager not initialized).',\n  ODP_NOT_ENABLED: 'ODP is not enabled',\n  ODP_NOT_INTEGRATED: '%s: ODP is not integrated',\n  ODP_SEND_EVENT_FAILED_EVENT_MANAGER_MISSING:\n    '%s: ODP send event %s was not dispatched (Event Manager not instantiated).',\n  ODP_SEND_EVENT_FAILED_UID_MISSING: '%s: ODP send event %s was not dispatched (No valid user identifier provided).',\n  ODP_SEND_EVENT_FAILED_VUID_MISSING: '%s: ODP send event %s was not dispatched (Unable to fetch VUID).',\n  ODP_SDK_KEY_MISSING_NOTIFICATION_CENTER_FAILURE:\n    '%s: You must provide an sdkKey. Cannot start Notification Center for ODP Integration.',\n  ODP_VUID_INITIALIZATION_FAILED: '%s: ODP VUID initialization failed.',\n  ODP_VUID_REGISTRATION_FAILED: '%s: ODP VUID failed to be registered.',\n  ODP_VUID_REGISTRATION_FAILED_EVENT_MANAGER_MISSING: '%s: ODP register vuid failed. (Event Manager not instantiated).',\n  UNDEFINED_ATTRIBUTE: '%s: Provided attribute: %s has an undefined value.',\n  UNRECOGNIZED_ATTRIBUTE: '%s: Unrecognized attribute %s provided. Pruning before sending event to Optimizely.',\n  UNABLE_TO_CAST_VALUE: '%s: Unable to cast value %s to type %s, returning null.',\n  USER_NOT_IN_FORCED_VARIATION: '%s: User %s is not in the forced variation map. Cannot remove their forced variation.',\n  USER_PROFILE_LOOKUP_ERROR: '%s: Error while looking up user profile for user ID \"%s\": %s.',\n  USER_PROFILE_SAVE_ERROR: '%s: Error while saving user profile for user ID \"%s\": %s.',\n  VARIABLE_KEY_NOT_IN_DATAFILE: '%s: Variable with key \"%s\" associated with feature with key \"%s\" is not in datafile.',\n  VARIATION_ID_NOT_IN_DATAFILE: '%s: No variation ID %s defined in datafile for experiment %s.',\n  VARIATION_ID_NOT_IN_DATAFILE_NO_EXPERIMENT: '%s: Variation ID %s is not in the datafile.',\n  INVALID_INPUT_FORMAT: '%s: Provided %s is in an invalid format.',\n  INVALID_DATAFILE_VERSION: '%s: This version of the JavaScript SDK does not support the given datafile version: %s',\n  INVALID_VARIATION_KEY: '%s: Provided variation key is in an invalid format.',\n};\n\nexport const LOG_MESSAGES = {\n  ACTIVATE_USER: '%s: Activating user %s in experiment %s.',\n  DISPATCH_CONVERSION_EVENT: '%s: Dispatching conversion event to URL %s with params %s.',\n  DISPATCH_IMPRESSION_EVENT: '%s: Dispatching impression event to URL %s with params %s.',\n  DEPRECATED_EVENT_VALUE: '%s: Event value is deprecated in %s call.',\n  EVENT_KEY_NOT_FOUND: '%s: Event key %s is not in datafile.',\n  EXPERIMENT_NOT_RUNNING: '%s: Experiment %s is not running.',\n  FEATURE_ENABLED_FOR_USER: '%s: Feature %s is enabled for user %s.',\n  FEATURE_NOT_ENABLED_FOR_USER: '%s: Feature %s is not enabled for user %s.',\n  FEATURE_HAS_NO_EXPERIMENTS: '%s: Feature %s is not attached to any experiments.',\n  FAILED_TO_PARSE_VALUE: '%s: Failed to parse event value \"%s\" from event tags.',\n  FAILED_TO_PARSE_REVENUE: '%s: Failed to parse revenue value \"%s\" from event tags.',\n  FORCED_BUCKETING_FAILED: '%s: Variation key %s is not in datafile. Not activating user %s.',\n  INVALID_OBJECT: '%s: Optimizely object is not valid. Failing %s.',\n  INVALID_CLIENT_ENGINE: '%s: Invalid client engine passed: %s. Defaulting to node-sdk.',\n  INVALID_DEFAULT_DECIDE_OPTIONS: '%s: Provided default decide options is not an array.',\n  INVALID_DECIDE_OPTIONS: '%s: Provided decide options is not an array. Using default decide options.',\n  INVALID_VARIATION_ID: '%s: Bucketed into an invalid variation ID. Returning null.',\n  NOTIFICATION_LISTENER_EXCEPTION: '%s: Notification listener for (%s) threw exception: %s',\n  NO_ROLLOUT_EXISTS: '%s: There is no rollout of feature %s.',\n  NOT_ACTIVATING_USER: '%s: Not activating user %s for experiment %s.',\n  NOT_TRACKING_USER: '%s: Not tracking user %s.',\n  ODP_DISABLED: 'ODP Disabled.',\n  ODP_IDENTIFY_FAILED_ODP_DISABLED: '%s: ODP identify event for user %s is not dispatched (ODP disabled).',\n  ODP_IDENTIFY_FAILED_ODP_NOT_INTEGRATED: '%s: ODP identify event %s is not dispatched (ODP not integrated).',\n  ODP_SEND_EVENT_IDENTIFIER_CONVERSION_FAILED:\n    '%s: sendOdpEvent failed to parse through and convert fs_user_id aliases',\n  PARSED_REVENUE_VALUE: '%s: Parsed revenue value \"%s\" from event tags.',\n  PARSED_NUMERIC_VALUE: '%s: Parsed event value \"%s\" from event tags.',\n  RETURNING_STORED_VARIATION:\n    '%s: Returning previously activated variation \"%s\" of experiment \"%s\" for user \"%s\" from user profile.',\n  ROLLOUT_HAS_NO_EXPERIMENTS: '%s: Rollout of feature %s has no experiments',\n  SAVED_VARIATION: '%s: Saved variation \"%s\" of experiment \"%s\" for user \"%s\".',\n  SAVED_VARIATION_NOT_FOUND:\n    '%s: User %s was previously bucketed into variation with ID %s for experiment %s, but no matching variation was found.',\n  SHOULD_NOT_DISPATCH_ACTIVATE: '%s: Experiment %s is not in \"Running\" state. Not activating user.',\n  SKIPPING_JSON_VALIDATION: '%s: Skipping JSON schema validation.',\n  TRACK_EVENT: '%s: Tracking event %s for user %s.',\n  UNRECOGNIZED_DECIDE_OPTION: '%s: Unrecognized decide option %s provided.',\n  USER_ASSIGNED_TO_EXPERIMENT_BUCKET: '%s: Assigned bucket %s to user with bucketing ID %s.',\n  USER_BUCKETED_INTO_EXPERIMENT_IN_GROUP: '%s: User %s is in experiment %s of group %s.',\n  USER_BUCKETED_INTO_TARGETING_RULE: '%s: User %s bucketed into targeting rule %s.',\n  USER_IN_FEATURE_EXPERIMENT: '%s: User %s is in variation %s of experiment %s on the feature %s.',\n  USER_IN_ROLLOUT: '%s: User %s is in rollout of feature %s.',\n  USER_NOT_BUCKETED_INTO_EVERYONE_TARGETING_RULE:\n    '%s: User %s not bucketed into everyone targeting rule due to traffic allocation.',\n  USER_NOT_BUCKETED_INTO_EXPERIMENT_IN_GROUP: '%s: User %s is not in experiment %s of group %s.',\n  USER_NOT_BUCKETED_INTO_ANY_EXPERIMENT_IN_GROUP: '%s: User %s is not in any experiment of group %s.',\n  USER_NOT_BUCKETED_INTO_TARGETING_RULE:\n    '%s User %s not bucketed into targeting rule %s due to traffic allocation. Trying everyone rule.',\n  USER_NOT_IN_FEATURE_EXPERIMENT: '%s: User %s is not in any experiment on the feature %s.',\n  USER_NOT_IN_ROLLOUT: '%s: User %s is not in rollout of feature %s.',\n  USER_FORCED_IN_VARIATION: '%s: User %s is forced in variation %s.',\n  USER_MAPPED_TO_FORCED_VARIATION: '%s: Set variation %s for experiment %s and user %s in the forced variation map.',\n  USER_DOESNT_MEET_CONDITIONS_FOR_TARGETING_RULE: '%s: User %s does not meet conditions for targeting rule %s.',\n  USER_MEETS_CONDITIONS_FOR_TARGETING_RULE: '%s: User %s meets conditions for targeting rule %s.',\n  USER_HAS_VARIATION: '%s: User %s is in variation %s of experiment %s.',\n  USER_HAS_FORCED_DECISION_WITH_RULE_SPECIFIED:\n    'Variation (%s) is mapped to flag (%s), rule (%s) and user (%s) in the forced decision map.',\n  USER_HAS_FORCED_DECISION_WITH_NO_RULE_SPECIFIED:\n    'Variation (%s) is mapped to flag (%s) and user (%s) in the forced decision map.',\n  USER_HAS_FORCED_DECISION_WITH_RULE_SPECIFIED_BUT_INVALID:\n    'Invalid variation is mapped to flag (%s), rule (%s) and user (%s) in the forced decision map.',\n  USER_HAS_FORCED_DECISION_WITH_NO_RULE_SPECIFIED_BUT_INVALID:\n    'Invalid variation is mapped to flag (%s) and user (%s) in the forced decision map.',\n  USER_HAS_FORCED_VARIATION: '%s: Variation %s is mapped to experiment %s and user %s in the forced variation map.',\n  USER_HAS_NO_VARIATION: '%s: User %s is in no variation of experiment %s.',\n  USER_HAS_NO_FORCED_VARIATION: '%s: User %s is not in the forced variation map.',\n  USER_HAS_NO_FORCED_VARIATION_FOR_EXPERIMENT: '%s: No experiment %s mapped to user %s in the forced variation map.',\n  USER_NOT_IN_ANY_EXPERIMENT: '%s: User %s is not in any experiment of group %s.',\n  USER_NOT_IN_EXPERIMENT: '%s: User %s does not meet conditions to be in experiment %s.',\n  USER_RECEIVED_DEFAULT_VARIABLE_VALUE:\n    '%s: User \"%s\" is not in any variation or rollout rule. Returning default value for variable \"%s\" of feature flag \"%s\".',\n  FEATURE_NOT_ENABLED_RETURN_DEFAULT_VARIABLE_VALUE:\n    '%s: Feature \"%s\" is not enabled for user %s. Returning the default variable value \"%s\".',\n  VARIABLE_NOT_USED_RETURN_DEFAULT_VARIABLE_VALUE:\n    '%s: Variable \"%s\" is not used in variation \"%s\". Returning default value.',\n  USER_RECEIVED_VARIABLE_VALUE: '%s: Got variable value \"%s\" for variable \"%s\" of feature flag \"%s\"',\n  VALID_DATAFILE: '%s: Datafile is valid.',\n  VALID_USER_PROFILE_SERVICE: '%s: Valid user profile service provided.',\n  VARIATION_REMOVED_FOR_USER: '%s: Variation mapped to experiment %s has been removed for user %s.',\n  VARIABLE_REQUESTED_WITH_WRONG_TYPE:\n    '%s: Requested variable type \"%s\", but variable is of type \"%s\". Use correct API to retrieve value. Returning None.',\n  VALID_BUCKETING_ID: '%s: BucketingId is valid: \"%s\"',\n  BUCKETING_ID_NOT_STRING: '%s: BucketingID attribute is not a string. Defaulted to userId',\n  EVALUATING_AUDIENCE: '%s: Starting to evaluate audience \"%s\" with conditions: %s.',\n  EVALUATING_AUDIENCES_COMBINED: '%s: Evaluating audiences for %s \"%s\": %s.',\n  AUDIENCE_EVALUATION_RESULT: '%s: Audience \"%s\" evaluated to %s.',\n  AUDIENCE_EVALUATION_RESULT_COMBINED: '%s: Audiences for %s %s collectively evaluated to %s.',\n  MISSING_ATTRIBUTE_VALUE:\n    '%s: Audience condition %s evaluated to UNKNOWN because no value was passed for user attribute \"%s\".',\n  UNEXPECTED_CONDITION_VALUE:\n    '%s: Audience condition %s evaluated to UNKNOWN because the condition value is not supported.',\n  UNEXPECTED_TYPE:\n    '%s: Audience condition %s evaluated to UNKNOWN because a value of type \"%s\" was passed for user attribute \"%s\".',\n  UNEXPECTED_TYPE_NULL:\n    '%s: Audience condition %s evaluated to UNKNOWN because a null value was passed for user attribute \"%s\".',\n  UNKNOWN_CONDITION_TYPE:\n    '%s: Audience condition %s has an unknown condition type. You may need to upgrade to a newer release of the Optimizely SDK.',\n  UNKNOWN_MATCH_TYPE:\n    '%s: Audience condition %s uses an unknown match type. You may need to upgrade to a newer release of the Optimizely SDK.',\n  UPDATED_OPTIMIZELY_CONFIG: '%s: Updated Optimizely config to revision %s (project id %s)',\n  OUT_OF_BOUNDS:\n    '%s: Audience condition %s evaluated to UNKNOWN because the number value for user attribute \"%s\" is not in the range [-2^53, +2^53].',\n  UNABLE_TO_ATTACH_UNLOAD: '%s: unable to bind optimizely.close() to page unload event: \"%s\"',\n};\n\nexport const enum RESERVED_EVENT_KEYWORDS {\n  REVENUE = 'revenue',\n  VALUE = 'value',\n}\n\nexport const CONTROL_ATTRIBUTES = {\n  BOT_FILTERING: '$opt_bot_filtering',\n  BUCKETING_ID: '$opt_bucketing_id',\n  STICKY_BUCKETING_KEY: '$opt_experiment_bucket_map',\n  USER_AGENT: '$opt_user_agent',\n  FORCED_DECISION_NULL_RULE_KEY: '$opt_null_rule_key',\n};\n\nexport const JAVASCRIPT_CLIENT_ENGINE = 'javascript-sdk';\nexport const NODE_CLIENT_ENGINE = 'node-sdk';\nexport const REACT_CLIENT_ENGINE = 'react-sdk';\nexport const REACT_NATIVE_CLIENT_ENGINE = 'react-native-sdk';\nexport const REACT_NATIVE_JS_CLIENT_ENGINE = 'react-native-js-sdk';\nexport const BROWSER_CLIENT_VERSION = '5.0.1';\nexport const NODE_CLIENT_VERSION = '5.0.1';\n\nexport const DECISION_NOTIFICATION_TYPES = {\n  AB_TEST: 'ab-test',\n  FEATURE: 'feature',\n  FEATURE_TEST: 'feature-test',\n  FEATURE_VARIABLE: 'feature-variable',\n  ALL_FEATURE_VARIABLES: 'all-feature-variables',\n  FLAG: 'flag',\n};\n\n/*\n * Represents the source of a decision for feature management. When a feature\n * is accessed through isFeatureEnabled or getVariableValue APIs, the decision\n * source is used to decide whether to dispatch an impression event to\n * Optimizely.\n */\nexport const DECISION_SOURCES = {\n  FEATURE_TEST: 'feature-test',\n  ROLLOUT: 'rollout',\n  EXPERIMENT: 'experiment',\n};\n\nexport const AUDIENCE_EVALUATION_TYPES = {\n  RULE: 'rule',\n  EXPERIMENT: 'experiment',\n};\n\n/*\n * Possible types of variables attached to features\n */\nexport const FEATURE_VARIABLE_TYPES = {\n  BOOLEAN: 'boolean',\n  DOUBLE: 'double',\n  INTEGER: 'integer',\n  STRING: 'string',\n  JSON: 'json',\n};\n\n/*\n * Supported datafile versions\n */\nexport const DATAFILE_VERSIONS = {\n  V2: '2',\n  V3: '3',\n  V4: '4',\n};\n\n/*\n * Pre-Release and Build symbols\n */\nexport const enum VERSION_TYPE {\n  PRE_RELEASE_VERSION_DELIMITER = '-',\n  BUILD_VERSION_DELIMITER = '+',\n}\n\nexport const DECISION_MESSAGES = {\n  SDK_NOT_READY: 'Optimizely SDK not configured properly yet.',\n  FLAG_KEY_INVALID: 'No flag was found for key \"%s\".',\n  VARIABLE_VALUE_INVALID: 'Variable value for key \"%s\" is invalid or wrong type.',\n};\n\n/*\n * Notification types for use with NotificationCenter\n * Format is EVENT: <list of parameters to callback>\n *\n * SDK consumers can use these to register callbacks with the notification center.\n *\n *  @deprecated since 3.1.0\n *  ACTIVATE: An impression event will be sent to Optimizely\n *  Callbacks will receive an object argument with the following properties:\n *    - experiment {Object}\n *    - userId {string}\n *    - attributes {Object|undefined}\n *    - variation {Object}\n *    - logEvent {Object}\n *\n *  DECISION: A decision is made in the system. i.e. user activation,\n *  feature access or feature-variable value retrieval\n *  Callbacks will receive an object argument with the following properties:\n *    - type {string}\n *    - userId {string}\n *    - attributes {Object|undefined}\n *    - decisionInfo {Object|undefined}\n *\n *  LOG_EVENT: A batch of events, which could contain impressions and/or conversions,\n *  will be sent to Optimizely\n *  Callbacks will receive an object argument with the following properties:\n *    - url {string}\n *    - httpVerb {string}\n *    - params {Object}\n *\n *  OPTIMIZELY_CONFIG_UPDATE: This Optimizely instance has been updated with a new\n *  config\n *\n *  TRACK: A conversion event will be sent to Optimizely\n *  Callbacks will receive the an object argument with the following properties:\n *    - eventKey {string}\n *    - userId {string}\n *    - attributes {Object|undefined}\n *    - eventTags {Object|undefined}\n *    - logEvent {Object}\n *\n */\nexport enum NOTIFICATION_TYPES {\n  ACTIVATE = 'ACTIVATE:experiment, user_id,attributes, variation, event',\n  DECISION = 'DECISION:type, userId, attributes, decisionInfo',\n  LOG_EVENT = 'LOG_EVENT:logEvent',\n  OPTIMIZELY_CONFIG_UPDATE = 'OPTIMIZELY_CONFIG_UPDATE',\n  TRACK = 'TRACK:event_key, user_id, attributes, event_tags, event',\n}\n\n/**\n * Default milliseconds before request timeout\n */\nexport const REQUEST_TIMEOUT_MS = 60 * 1000; // 1 minute\nexport const REQUEST_TIMEOUT_ODP_SEGMENTS_MS = 10 * 1000; // 10 secs\nexport const REQUEST_TIMEOUT_ODP_EVENTS_MS = 10 * 1000; // 10 secs\n\n/**\n * ODP User Key Options\n */\nexport enum ODP_USER_KEY {\n  VUID = 'vuid',\n  FS_USER_ID = 'fs_user_id',\n}\n\n/**\n * Alias for fs_user_id to catch for and automatically convert to fs_user_id\n */\nexport const FS_USER_ID_ALIAS = 'fs-user-id';\n\nexport const ODP_DEFAULT_EVENT_TYPE = 'fullstack';\n\n/**\n * ODP Event Action Options\n */\nexport enum ODP_EVENT_ACTION {\n  IDENTIFIED = 'identified',\n  INITIALIZED = 'client_initialized',\n}\n","/****************************************************************************\n * Copyright 2020-2023, Optimizely, Inc. and contributors                   *\n *                                                                          *\n * Licensed under the Apache License, Version 2.0 (the \"License\");          *\n * you may not use this file except in compliance with the License.         *\n * You may obtain a copy of the License at                                  *\n *                                                                          *\n *    http://www.apache.org/licenses/LICENSE-2.0                            *\n *                                                                          *\n * Unless required by applicable law or agreed to in writing, software      *\n * distributed under the License is distributed on an \"AS IS\" BASIS,        *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *\n * See the License for the specific language governing permissions and      *\n * limitations under the License.                                           *\n ***************************************************************************/\nimport Optimizely from '../optimizely';\nimport {\n  EventTags,\n  OptimizelyDecideOption,\n  OptimizelyDecision,\n  OptimizelyDecisionContext,\n  OptimizelyForcedDecision,\n  UserAttributeValue,\n  UserAttributes,\n} from '../shared_types';\nimport { CONTROL_ATTRIBUTES } from '../utils/enums';\nimport { OptimizelySegmentOption } from '../core/odp/optimizely_segment_option';\n\ninterface OptimizelyUserContextConfig {\n  optimizely: Optimizely;\n  userId: string;\n  attributes?: UserAttributes;\n  shouldIdentifyUser?: boolean;\n}\n\nexport interface IOptimizelyUserContext {\n  qualifiedSegments: string[] | null;\n  getUserId(): string;\n  getAttributes(): UserAttributes;\n  setAttribute(key: string, value: unknown): void;\n  decide(key: string, options?: OptimizelyDecideOption[]): OptimizelyDecision;\n  decideForKeys(keys: string[], options?: OptimizelyDecideOption[]): { [key: string]: OptimizelyDecision };\n  decideAll(options?: OptimizelyDecideOption[]): { [key: string]: OptimizelyDecision };\n  trackEvent(eventName: string, eventTags?: EventTags): void;\n  setForcedDecision(context: OptimizelyDecisionContext, decision: OptimizelyForcedDecision): boolean;\n  getForcedDecision(context: OptimizelyDecisionContext): OptimizelyForcedDecision | null;\n  removeForcedDecision(context: OptimizelyDecisionContext): boolean;\n  removeAllForcedDecisions(): boolean;\n  fetchQualifiedSegments(options?: OptimizelySegmentOption[]): Promise<boolean>;\n  isQualifiedFor(segment: string): boolean;\n}\n\nexport default class OptimizelyUserContext implements IOptimizelyUserContext {\n  private optimizely: Optimizely;\n  private userId: string;\n  private attributes: UserAttributes;\n  private forcedDecisionsMap: { [key: string]: { [key: string]: OptimizelyForcedDecision } };\n  private _qualifiedSegments: string[] | null = null;\n\n  constructor({ optimizely, userId, attributes, shouldIdentifyUser = true }: OptimizelyUserContextConfig) {\n    this.optimizely = optimizely;\n    this.userId = userId;\n    this.attributes = { ...attributes } ?? {};\n    this.forcedDecisionsMap = {};\n\n    if (shouldIdentifyUser) {\n      this.identifyUser();\n    }\n  }\n\n  /**\n   * On user context instantiation, fire event to attempt to identify user to ODP.\n   * Note: This fails if ODP is not enabled.\n   */\n  private identifyUser(): void {\n    this.optimizely.identifyUser(this.userId);\n  }\n\n  /**\n   * Sets an attribute for a given key.\n   * @param     {string}                     key         An attribute key\n   * @param     {any}                        value       An attribute value\n   */\n  setAttribute(key: string, value: UserAttributeValue): void {\n    this.attributes[key] = value;\n  }\n\n  getUserId(): string {\n    return this.userId;\n  }\n\n  getAttributes(): UserAttributes {\n    return { ...this.attributes };\n  }\n\n  getOptimizely(): Optimizely {\n    return this.optimizely;\n  }\n\n  public get qualifiedSegments(): string[] | null {\n    return this._qualifiedSegments;\n  }\n\n  public set qualifiedSegments(qualifiedSegments: string[] | null) {\n    this._qualifiedSegments = qualifiedSegments;\n  }\n\n  /**\n   * Returns a decision result for a given flag key and a user context, which contains all data required to deliver the flag.\n   * If the SDK finds an error, it will return a decision with null for variationKey. The decision will include an error message in reasons.\n   * @param     {string}                     key         A flag key for which a decision will be made.\n   * @param     {OptimizelyDecideOption}     options     An array of options for decision-making.\n   * @return    {OptimizelyDecision}                     A decision result.\n   */\n  decide(key: string, options: OptimizelyDecideOption[] = []): OptimizelyDecision {\n    return this.optimizely.decide(this.cloneUserContext(), key, options);\n  }\n\n  /**\n   * Returns an object of decision results for multiple flag keys and a user context.\n   * If the SDK finds an error for a key, the response will include a decision for the key showing reasons for the error.\n   * The SDK will always return key-mapped decisions. When it cannot process requests, it will return an empty map after logging the errors.\n   * @param     {string[]}                   keys        An array of flag keys for which decisions will be made.\n   * @param     {OptimizelyDecideOption[]}   options     An array of options for decision-making.\n   * @return    {[key: string]: OptimizelyDecision}      An object of decision results mapped by flag keys.\n   */\n  decideForKeys(keys: string[], options: OptimizelyDecideOption[] = []): { [key: string]: OptimizelyDecision } {\n    return this.optimizely.decideForKeys(this.cloneUserContext(), keys, options);\n  }\n\n  /**\n   * Returns an object of decision results for all active flag keys.\n   * @param     {OptimizelyDecideOption[]}   options     An array of options for decision-making.\n   * @return    {[key: string]: OptimizelyDecision}      An object of all decision results mapped by flag keys.\n   */\n  decideAll(options: OptimizelyDecideOption[] = []): { [key: string]: OptimizelyDecision } {\n    return this.optimizely.decideAll(this.cloneUserContext(), options);\n  }\n\n  /**\n   * Tracks an event.\n   * @param     {string}                     eventName The event name.\n   * @param     {EventTags}                  eventTags An optional map of event tag names to event tag values.\n   */\n  trackEvent(eventName: string, eventTags?: EventTags): void {\n    this.optimizely.track(eventName, this.userId, this.attributes, eventTags);\n  }\n\n  /**\n   * Sets the forced decision for specified optimizely decision context.\n   * @param     {OptimizelyDecisionContext}   context      OptimizelyDecisionContext containing flagKey and optional ruleKey.\n   * @param     {OptimizelyForcedDecision}    decision     OptimizelyForcedDecision containing forced variation key.\n   * @return    {boolean}                     true if the forced decision has been set successfully.\n   */\n  setForcedDecision(context: OptimizelyDecisionContext, decision: OptimizelyForcedDecision): boolean {\n    const flagKey = context.flagKey;\n\n    const ruleKey = context.ruleKey ?? CONTROL_ATTRIBUTES.FORCED_DECISION_NULL_RULE_KEY;\n    const variationKey = decision.variationKey;\n    const forcedDecision = { variationKey };\n\n    if (!this.forcedDecisionsMap[flagKey]) {\n      this.forcedDecisionsMap[flagKey] = {};\n    }\n    this.forcedDecisionsMap[flagKey][ruleKey] = forcedDecision;\n\n    return true;\n  }\n\n  /**\n   * Returns the forced decision for specified optimizely decision context.\n   * @param     {OptimizelyDecisionContext}  context  OptimizelyDecisionContext containing flagKey and optional ruleKey.\n   * @return    {OptimizelyForcedDecision|null}       OptimizelyForcedDecision for specified context if exists or null.\n   */\n  getForcedDecision(context: OptimizelyDecisionContext): OptimizelyForcedDecision | null {\n    return this.findForcedDecision(context);\n  }\n\n  /**\n   * Removes the forced decision for specified optimizely decision context.\n   * @param     {OptimizelyDecisionContext}  context  OptimizelyDecisionContext containing flagKey and optional ruleKey.\n   * @return    {boolean}                    true if the forced decision has been removed successfully\n   */\n  removeForcedDecision(context: OptimizelyDecisionContext): boolean {\n    const ruleKey = context.ruleKey ?? CONTROL_ATTRIBUTES.FORCED_DECISION_NULL_RULE_KEY;\n    const flagKey = context.flagKey;\n\n    let isForcedDecisionRemoved = false;\n\n    if (this.forcedDecisionsMap.hasOwnProperty(flagKey)) {\n      const forcedDecisionByRuleKey = this.forcedDecisionsMap[flagKey];\n      if (forcedDecisionByRuleKey.hasOwnProperty(ruleKey)) {\n        delete this.forcedDecisionsMap[flagKey][ruleKey];\n        isForcedDecisionRemoved = true;\n      }\n      if (Object.keys(this.forcedDecisionsMap[flagKey]).length === 0) {\n        delete this.forcedDecisionsMap[flagKey];\n      }\n    }\n\n    return isForcedDecisionRemoved;\n  }\n\n  /**\n   * Removes all forced decisions bound to this user context.\n   * @return    {boolean}                    true if the forced decision has been removed successfully\n   */\n  removeAllForcedDecisions(): boolean {\n    this.forcedDecisionsMap = {};\n    return true;\n  }\n\n  /**\n   * Finds a forced decision in forcedDecisionsMap for provided optimizely decision context.\n   * @param     {OptimizelyDecisionContext}     context  OptimizelyDecisionContext containing flagKey and optional ruleKey.\n   * @return    {OptimizelyForcedDecision|null}          OptimizelyForcedDecision for specified context if exists or null.\n   */\n  private findForcedDecision(context: OptimizelyDecisionContext): OptimizelyForcedDecision | null {\n    let variationKey;\n    const validRuleKey = context.ruleKey ?? CONTROL_ATTRIBUTES.FORCED_DECISION_NULL_RULE_KEY;\n    const flagKey = context.flagKey;\n\n    if (this.forcedDecisionsMap.hasOwnProperty(context.flagKey)) {\n      const forcedDecisionByRuleKey = this.forcedDecisionsMap[flagKey];\n      if (forcedDecisionByRuleKey.hasOwnProperty(validRuleKey)) {\n        variationKey = forcedDecisionByRuleKey[validRuleKey].variationKey;\n        return { variationKey };\n      }\n    }\n\n    return null;\n  }\n\n  private cloneUserContext(): OptimizelyUserContext {\n    const userContext = new OptimizelyUserContext({\n      shouldIdentifyUser: false,\n      optimizely: this.getOptimizely(),\n      userId: this.getUserId(),\n      attributes: this.getAttributes(),\n    });\n\n    if (Object.keys(this.forcedDecisionsMap).length > 0) {\n      userContext.forcedDecisionsMap = { ...this.forcedDecisionsMap };\n    }\n\n    userContext._qualifiedSegments = this._qualifiedSegments;\n\n    return userContext;\n  }\n\n  /**\n   * Fetches a target user's list of qualified segments filtered by any given segment options and stores in qualifiedSegments.\n   * @param {OptimizelySegmentOption[]} options   (Optional) List of segment options used to filter qualified segment results.\n   * @returns Boolean representing if segments were populated.\n   */\n  async fetchQualifiedSegments(options?: OptimizelySegmentOption[]): Promise<boolean> {\n    const segments = await this.optimizely.fetchQualifiedSegments(this.userId, options);\n\n    this.qualifiedSegments = segments;\n\n    return !!segments;\n  }\n\n  /**\n   * Returns a boolean representing if a user is qualified for a particular segment.\n   * @param   {string}  segment   Target segment to be evaluated for user qualification.\n   * @returns {boolean}           Boolean representing if a user qualified for the passed in segment.\n   */\n  isQualifiedFor(segment: string): boolean {\n    if (!this._qualifiedSegments) {\n      return false;\n    }\n\n    return this._qualifiedSegments.indexOf(segment) > -1;\n  }\n}\n","/****************************************************************************\n * Copyright 2018, 2021, Optimizely, Inc. and contributors                  *\n *                                                                          *\n * Licensed under the Apache License, Version 2.0 (the \"License\");          *\n * you may not use this file except in compliance with the License.         *\n * You may obtain a copy of the License at                                  *\n *                                                                          *\n *    http://www.apache.org/licenses/LICENSE-2.0                            *\n *                                                                          *\n * Unless required by applicable law or agreed to in writing, software      *\n * distributed under the License is distributed on an \"AS IS\" BASIS,        *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *\n * See the License for the specific language governing permissions and      *\n * limitations under the License.                                           *\n ***************************************************************************/\n\nconst AND_CONDITION = 'and';\nconst OR_CONDITION = 'or';\nconst NOT_CONDITION = 'not';\n\nexport const DEFAULT_OPERATOR_TYPES = [AND_CONDITION, OR_CONDITION, NOT_CONDITION];\nexport type ConditionTree<Leaf> = Leaf | unknown[];\n\ntype LeafEvaluator<Leaf> = (leaf: Leaf) => boolean | null;\n\n/**\n * Top level method to evaluate conditions\n * @param  {ConditionTree<Leaf>}    conditions      Nested array of and/or conditions, or a single leaf\n *                                                  condition value of any type\n *                                                  Example: ['and', '0', ['or', '1', '2']]\n * @param  {LeafEvaluator<Leaf>}    leafEvaluator   Function which will be called to evaluate leaf condition\n *                                                  values\n * @return {?boolean}                               Result of evaluating the conditions using the operator\n *                                                  rules and the leaf evaluator. A return value of null\n *                                                  indicates that the conditions are invalid or unable to be\n *                                                  evaluated.\n */\nexport function evaluate<Leaf>(conditions: ConditionTree<Leaf>, leafEvaluator: LeafEvaluator<Leaf>): boolean | null {\n  if (Array.isArray(conditions)) {\n    let firstOperator = conditions[0];\n    let restOfConditions = conditions.slice(1);\n\n    if (typeof firstOperator === 'string' && DEFAULT_OPERATOR_TYPES.indexOf(firstOperator) === -1) {\n      // Operator to apply is not explicit - assume 'or'\n      firstOperator = OR_CONDITION;\n      restOfConditions = conditions;\n    }\n\n    switch (firstOperator) {\n      case AND_CONDITION:\n        return andEvaluator(restOfConditions, leafEvaluator);\n      case NOT_CONDITION:\n        return notEvaluator(restOfConditions, leafEvaluator);\n      default:\n        // firstOperator is OR_CONDITION\n        return orEvaluator(restOfConditions, leafEvaluator);\n    }\n  }\n\n  const leafCondition = conditions;\n  return leafEvaluator(leafCondition);\n}\n\n/**\n * Evaluates an array of conditions as if the evaluator had been applied\n * to each entry and the results AND-ed together.\n * @param  {unknown[]}             conditions      Array of conditions ex: [operand_1, operand_2]\n * @param  {LeafEvaluator<Leaf>}   leafEvaluator   Function which will be called to evaluate leaf condition values\n * @return {?boolean}                              Result of evaluating the conditions. A return value of null\n *                                                 indicates that the conditions are invalid or unable to be\n *                                                 evaluated.\n */\nfunction andEvaluator<Leaf>(conditions: ConditionTree<Leaf>, leafEvaluator: LeafEvaluator<Leaf>): boolean | null {\n  let sawNullResult = false;\n  if (Array.isArray(conditions)) {\n    for (let i = 0; i < conditions.length; i++) {\n      const conditionResult = evaluate(conditions[i] as ConditionTree<Leaf>, leafEvaluator);\n      if (conditionResult === false) {\n        return false;\n      }\n      if (conditionResult === null) {\n        sawNullResult = true;\n      }\n    }\n    return sawNullResult ? null : true;\n  }\n  return null;\n}\n\n/**\n * Evaluates an array of conditions as if the evaluator had been applied\n * to a single entry and NOT was applied to the result.\n * @param  {unknown[]}             conditions      Array of conditions ex: [operand_1]\n * @param  {LeafEvaluator<Leaf>}   leafEvaluator   Function which will be called to evaluate leaf condition values\n * @return {?boolean}                              Result of evaluating the conditions. A return value of null\n *                                                 indicates that the conditions are invalid or unable to be\n *                                                 evaluated.\n */\nfunction notEvaluator<Leaf>(conditions: ConditionTree<Leaf>, leafEvaluator: LeafEvaluator<Leaf>): boolean | null {\n  if (Array.isArray(conditions) && conditions.length > 0) {\n    const result = evaluate(conditions[0] as ConditionTree<Leaf>, leafEvaluator);\n    return result === null ? null : !result;\n  }\n  return null;\n}\n\n/**\n * Evaluates an array of conditions as if the evaluator had been applied\n * to each entry and the results OR-ed together.\n * @param  {unknown[]}             conditions      Array of conditions ex: [operand_1, operand_2]\n * @param  {LeafEvaluator<Leaf>}   leafEvaluator   Function which will be called to evaluate leaf condition values\n * @return {?boolean}                              Result of evaluating the conditions. A return value of null\n *                                                 indicates that the conditions are invalid or unable to be\n *                                                 evaluated.\n */\nfunction orEvaluator<Leaf>(conditions: ConditionTree<Leaf>, leafEvaluator: LeafEvaluator<Leaf>): boolean | null {\n  let sawNullResult = false;\n  if (Array.isArray(conditions)) {\n    for (let i = 0; i < conditions.length; i++) {\n      const conditionResult = evaluate(conditions[i] as ConditionTree<Leaf>, leafEvaluator);\n      if (conditionResult === true) {\n        return true;\n      }\n      if (conditionResult === null) {\n        sawNullResult = true;\n      }\n    }\n    return sawNullResult ? null : false;\n  }\n  return null;\n}\n","/**\n * Copyright 2020-2023, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { LoggerFacade, getLogger } from '../../modules/logging';\nimport { ProjectConfig } from '../project_config';\nimport { DEFAULT_OPERATOR_TYPES } from '../condition_tree_evaluator';\nimport {\n  Audience,\n  Experiment,\n  FeatureVariable,\n  OptimizelyAttribute,\n  OptimizelyAudience,\n  OptimizelyEvent,\n  OptimizelyExperiment,\n  OptimizelyExperimentsMap,\n  OptimizelyFeaturesMap,\n  OptimizelyVariable,\n  OptimizelyVariablesMap,\n  OptimizelyVariation,\n  Rollout,\n  Variation,\n  VariationVariable,\n} from '../../shared_types';\n\ninterface FeatureVariablesMap {\n  [key: string]: FeatureVariable[];\n}\n\n/**\n * The OptimizelyConfig class\n * @param {ProjectConfig} configObj\n * @param {string}        datafile\n */\nexport class OptimizelyConfig {\n  public environmentKey: string;\n  public sdkKey: string;\n  public revision: string;\n\n  /**\n   * This experimentsMap is for experiments of legacy projects only.\n   * For flag projects, experiment keys are not guaranteed to be unique\n   * across multiple flags, so this map may not include all experiments\n   * when keys conflict.\n   */\n  public experimentsMap: OptimizelyExperimentsMap;\n\n  public featuresMap: OptimizelyFeaturesMap;\n  public attributes: OptimizelyAttribute[];\n  public audiences: OptimizelyAudience[];\n  public events: OptimizelyEvent[];\n  private datafile: string;\n\n\n  constructor(configObj: ProjectConfig, datafile: string, logger?: LoggerFacade) {\n    this.sdkKey = configObj.sdkKey ?? '';\n    this.environmentKey = configObj.environmentKey ?? '';\n    this.attributes = configObj.attributes;\n    this.audiences = OptimizelyConfig.getAudiences(configObj);\n    this.events = configObj.events;\n    this.revision = configObj.revision;\n\n    const featureIdVariablesMap = (configObj.featureFlags || []).reduce((resultMap: FeatureVariablesMap, feature) => {\n      resultMap[feature.id] = feature.variables;\n      return resultMap;\n    }, {});\n\n    const variableIdMap = OptimizelyConfig.getVariableIdMap(configObj);\n\n    const { experimentsMapById, experimentsMapByKey } = OptimizelyConfig.getExperimentsMap(\n      configObj, featureIdVariablesMap, variableIdMap, logger,\n    );\n\n    this.experimentsMap = experimentsMapByKey;\n    \n    this.featuresMap = OptimizelyConfig.getFeaturesMap(\n      configObj, featureIdVariablesMap, experimentsMapById, variableIdMap\n    );\n    this.datafile = datafile;\n  }\n\n  /**\n   * Get the datafile\n   * @returns {string} JSON string representation of the datafile that was used to create the current config object\n   */\n  getDatafile(): string {\n    return this.datafile;\n  }\n\n  /**\n   * Get Unique audiences list with typedAudiences as priority\n   * @param       {ProjectConfig}              configObj\n   * @returns     {OptimizelyAudience[]}       Array of unique audiences\n   */\n  static getAudiences(configObj: ProjectConfig): OptimizelyAudience[] {\n    const audiences: OptimizelyAudience[] = [];\n    const typedAudienceIds: string[] = [];\n\n    (configObj.typedAudiences || []).forEach((typedAudience) => {\n      audiences.push({\n        id: typedAudience.id,\n        conditions: JSON.stringify(typedAudience.conditions),\n        name: typedAudience.name,\n      });\n      typedAudienceIds.push(typedAudience.id);\n    });\n\n    (configObj.audiences || []).forEach((audience) => {\n      if (typedAudienceIds.indexOf(audience.id) === -1 && audience.id != '$opt_dummy_audience') {\n        audiences.push({\n          id: audience.id,\n          conditions: JSON.stringify(audience.conditions),\n          name: audience.name,\n        });\n      }\n    });\n\n    return audiences;\n  }\n\n  /**\n   * Converts list of audience conditions to serialized audiences used in experiment\n   * for examples:\n   * 1. Input: [\"or\", \"1\", \"2\"]\n   * Output: \"\\\"us\\\" OR \\\"female\\\"\"\n   * 2. Input: [\"not\", \"1\"]\n   * Output: \"NOT \\\"us\\\"\"\n   * 3. Input: [\"or\", \"1\"]\n   * Output: \"\\\"us\\\"\"\n   * 4. Input: [\"and\", [\"or\", \"1\", [\"and\", \"2\", \"3\"]], [\"and\", \"11\", [\"or\", \"12\", \"13\"]]]\n   * Output: \"(\\\"us\\\" OR (\\\"female\\\" AND \\\"adult\\\")) AND (\\\"fr\\\" AND (\\\"male\\\" OR \\\"kid\\\"))\"\n   * @param       {Array<string | string[]>}                 conditions\n   * @param       {[id: string]: Audience}                   audiencesById\n   * @returns     {string}                                   Serialized audiences condition string\n   */\n  static getSerializedAudiences(\n    conditions: Array<string | string[]>,\n    audiencesById: { [id: string]: Audience }\n  ): string {\n    let serializedAudience = '';\n\n    if (conditions) {\n      let cond = '';\n      conditions.forEach((item) => {\n        let subAudience = '';\n        // Checks if item is list of conditions means it is sub audience\n        if (item instanceof Array) {\n          subAudience = OptimizelyConfig.getSerializedAudiences(item, audiencesById);\n          subAudience = `(${subAudience})`;\n        } else if (DEFAULT_OPERATOR_TYPES.indexOf(item) > -1) {\n          cond = item.toUpperCase();\n        } else {\n          // Checks if item is audience id\n          const audienceName = audiencesById[item] ? audiencesById[item].name : item;\n          // if audience condition is \"NOT\" then add \"NOT\" at start. Otherwise check if there is already audience id in serializedAudience then append condition between serializedAudience and item\n          if (serializedAudience || cond === 'NOT') {\n            cond = cond === '' ? 'OR' : cond;\n            if (serializedAudience === '') {\n              serializedAudience = `${cond} \"${audiencesById[item].name}\"`;\n            } else {\n              serializedAudience = serializedAudience.concat(` ${cond} \"${audienceName}\"`);\n            }\n          } else {\n            serializedAudience = `\"${audienceName}\"`;\n          }\n        }\n        // Checks if sub audience is empty or not\n        if (subAudience !== '') {\n          if (serializedAudience !== '' || cond === 'NOT') {\n            cond = cond === '' ? 'OR' : cond;\n            if (serializedAudience === '') {\n              serializedAudience = `${cond} ${subAudience}`;\n            } else {\n              serializedAudience = serializedAudience.concat(` ${cond} ${subAudience}`);\n            }\n          } else {\n            serializedAudience = serializedAudience.concat(subAudience);\n          }\n        }\n      });\n    }\n    return serializedAudience;\n  }\n\n  /**\n   * Get serialized audience condition string for experiment\n   * @param       {Experiment}                 experiment\n   * @param       {ProjectConfig}              configObj\n   * @returns     {string}                     Serialized audiences condition string\n   */\n  static getExperimentAudiences(experiment: Experiment, configObj: ProjectConfig): string {\n    if (!experiment.audienceConditions) {\n      return '';\n    }\n    return OptimizelyConfig.getSerializedAudiences(experiment.audienceConditions, configObj.audiencesById);\n  }\n\n  /**\n   * Make map of featureVariable which are associated with given feature experiment\n   * @param       {FeatureVariablesMap}                 featureIdVariableMap\n   * @param       {[id: string]: FeatureVariable}       variableIdMap\n   * @param       {string}                              featureId\n   * @param       {VariationVariable[] | undefined}     featureVariableUsages\n   * @param       {boolean | undefined}                 isFeatureEnabled\n   * @returns     {OptimizelyVariablesMap}              FeatureVariables mapped by key\n   */\n  static mergeFeatureVariables(\n    featureIdVariableMap: FeatureVariablesMap,\n    variableIdMap: { [id: string]: FeatureVariable },\n    featureId: string,\n    featureVariableUsages: VariationVariable[] | undefined,\n    isFeatureEnabled: boolean | undefined\n  ): OptimizelyVariablesMap {\n    const variablesMap = (featureIdVariableMap[featureId] || []).reduce(\n      (optlyVariablesMap: OptimizelyVariablesMap, featureVariable) => {\n        optlyVariablesMap[featureVariable.key] = {\n          id: featureVariable.id,\n          key: featureVariable.key,\n          type: featureVariable.type,\n          value: featureVariable.defaultValue,\n        };\n        return optlyVariablesMap;\n      },\n      {}\n    );\n\n    (featureVariableUsages || []).forEach((featureVariableUsage) => {\n      const defaultVariable = variableIdMap[featureVariableUsage.id];\n      const optimizelyVariable: OptimizelyVariable = {\n        id: featureVariableUsage.id,\n        key: defaultVariable.key,\n        type: defaultVariable.type,\n        value: isFeatureEnabled ? featureVariableUsage.value : defaultVariable.defaultValue,\n      };\n      variablesMap[defaultVariable.key] = optimizelyVariable;\n    });\n    return variablesMap;\n  }\n\n  /**\n   * Gets Map of all experiment variations and variables including rollouts\n   * @param       {Variation[]}                           variations\n   * @param       {FeatureVariablesMap}                   featureIdVariableMap\n   * @param       {{[id: string]: FeatureVariable}}       variableIdMap\n   * @param       {string}                                featureId\n   * @returns     {[key: string]: Variation}              Variations mapped by key\n   */\n  static getVariationsMap(\n    variations: Variation[],\n    featureIdVariableMap: FeatureVariablesMap,\n    variableIdMap: { [id: string]: FeatureVariable },\n    featureId: string\n  ): { [key: string]: Variation } {\n    let variationsMap: { [key: string]: OptimizelyVariation } = {};\n    variationsMap = variations.reduce((optlyVariationsMap: { [key: string]: OptimizelyVariation }, variation) => {\n      const variablesMap = OptimizelyConfig.mergeFeatureVariables(\n        featureIdVariableMap,\n        variableIdMap,\n        featureId,\n        variation.variables,\n        variation.featureEnabled\n      );\n      optlyVariationsMap[variation.key] = {\n        id: variation.id,\n        key: variation.key,\n        featureEnabled: variation.featureEnabled,\n        variablesMap: variablesMap,\n      };\n      return optlyVariationsMap;\n    }, {});\n\n    return variationsMap;\n  }\n\n  /**\n   * Gets Map of FeatureVariable with respect to featureVariableId\n   * @param       {ProjectConfig}                        configObj\n   * @returns     {[id: string]: FeatureVariable}        FeatureVariables mapped by id\n   */\n  static getVariableIdMap(configObj: ProjectConfig): { [id: string]: FeatureVariable } {\n    let variablesIdMap: { [id: string]: FeatureVariable } = {};\n    variablesIdMap = (configObj.featureFlags || []).reduce((resultMap: { [id: string]: FeatureVariable }, feature) => {\n      feature.variables.forEach((variable) => {\n        resultMap[variable.id] = variable;\n      });\n      return resultMap;\n    }, {});\n\n    return variablesIdMap;\n  }\n\n  /**\n   * Gets list of rollout experiments\n   * @param       {ProjectConfig}                     configObj\n   * @param       {FeatureVariablesMap}               featureVariableIdMap\n   * @param       {string}                            featureId\n   * @param       {Experiment[]}                      experiments\n   * @param       {{[id: string]: FeatureVariable}}   variableIdMap\n   * @returns     {OptimizelyExperiment[]}            List of Optimizely rollout experiments\n   */\n  static getDeliveryRules(\n    configObj: ProjectConfig,\n    featureVariableIdMap: FeatureVariablesMap,\n    featureId: string,\n    experiments: Experiment[],\n    variableIdMap: {[id: string]: FeatureVariable}\n  ): OptimizelyExperiment[] {\n    return experiments.map((experiment) => {\n      return {\n        id: experiment.id,\n        key: experiment.key,\n        audiences: OptimizelyConfig.getExperimentAudiences(experiment, configObj),\n        variationsMap: OptimizelyConfig.getVariationsMap(\n          experiment.variations,\n          featureVariableIdMap,\n          variableIdMap,\n          featureId\n        ),\n      };\n    });\n  }\n\n  /**\n   * Get Experiment Ids which are part of rollout\n   * @param       {Rollout[]}     rollouts\n   * @returns     {string[]}      Array of experiment Ids\n   */\n  static getRolloutExperimentIds(rollouts: Rollout[]): string[] {\n    const experimentIds: string[] = [];\n    (rollouts || []).forEach((rollout) => {\n      rollout.experiments.forEach((e) => {\n        experimentIds.push(e.id);\n      });\n    });\n    return experimentIds;\n  }\n\n  /**\n   * Get experiments mapped by their id's which are not part of a rollout\n   * @param       {ProjectConfig}                           configObj\n   * @param       {FeatureVariablesMap}                     featureIdVariableMap\n   * @param       {{[id: string]: FeatureVariable}}         variableIdMap\n   * @returns     { experimentsMapById: { [id: string]: OptimizelyExperiment }, experimentsMapByKey: OptimizelyExperimentsMap }      Experiments mapped by id and key\n   */\n  static getExperimentsMap(\n    configObj: ProjectConfig,\n    featureIdVariableMap: FeatureVariablesMap,\n    variableIdMap: {[id: string]: FeatureVariable},\n    logger?: LoggerFacade,\n  ) : { experimentsMapById: { [id: string]: OptimizelyExperiment }, experimentsMapByKey: OptimizelyExperimentsMap } {\n    const rolloutExperimentIds = this.getRolloutExperimentIds(configObj.rollouts);\n\n    const experimentsMapById: { [id : string]: OptimizelyExperiment } = {};\n    const experimentsMapByKey: OptimizelyExperimentsMap = {};\n\n    const experiments = configObj.experiments || [];\n    experiments.forEach((experiment) => {\n      if (rolloutExperimentIds.indexOf(experiment.id) !== -1) {\n        return;\n      }\n\n      const featureIds = configObj.experimentFeatureMap[experiment.id];\n      let featureId = '';\n      if (featureIds && featureIds.length > 0) {\n        featureId = featureIds[0];\n      }\n      const variationsMap = OptimizelyConfig.getVariationsMap(\n        experiment.variations,\n        featureIdVariableMap,\n        variableIdMap,\n        featureId.toString()\n      );\n\n      const optimizelyExperiment: OptimizelyExperiment = {\n        id: experiment.id,\n        key: experiment.key,\n        audiences: OptimizelyConfig.getExperimentAudiences(experiment, configObj),\n        variationsMap: variationsMap,\n      };\n\n      experimentsMapById[experiment.id] = optimizelyExperiment;\n      if (experimentsMapByKey[experiment.key] && logger) {\n        logger.warn(`Duplicate experiment keys found in datafile: ${experiment.key}`);\n      }\n      experimentsMapByKey[experiment.key] = optimizelyExperiment;\n    });\n\n    return { experimentsMapById, experimentsMapByKey };\n  }\n\n  /**\n   * Get experiments mapped by their keys\n   * @param       {OptimizelyExperimentsMap}     experimentsMapById\n   * @returns     {OptimizelyExperimentsMap}     Experiments mapped by key\n   */\n  static getExperimentsKeyMap(experimentsMapById: OptimizelyExperimentsMap): OptimizelyExperimentsMap {\n    const experimentKeysMap: OptimizelyExperimentsMap = {};\n\n    for (const id in experimentsMapById) {\n      const experiment = experimentsMapById[id];\n      experimentKeysMap[experiment.key] = experiment;\n    }\n    return experimentKeysMap;\n  }\n\n  /**\n   * Gets Map of all FeatureFlags and associated experiment map inside it\n   * @param       {ProjectConfig}                     configObj\n   * @param       {FeatureVariablesMap}               featureVariableIdMap\n   * @param       {OptimizelyExperimentsMap}          experimentsMapById\n   * @param       {{[id: string]: FeatureVariable}}   variableIdMap\n   * @returns     {OptimizelyFeaturesMap}             OptimizelyFeature mapped by key\n   */\n  static getFeaturesMap(\n    configObj: ProjectConfig,\n    featureVariableIdMap: FeatureVariablesMap,\n    experimentsMapById: OptimizelyExperimentsMap,\n    variableIdMap: {[id: string]: FeatureVariable}\n  ): OptimizelyFeaturesMap {\n    const featuresMap: OptimizelyFeaturesMap = {};\n    configObj.featureFlags.forEach((featureFlag) => {\n      const featureExperimentMap: OptimizelyExperimentsMap = {};\n      const experimentRules: OptimizelyExperiment[] = [];\n      featureFlag.experimentIds.forEach(experimentId => {\n        const experiment = experimentsMapById[experimentId];\n        if (experiment) {\n          featureExperimentMap[experiment.key] = experiment;\n        }\n        experimentRules.push(experimentsMapById[experimentId]);\n      });\n      const featureVariableMap = (featureFlag.variables || []).reduce((variables: OptimizelyVariablesMap, variable) => {\n        variables[variable.key] = {\n          id: variable.id,\n          key: variable.key,\n          type: variable.type,\n          value: variable.defaultValue,\n        };\n        return variables;\n      }, {});\n      let deliveryRules: OptimizelyExperiment[] = [];\n      const rollout = configObj.rolloutIdMap[featureFlag.rolloutId];\n      if (rollout) {\n        deliveryRules = OptimizelyConfig.getDeliveryRules(\n          configObj,\n          featureVariableIdMap,\n          featureFlag.id,\n          rollout.experiments,\n          variableIdMap,\n        );\n      }\n      featuresMap[featureFlag.key] = {\n        id: featureFlag.id,\n        key: featureFlag.key,\n        experimentRules: experimentRules,\n        deliveryRules: deliveryRules,\n        experimentsMap: featureExperimentMap,\n        variablesMap: featureVariableMap,\n      };\n    });\n    return featuresMap;\n  }\n}\n\n/**\n * Create an instance of OptimizelyConfig\n * @param   {ProjectConfig}             configObj\n * @param   {string}                    datafile\n * @returns {OptimizelyConfig}          An instance of OptimizelyConfig\n */\nexport function createOptimizelyConfig(configObj: ProjectConfig, datafile: string, logger?: LoggerFacade): OptimizelyConfig {\n  return new OptimizelyConfig(configObj, datafile, logger);\n}\n","/**\n * Copyright 2016, 2018-2020, 2022, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { sprintf } from '../../utils/fns';\nimport { ObjectWithUnknownProperties } from '../../shared_types';\n\nimport { \n  ERROR_MESSAGES, \n  DATAFILE_VERSIONS,\n} from '../enums';\n\nconst MODULE_NAME = 'CONFIG_VALIDATOR';\nconst SUPPORTED_VERSIONS = [DATAFILE_VERSIONS.V2, DATAFILE_VERSIONS.V3, DATAFILE_VERSIONS.V4];\n\n/**\n * Validates the given config options\n * @param  {unknown} config\n * @param  {object}  config.errorHandler\n * @param  {object}  config.eventDispatcher\n * @param  {object}  config.logger\n * @return {boolean} true if the config options are valid\n * @throws If any of the config options are not valid\n */\nexport const validate = function(config: unknown): boolean {\n  if (typeof config === 'object' && config !== null) {\n    const configObj = config as ObjectWithUnknownProperties;\n    const errorHandler = configObj['errorHandler'];\n    const eventDispatcher = configObj['eventDispatcher'];\n    const logger = configObj['logger'];\n    if (errorHandler && typeof (errorHandler as ObjectWithUnknownProperties)['handleError'] !== 'function') {\n      throw new Error(sprintf(ERROR_MESSAGES.INVALID_ERROR_HANDLER, MODULE_NAME));\n    }\n    if (eventDispatcher && typeof (eventDispatcher as ObjectWithUnknownProperties)['dispatchEvent'] !== 'function') {\n      throw new Error(sprintf(ERROR_MESSAGES.INVALID_EVENT_DISPATCHER, MODULE_NAME));\n    }\n    if (logger && typeof (logger as ObjectWithUnknownProperties)['log'] !== 'function') {\n      throw new Error(sprintf(ERROR_MESSAGES.INVALID_LOGGER, MODULE_NAME));\n    }\n    return true;\n  }\n  throw new Error(sprintf(ERROR_MESSAGES.INVALID_CONFIG, MODULE_NAME));\n}\n\n/**\n * Validates the datafile\n * @param {Object|string}  datafile\n * @return {Object} The datafile object if the datafile is valid\n * @throws If the datafile is not valid for any of the following reasons:\n - The datafile string is undefined\n - The datafile string cannot be parsed as a JSON object\n - The datafile version is not supported\n */\n// eslint-disable-next-line\nexport const validateDatafile = function(datafile: unknown): any {\n  if (!datafile) {\n    throw new Error(sprintf(ERROR_MESSAGES.NO_DATAFILE_SPECIFIED, MODULE_NAME));\n  }\n  if (typeof datafile === 'string') {\n    // Attempt to parse the datafile string\n    try {\n      datafile = JSON.parse(datafile);\n    } catch (ex) {\n      throw new Error(sprintf(ERROR_MESSAGES.INVALID_DATAFILE_MALFORMED, MODULE_NAME));\n    }\n  }\n  if (typeof datafile === 'object' && !Array.isArray(datafile) && datafile !== null) {\n    if (SUPPORTED_VERSIONS.indexOf(datafile['version' as keyof unknown]) === -1) {\n      throw new Error(sprintf(ERROR_MESSAGES.INVALID_DATAFILE_VERSION, MODULE_NAME, datafile['version' as keyof unknown]));\n    }\n  }\n\n  return datafile;\n};\n\n/**\n * Provides utility methods for validating that the configuration options are valid\n */\nexport default {\n  validate: validate,\n  validateDatafile: validateDatafile,\n}\n","/**\n * Copyright 2016-2023, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { find, objectEntries, objectValues, sprintf, assign, keyBy } from '../../utils/fns';\n\nimport { ERROR_MESSAGES, LOG_LEVEL, LOG_MESSAGES, FEATURE_VARIABLE_TYPES } from '../../utils/enums';\nimport configValidator from '../../utils/config_validator';\n\nimport { LogHandler } from '../../modules/logging';\nimport {\n  Audience,\n  Experiment,\n  FeatureFlag,\n  FeatureVariable,\n  Group,\n  OptimizelyVariation,\n  Rollout,\n  TrafficAllocation,\n  Variation,\n  VariableType,\n  VariationVariable,\n  Integration,\n  FeatureVariableValue,\n} from '../../shared_types';\n\ninterface TryCreatingProjectConfigConfig {\n  // TODO[OASIS-6649]: Don't use object type\n  // eslint-disable-next-line  @typescript-eslint/ban-types\n  datafile: string | object;\n  jsonSchemaValidator?: {\n    validate(jsonObject: unknown): boolean;\n  };\n  logger: LogHandler;\n}\n\ninterface Event {\n  key: string;\n  id: string;\n  experimentsIds: string[];\n}\n\ninterface VariableUsageMap {\n  [id: string]: VariationVariable;\n}\n\nexport interface ProjectConfig {\n  revision: string;\n  projectId: string;\n  sdkKey: string;\n  environmentKey: string;\n  sendFlagDecisions?: boolean;\n  experimentKeyMap: { [key: string]: Experiment };\n  featureKeyMap: {\n    [key: string]: FeatureFlag;\n  };\n  rollouts: Rollout[];\n  featureFlags: FeatureFlag[];\n  experimentIdMap: { [id: string]: Experiment };\n  experimentFeatureMap: { [key: string]: string[] };\n  experiments: Experiment[];\n  eventKeyMap: { [key: string]: Event };\n  audiences: Audience[];\n  attributeKeyMap: { [key: string]: { id: string } };\n  variationIdMap: { [id: string]: OptimizelyVariation };\n  variationVariableUsageMap: { [id: string]: VariableUsageMap };\n  audiencesById: { [id: string]: Audience };\n  __datafileStr: string;\n  groupIdMap: { [id: string]: Group };\n  groups: Group[];\n  events: Event[];\n  attributes: Array<{ id: string; key: string }>;\n  typedAudiences: Audience[];\n  rolloutIdMap: { [id: string]: Rollout };\n  anonymizeIP?: boolean | null;\n  botFiltering?: boolean;\n  accountId: string;\n  flagRulesMap: { [key: string]: Experiment[] };\n  flagVariationsMap: { [key: string]: Variation[] };\n  integrations: Integration[];\n  integrationKeyMap?: { [key: string]: Integration };\n  publicKeyForOdp?: string;\n  hostForOdp?: string;\n  pixelUrlForOdp?: string;\n  allSegments: string[];\n}\n\nconst EXPERIMENT_RUNNING_STATUS = 'Running';\nconst RESERVED_ATTRIBUTE_PREFIX = '$opt_';\nconst MODULE_NAME = 'PROJECT_CONFIG';\n\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\nfunction createMutationSafeDatafileCopy(datafile: any): ProjectConfig {\n  const datafileCopy = assign({}, datafile);\n  datafileCopy.audiences = (datafile.audiences || []).map((audience: Audience) => {\n    return assign({}, audience);\n  });\n  datafileCopy.experiments = (datafile.experiments || []).map((experiment: Experiment) => {\n    return assign({}, experiment);\n  });\n  datafileCopy.featureFlags = (datafile.featureFlags || []).map((featureFlag: FeatureFlag) => {\n    return assign({}, featureFlag);\n  });\n  datafileCopy.groups = (datafile.groups || []).map((group: Group) => {\n    const groupCopy = assign({}, group);\n    groupCopy.experiments = (group.experiments || []).map(experiment => {\n      return assign({}, experiment);\n    });\n    return groupCopy;\n  });\n  datafileCopy.rollouts = (datafile.rollouts || []).map((rollout: Rollout) => {\n    const rolloutCopy = assign({}, rollout);\n    rolloutCopy.experiments = (rollout.experiments || []).map(experiment => {\n      return assign({}, experiment);\n    });\n    return rolloutCopy;\n  });\n\n  datafileCopy.environmentKey = datafile.environmentKey ?? '';\n  datafileCopy.sdkKey = datafile.sdkKey ?? '';\n\n  return datafileCopy;\n}\n\n/**\n * Creates projectConfig object to be used for quick project property lookup\n * @param  {Object}        datafileObj   JSON datafile representing the project\n * @param  {string|null}   datafileStr   JSON string representation of the datafile\n * @return {ProjectConfig} Object representing project configuration\n */\nexport const createProjectConfig = function(datafileObj?: JSON, datafileStr: string | null = null): ProjectConfig {\n  const projectConfig = createMutationSafeDatafileCopy(datafileObj);\n\n  projectConfig.__datafileStr = datafileStr === null ? JSON.stringify(datafileObj) : datafileStr;\n\n  /*\n   * Conditions of audiences in projectConfig.typedAudiences are not\n   * expected to be string-encoded as they are here in projectConfig.audiences.\n   */\n  (projectConfig.audiences || []).forEach(audience => {\n    audience.conditions = JSON.parse(audience.conditions as string);\n  });\n  projectConfig.audiencesById = keyBy(projectConfig.audiences, 'id');\n  assign(projectConfig.audiencesById, keyBy(projectConfig.typedAudiences, 'id'));\n\n  projectConfig.allSegments = [];\n  const allSegmentsSet = new Set<string>();\n\n  Object.keys(projectConfig.audiencesById)\n    .map(audience => getAudienceSegments(projectConfig.audiencesById[audience]))\n    .forEach(audienceSegments => {\n      audienceSegments.forEach(segment => {\n        allSegmentsSet.add(segment);\n      });\n    });\n\n  projectConfig.allSegments = Array.from(allSegmentsSet);\n\n  projectConfig.attributeKeyMap = keyBy(projectConfig.attributes, 'key');\n  projectConfig.eventKeyMap = keyBy(projectConfig.events, 'key');\n  projectConfig.groupIdMap = keyBy(projectConfig.groups, 'id');\n\n  let experiments;\n  Object.keys(projectConfig.groupIdMap || {}).forEach(Id => {\n    experiments = projectConfig.groupIdMap[Id].experiments;\n    (experiments || []).forEach(experiment => {\n      projectConfig.experiments.push(assign(experiment, { groupId: Id }));\n    });\n  });\n\n  projectConfig.rolloutIdMap = keyBy(projectConfig.rollouts || [], 'id');\n  objectValues(projectConfig.rolloutIdMap || {}).forEach(rollout => {\n    (rollout.experiments || []).forEach(experiment => {\n      projectConfig.experiments.push(experiment);\n      // Creates { <variationKey>: <variation> } map inside of the experiment\n      experiment.variationKeyMap = keyBy(experiment.variations, 'key');\n    });\n  });\n\n  if (projectConfig.integrations) {\n    projectConfig.integrationKeyMap = keyBy(projectConfig.integrations, 'key');\n\n    projectConfig.integrations.forEach(integration => {\n      if (!('key' in integration)) {\n        throw new Error(sprintf(ERROR_MESSAGES.MISSING_INTEGRATION_KEY, MODULE_NAME));\n      }\n\n      if (integration.key === 'odp') {\n        if (integration.publicKey && !projectConfig.publicKeyForOdp) {\n          projectConfig.publicKeyForOdp = integration.publicKey;\n        }\n\n        if (integration.host && !projectConfig.hostForOdp) {\n          projectConfig.hostForOdp = integration.host;\n        }\n\n        if (integration.pixelUrl && !projectConfig.pixelUrlForOdp) {\n          projectConfig.pixelUrlForOdp = integration.pixelUrl;\n        }\n      }\n    });\n  }\n\n  projectConfig.experimentKeyMap = keyBy(projectConfig.experiments, 'key');\n  projectConfig.experimentIdMap = keyBy(projectConfig.experiments, 'id');\n\n  projectConfig.variationIdMap = {};\n  projectConfig.variationVariableUsageMap = {};\n  (projectConfig.experiments || []).forEach(experiment => {\n    // Creates { <variationKey>: <variation> } map inside of the experiment\n    experiment.variationKeyMap = keyBy(experiment.variations, 'key');\n\n    // Creates { <variationId>: { key: <variationKey>, id: <variationId> } } mapping for quick lookup\n    assign(projectConfig.variationIdMap, keyBy(experiment.variations, 'id'));\n    objectValues(experiment.variationKeyMap || {}).forEach(variation => {\n      if (variation.variables) {\n        projectConfig.variationVariableUsageMap[variation.id] = keyBy(variation.variables, 'id');\n      }\n    });\n  });\n\n  // Object containing experiment Ids that exist in any feature\n  // for checking that experiment is a feature experiment or not.\n  projectConfig.experimentFeatureMap = {};\n\n  projectConfig.featureKeyMap = keyBy(projectConfig.featureFlags || [], 'key');\n  objectValues(projectConfig.featureKeyMap || {}).forEach(feature => {\n    // Json type is represented in datafile as a subtype of string for the sake of backwards compatibility.\n    // Converting it to a first-class json type while creating Project Config\n    feature.variables.forEach(variable => {\n      if (variable.type === FEATURE_VARIABLE_TYPES.STRING && variable.subType === FEATURE_VARIABLE_TYPES.JSON) {\n        variable.type = FEATURE_VARIABLE_TYPES.JSON as VariableType;\n        delete variable.subType;\n      }\n    });\n\n    feature.variableKeyMap = keyBy(feature.variables, 'key');\n    (feature.experimentIds || []).forEach(experimentId => {\n      // Add this experiment in experiment-feature map.\n      if (projectConfig.experimentFeatureMap[experimentId]) {\n        projectConfig.experimentFeatureMap[experimentId].push(feature.id);\n      } else {\n        projectConfig.experimentFeatureMap[experimentId] = [feature.id];\n      }\n    });\n  });\n\n  // all rules (experiment rules and delivery rules) for each flag\n  projectConfig.flagRulesMap = {};\n\n  (projectConfig.featureFlags || []).forEach(featureFlag => {\n    const flagRuleExperiments: Experiment[] = [];\n    featureFlag.experimentIds.forEach(experimentId => {\n      const experiment = projectConfig.experimentIdMap[experimentId];\n      if (experiment) {\n        flagRuleExperiments.push(experiment);\n      }\n    });\n\n    const rollout = projectConfig.rolloutIdMap[featureFlag.rolloutId];\n    if (rollout) {\n      flagRuleExperiments.push(...rollout.experiments);\n    }\n\n    projectConfig.flagRulesMap[featureFlag.key] = flagRuleExperiments;\n  });\n\n  // all variations for each flag\n  // - datafile does not contain a separate entity for this.\n  // - we collect variations used in each rule (experiment rules and delivery rules)\n  projectConfig.flagVariationsMap = {};\n\n  objectEntries(projectConfig.flagRulesMap || {}).forEach(([flagKey, rules]) => {\n    const variations: OptimizelyVariation[] = [];\n    rules.forEach(rule => {\n      rule.variations.forEach(variation => {\n        if (!find(variations, item => item.id === variation.id)) {\n          variations.push(variation);\n        }\n      });\n    });\n    projectConfig.flagVariationsMap[flagKey] = variations;\n  });\n\n  return projectConfig;\n};\n\n/**\n * Extract all audience segments used in this audience's conditions\n * @param  {Audience}     audience  Object representing the audience being parsed\n * @return {string[]}               List of all audience segments\n */\nexport const getAudienceSegments = function(audience: Audience): string[] {\n  if (!audience.conditions) return [];\n  return getSegmentsFromConditions(audience.conditions);\n};\n\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\nconst getSegmentsFromConditions = (condition: any): string[] => {\n  const segments = [];\n\n  if (isLogicalOperator(condition)) {\n    return [];\n  } else if (Array.isArray(condition)) {\n    condition.forEach(nextCondition => segments.push(...getSegmentsFromConditions(nextCondition)));\n  } else if (condition['match'] === 'qualified') {\n    segments.push(condition['value']);\n  }\n\n  return segments;\n};\n\nfunction isLogicalOperator(condition: string): boolean {\n  return ['and', 'or', 'not'].includes(condition);\n}\n\n/**\n * Get experiment ID for the provided experiment key\n * @param  {ProjectConfig}    projectConfig   Object representing project configuration\n * @param  {string}           experimentKey   Experiment key for which ID is to be determined\n * @return {string}                           Experiment ID corresponding to the provided experiment key\n * @throws If experiment key is not in datafile\n */\nexport const getExperimentId = function(projectConfig: ProjectConfig, experimentKey: string): string {\n  const experiment = projectConfig.experimentKeyMap[experimentKey];\n  if (!experiment) {\n    throw new Error(sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_KEY, MODULE_NAME, experimentKey));\n  }\n  return experiment.id;\n};\n\n/**\n * Get layer ID for the provided experiment key\n * @param  {ProjectConfig}    projectConfig   Object representing project configuration\n * @param  {string}           experimentId    Experiment ID for which layer ID is to be determined\n * @return {string}                           Layer ID corresponding to the provided experiment key\n * @throws If experiment key is not in datafile\n */\nexport const getLayerId = function(projectConfig: ProjectConfig, experimentId: string): string {\n  const experiment = projectConfig.experimentIdMap[experimentId];\n  if (!experiment) {\n    throw new Error(sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_ID, MODULE_NAME, experimentId));\n  }\n  return experiment.layerId;\n};\n\n/**\n * Get attribute ID for the provided attribute key\n * @param  {ProjectConfig}   projectConfig    Object representing project configuration\n * @param  {string}          attributeKey     Attribute key for which ID is to be determined\n * @param  {LogHandler}      logger\n * @return {string|null}     Attribute ID corresponding to the provided attribute key. Attribute key if it is a reserved attribute.\n */\nexport const getAttributeId = function(\n  projectConfig: ProjectConfig,\n  attributeKey: string,\n  logger: LogHandler\n): string | null {\n  const attribute = projectConfig.attributeKeyMap[attributeKey];\n  const hasReservedPrefix = attributeKey.indexOf(RESERVED_ATTRIBUTE_PREFIX) === 0;\n  if (attribute) {\n    if (hasReservedPrefix) {\n      logger.log(\n        LOG_LEVEL.WARNING,\n        'Attribute %s unexpectedly has reserved prefix %s; using attribute ID instead of reserved attribute name.',\n        attributeKey,\n        RESERVED_ATTRIBUTE_PREFIX\n      );\n    }\n    return attribute.id;\n  } else if (hasReservedPrefix) {\n    return attributeKey;\n  }\n\n  logger.log(LOG_LEVEL.DEBUG, ERROR_MESSAGES.UNRECOGNIZED_ATTRIBUTE, MODULE_NAME, attributeKey);\n  return null;\n};\n\n/**\n * Get event ID for the provided\n * @param  {ProjectConfig}   projectConfig  Object representing project configuration\n * @param  {string}          eventKey       Event key for which ID is to be determined\n * @return {string|null}     Event ID corresponding to the provided event key\n */\nexport const getEventId = function(projectConfig: ProjectConfig, eventKey: string): string | null {\n  const event = projectConfig.eventKeyMap[eventKey];\n  if (event) {\n    return event.id;\n  }\n  return null;\n};\n\n/**\n * Get experiment status for the provided experiment key\n * @param  {ProjectConfig}  projectConfig   Object representing project configuration\n * @param  {string}         experimentKey   Experiment key for which status is to be determined\n * @return {string}         Experiment status corresponding to the provided experiment key\n * @throws If experiment key is not in datafile\n */\nexport const getExperimentStatus = function(projectConfig: ProjectConfig, experimentKey: string): string {\n  const experiment = projectConfig.experimentKeyMap[experimentKey];\n  if (!experiment) {\n    throw new Error(sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_KEY, MODULE_NAME, experimentKey));\n  }\n  return experiment.status;\n};\n\n/**\n * Returns whether experiment has a status of 'Running'\n * @param  {ProjectConfig}  projectConfig   Object representing project configuration\n * @param  {string}         experimentKey   Experiment key for which status is to be compared with 'Running'\n * @return {boolean}                        True if experiment status is set to 'Running', false otherwise\n */\nexport const isActive = function(projectConfig: ProjectConfig, experimentKey: string): boolean {\n  return getExperimentStatus(projectConfig, experimentKey) === EXPERIMENT_RUNNING_STATUS;\n};\n\n/**\n * Determine for given experiment if event is running, which determines whether should be dispatched or not\n * @param  {ProjectConfig}  configObj       Object representing project configuration\n * @param  {string}         experimentKey   Experiment key for which the status is to be determined\n * @return {boolean}                        True if the experiment is running\n *                                          False if the experiment is not running\n *\n */\nexport const isRunning = function(projectConfig: ProjectConfig, experimentKey: string): boolean {\n  return getExperimentStatus(projectConfig, experimentKey) === EXPERIMENT_RUNNING_STATUS;\n};\n\n/**\n * Get audience conditions for the experiment\n * @param  {ProjectConfig}  projectConfig   Object representing project configuration\n * @param  {string}         experimentId    Experiment id for which audience conditions are to be determined\n * @return {Array<string|string[]>}         Audience conditions for the experiment - can be an array of audience IDs, or a\n *                                          nested array of conditions\n *                                          Examples: [\"5\", \"6\"], [\"and\", [\"or\", \"1\", \"2\"], \"3\"]\n * @throws If experiment key is not in datafile\n */\nexport const getExperimentAudienceConditions = function(\n  projectConfig: ProjectConfig,\n  experimentId: string\n): Array<string | string[]> {\n  const experiment = projectConfig.experimentIdMap[experimentId];\n  if (!experiment) {\n    throw new Error(sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_ID, MODULE_NAME, experimentId));\n  }\n\n  return experiment.audienceConditions || experiment.audienceIds;\n};\n\n/**\n * Get variation key given experiment key and variation ID\n * @param  {ProjectConfig}  projectConfig   Object representing project configuration\n * @param  {string}         variationId     ID of the variation\n * @return {string|null}    Variation key or null if the variation ID is not found\n */\nexport const getVariationKeyFromId = function(projectConfig: ProjectConfig, variationId: string): string | null {\n  if (projectConfig.variationIdMap.hasOwnProperty(variationId)) {\n    return projectConfig.variationIdMap[variationId].key;\n  }\n\n  return null;\n};\n\n/**\n * Get variation given variation ID\n * @param  {ProjectConfig}  projectConfig   Object representing project configuration\n * @param  {string}         variationId     ID of the variation\n * @return {Variation|null}    Variation or null if the variation ID is not found\n */\nexport const getVariationFromId = function(projectConfig: ProjectConfig, variationId: string): Variation | null {\n  if (projectConfig.variationIdMap.hasOwnProperty(variationId)) {\n    return projectConfig.variationIdMap[variationId];\n  }\n\n  return null;\n};\n\n/**\n * Get the variation ID given the experiment key and variation key\n * @param  {ProjectConfig}  projectConfig   Object representing project configuration\n * @param  {string}         experimentKey   Key of the experiment the variation belongs to\n * @param  {string}         variationKey    The variation key\n * @return {string|null}    Variation ID or null\n */\nexport const getVariationIdFromExperimentAndVariationKey = function(\n  projectConfig: ProjectConfig,\n  experimentKey: string,\n  variationKey: string\n): string | null {\n  const experiment = projectConfig.experimentKeyMap[experimentKey];\n  if (experiment.variationKeyMap.hasOwnProperty(variationKey)) {\n    return experiment.variationKeyMap[variationKey].id;\n  }\n\n  return null;\n};\n\n/**\n * Get experiment from provided experiment key\n * @param  {ProjectConfig}  projectConfig  Object representing project configuration\n * @param  {string}         experimentKey  Event key for which experiment IDs are to be retrieved\n * @return {Experiment}     Experiment\n * @throws If experiment key is not in datafile\n */\nexport const getExperimentFromKey = function(projectConfig: ProjectConfig, experimentKey: string): Experiment {\n  if (projectConfig.experimentKeyMap.hasOwnProperty(experimentKey)) {\n    const experiment = projectConfig.experimentKeyMap[experimentKey];\n    if (experiment) {\n      return experiment;\n    }\n  }\n\n  throw new Error(sprintf(ERROR_MESSAGES.EXPERIMENT_KEY_NOT_IN_DATAFILE, MODULE_NAME, experimentKey));\n};\n\n/**\n * Given an experiment id, returns the traffic allocation within that experiment\n * @param  {ProjectConfig}  projectConfig  Object representing project configuration\n * @param  {string}         experimentId   Id representing the experiment\n * @return {TrafficAllocation[]}           Traffic allocation for the experiment\n * @throws If experiment key is not in datafile\n */\nexport const getTrafficAllocation = function(projectConfig: ProjectConfig, experimentId: string): TrafficAllocation[] {\n  const experiment = projectConfig.experimentIdMap[experimentId];\n  if (!experiment) {\n    throw new Error(sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_ID, MODULE_NAME, experimentId));\n  }\n  return experiment.trafficAllocation;\n};\n\n/**\n * Get experiment from provided experiment id. Log an error if no experiment\n * exists in the project config with the given ID.\n * @param  {ProjectConfig}  projectConfig  Object representing project configuration\n * @param  {string}         experimentId   ID of desired experiment object\n * @param  {LogHandler}     logger\n * @return {Experiment|null}               Experiment object or null\n */\nexport const getExperimentFromId = function(\n  projectConfig: ProjectConfig,\n  experimentId: string,\n  logger: LogHandler\n): Experiment | null {\n  if (projectConfig.experimentIdMap.hasOwnProperty(experimentId)) {\n    const experiment = projectConfig.experimentIdMap[experimentId];\n    if (experiment) {\n      return experiment;\n    }\n  }\n\n  logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.INVALID_EXPERIMENT_ID, MODULE_NAME, experimentId);\n  return null;\n};\n\n/**\n * Returns flag variation for specified flagKey and variationKey\n * @param  {flagKey}        string\n * @param  {variationKey}   string\n * @return {Variation|null}\n */\nexport const getFlagVariationByKey = function(\n  projectConfig: ProjectConfig,\n  flagKey: string,\n  variationKey: string\n): Variation | null {\n  if (!projectConfig) {\n    return null;\n  }\n\n  const variations = projectConfig.flagVariationsMap[flagKey];\n  const result = find(variations, item => item.key === variationKey);\n  if (result) {\n    return result;\n  }\n\n  return null;\n};\n\n/**\n * Get feature from provided feature key. Log an error if no feature exists in\n * the project config with the given key.\n * @param  {ProjectConfig}    projectConfig\n * @param  {string}           featureKey\n * @param  {LogHandler}       logger\n * @return {FeatureFlag|null} Feature object, or null if no feature with the given\n *                            key exists\n */\nexport const getFeatureFromKey = function(\n  projectConfig: ProjectConfig,\n  featureKey: string,\n  logger: LogHandler\n): FeatureFlag | null {\n  if (projectConfig.featureKeyMap.hasOwnProperty(featureKey)) {\n    const feature = projectConfig.featureKeyMap[featureKey];\n    if (feature) {\n      return feature;\n    }\n  }\n\n  logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.FEATURE_NOT_IN_DATAFILE, MODULE_NAME, featureKey);\n  return null;\n};\n\n/**\n * Get the variable with the given key associated with the feature with the\n * given key. If the feature key or the variable key are invalid, log an error\n * message.\n * @param  {ProjectConfig}        projectConfig\n * @param  {string}               featureKey\n * @param  {string}               variableKey\n * @param  {LogHandler}           logger\n * @return {FeatureVariable|null} Variable object, or null one or both of the given\n * feature and variable keys are invalid\n */\nexport const getVariableForFeature = function(\n  projectConfig: ProjectConfig,\n  featureKey: string,\n  variableKey: string,\n  logger: LogHandler\n): FeatureVariable | null {\n  const feature = projectConfig.featureKeyMap[featureKey];\n  if (!feature) {\n    logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.FEATURE_NOT_IN_DATAFILE, MODULE_NAME, featureKey);\n    return null;\n  }\n\n  const variable = feature.variableKeyMap[variableKey];\n  if (!variable) {\n    logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.VARIABLE_KEY_NOT_IN_DATAFILE, MODULE_NAME, variableKey, featureKey);\n    return null;\n  }\n\n  return variable;\n};\n\n/**\n * Get the value of the given variable for the given variation. If the given\n * variable has no value for the given variation, return null. Log an error message if the variation is invalid. If the\n * variable or variation are invalid, return null.\n * @param  {ProjectConfig}     projectConfig\n * @param  {FeatureVariable}   variable\n * @param  {Variation}         variation\n * @param  {LogHandler}        logger\n * @return {string|null}       The value of the given variable for the given\n * variation, or null if the given variable has no value\n * for the given variation or if the variation or variable are invalid\n */\nexport const getVariableValueForVariation = function(\n  projectConfig: ProjectConfig,\n  variable: FeatureVariable,\n  variation: Variation,\n  logger: LogHandler\n): string | null {\n  if (!variable || !variation) {\n    return null;\n  }\n\n  if (!projectConfig.variationVariableUsageMap.hasOwnProperty(variation.id)) {\n    logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.VARIATION_ID_NOT_IN_DATAFILE_NO_EXPERIMENT, MODULE_NAME, variation.id);\n    return null;\n  }\n\n  const variableUsages = projectConfig.variationVariableUsageMap[variation.id];\n  const variableUsage = variableUsages[variable.id];\n\n  return variableUsage ? variableUsage.value : null;\n};\n\n/**\n * Given a variable value in string form, try to cast it to the argument type.\n * If the type cast succeeds, return the type casted value, otherwise log an\n * error and return null.\n * @param {string}     variableValue  Variable value in string form\n * @param {string}     variableType   Type of the variable whose value was passed\n *                                    in the first argument. Must be one of\n *                                    FEATURE_VARIABLE_TYPES in\n *                                    lib/utils/enums/index.js. The return value's\n *                                    type is determined by this argument (boolean\n *                                    for BOOLEAN, number for INTEGER or DOUBLE,\n *                                    and string for STRING).\n * @param {LogHandler} logger         Logger instance\n * @returns {*}                       Variable value of the appropriate type, or\n *                                    null if the type cast failed\n */\nexport const getTypeCastValue = function(\n  variableValue: string,\n  variableType: VariableType,\n  logger: LogHandler\n): FeatureVariableValue {\n  let castValue : FeatureVariableValue;\n\n  switch (variableType) {\n    case FEATURE_VARIABLE_TYPES.BOOLEAN:\n      if (variableValue !== 'true' && variableValue !== 'false') {\n        logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.UNABLE_TO_CAST_VALUE, MODULE_NAME, variableValue, variableType);\n        castValue = null;\n      } else {\n        castValue = variableValue === 'true';\n      }\n      break;\n\n    case FEATURE_VARIABLE_TYPES.INTEGER:\n      castValue = parseInt(variableValue, 10);\n      if (isNaN(castValue)) {\n        logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.UNABLE_TO_CAST_VALUE, MODULE_NAME, variableValue, variableType);\n        castValue = null;\n      }\n      break;\n\n    case FEATURE_VARIABLE_TYPES.DOUBLE:\n      castValue = parseFloat(variableValue);\n      if (isNaN(castValue)) {\n        logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.UNABLE_TO_CAST_VALUE, MODULE_NAME, variableValue, variableType);\n        castValue = null;\n      }\n      break;\n\n    case FEATURE_VARIABLE_TYPES.JSON:\n      try {\n        castValue = JSON.parse(variableValue);\n      } catch (e) {\n        logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.UNABLE_TO_CAST_VALUE, MODULE_NAME, variableValue, variableType);\n        castValue = null;\n      }\n      break;\n\n    default:\n      // type is STRING\n      castValue = variableValue;\n      break;\n  }\n\n  return castValue;\n};\n\n/**\n * Returns an object containing all audiences in the project config. Keys are audience IDs\n * and values are audience objects.\n * @param   {ProjectConfig}     projectConfig\n * @returns {{ [id: string]: Audience }}\n */\nexport const getAudiencesById = function(projectConfig: ProjectConfig): { [id: string]: Audience } {\n  return projectConfig.audiencesById;\n};\n\n/**\n * Returns true if an event with the given key exists in the datafile, and false otherwise\n * @param   {ProjectConfig}     projectConfig\n * @param   {string}            eventKey\n * @returns {boolean}\n */\nexport const eventWithKeyExists = function(projectConfig: ProjectConfig, eventKey: string): boolean {\n  return projectConfig.eventKeyMap.hasOwnProperty(eventKey);\n};\n\n/**\n * Returns true if experiment belongs to any feature, false otherwise.\n * @param   {ProjectConfig}       projectConfig\n * @param   {string}              experimentId\n * @returns {boolean}\n */\nexport const isFeatureExperiment = function(projectConfig: ProjectConfig, experimentId: string): boolean {\n  return projectConfig.experimentFeatureMap.hasOwnProperty(experimentId);\n};\n\n/**\n * Returns the JSON string representation of the datafile\n * @param   {ProjectConfig}       projectConfig\n * @returns {string}\n */\nexport const toDatafile = function(projectConfig: ProjectConfig): string {\n  return projectConfig.__datafileStr;\n};\n\n/**\n * @typedef   {Object}\n * @property  {Object|null} configObj\n * @property  {Error|null}  error\n */\n\n/**\n * Try to create a project config object from the given datafile and\n * configuration properties.\n * Returns an object with configObj and error properties.\n * If successful, configObj is the project config object, and error is null.\n * Otherwise, configObj is null and error is an error with more information.\n * @param   {Object}         config\n * @param   {Object|string}  config.datafile\n * @param   {Object}         config.jsonSchemaValidator\n * @param   {Object}         config.logger\n * @returns {Object}         Object containing configObj and error properties\n */\nexport const tryCreatingProjectConfig = function(\n  config: TryCreatingProjectConfigConfig\n): { configObj: ProjectConfig | null; error: Error | null } {\n  let newDatafileObj;\n  try {\n    newDatafileObj = configValidator.validateDatafile(config.datafile);\n  } catch (error) {\n    return { configObj: null, error };\n  }\n\n  if (config.jsonSchemaValidator) {\n    try {\n      config.jsonSchemaValidator.validate(newDatafileObj);\n      config.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.VALID_DATAFILE, MODULE_NAME);\n    } catch (error) {\n      return { configObj: null, error };\n    }\n  } else {\n    config.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.SKIPPING_JSON_VALIDATION, MODULE_NAME);\n  }\n\n  const createProjectConfigArgs = [newDatafileObj];\n  if (typeof config.datafile === 'string') {\n    // Since config.datafile was validated above, we know that it is a valid JSON string\n    createProjectConfigArgs.push(config.datafile);\n  }\n\n  const newConfigObj = createProjectConfig(...createProjectConfigArgs);\n\n  return {\n    configObj: newConfigObj,\n    error: null,\n  };\n};\n\n/**\n * Get the send flag decisions value\n * @param  {ProjectConfig}   projectConfig\n * @return {boolean}         A boolean value that indicates if we should send flag decisions\n */\nexport const getSendFlagDecisionsValue = function(projectConfig: ProjectConfig): boolean {\n  return !!projectConfig.sendFlagDecisions;\n};\n\nexport default {\n  createProjectConfig,\n  getExperimentId,\n  getLayerId,\n  getAttributeId,\n  getEventId,\n  getExperimentStatus,\n  isActive,\n  isRunning,\n  getExperimentAudienceConditions,\n  getVariationFromId,\n  getVariationKeyFromId,\n  getVariationIdFromExperimentAndVariationKey,\n  getExperimentFromKey,\n  getTrafficAllocation,\n  getExperimentFromId,\n  getFlagVariationByKey,\n  getFeatureFromKey,\n  getVariableForFeature,\n  getVariableValueForVariation,\n  getTypeCastValue,\n  getSendFlagDecisionsValue,\n  getAudiencesById,\n  getAudienceSegments,\n  eventWithKeyExists,\n  isFeatureExperiment,\n  toDatafile,\n  tryCreatingProjectConfig,\n};\n","/**\n * Copyright 2019-2022, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getLogger } from '../../modules/logging';\nimport { sprintf } from '../../utils/fns';\n\nimport { ERROR_MESSAGES } from '../../utils/enums';\nimport { createOptimizelyConfig } from '../optimizely_config';\nimport { OnReadyResult, OptimizelyConfig, DatafileManager } from '../../shared_types';\nimport { ProjectConfig, toDatafile, tryCreatingProjectConfig } from '../project_config';\n\nconst logger = getLogger();\nconst MODULE_NAME = 'PROJECT_CONFIG_MANAGER';\n\ninterface ProjectConfigManagerConfig {\n  // TODO[OASIS-6649]: Don't use object type\n  // eslint-disable-next-line  @typescript-eslint/ban-types\n  datafile?: string | object;\n  jsonSchemaValidator?: {\n    validate(jsonObject: unknown): boolean;\n  };\n  sdkKey?: string;\n  datafileManager?: DatafileManager;\n}\n\n/**\n * Return an error message derived from a thrown value. If the thrown value is\n * an error, return the error's message property. Otherwise, return a default\n * provided by the second argument.\n * @param  {Error|null}                   maybeError\n * @param  {string}                       defaultMessage\n * @return {string}\n */\nfunction getErrorMessage(maybeError: Error | null, defaultMessage?: string): string {\n  if (maybeError instanceof Error) {\n    return maybeError.message;\n  }\n  return defaultMessage || 'Unknown error';\n}\n\n/**\n * ProjectConfigManager provides project config objects via its methods\n * getConfig and onUpdate. It uses a DatafileManager to fetch datafiles. It is\n * responsible for parsing and validating datafiles, and converting datafile\n * string into project config objects.\n * @param {ProjectConfigManagerConfig}    config\n */\nexport class ProjectConfigManager {\n  private updateListeners: Array<(config: ProjectConfig) => void> = [];\n  private configObj: ProjectConfig | null = null;\n  private optimizelyConfigObj: OptimizelyConfig | null = null;\n  private readyPromise: Promise<OnReadyResult>;\n  public jsonSchemaValidator: { validate(jsonObject: unknown): boolean } | undefined;\n  public datafileManager: DatafileManager | null = null;\n\n  constructor(config: ProjectConfigManagerConfig) {\n    try {\n      this.jsonSchemaValidator = config.jsonSchemaValidator;\n\n      if (!config.datafile && !config.sdkKey) {\n        const datafileAndSdkKeyMissingError = new Error(\n          sprintf(ERROR_MESSAGES.DATAFILE_AND_SDK_KEY_MISSING, MODULE_NAME)\n        );\n        this.readyPromise = Promise.resolve({\n          success: false,\n          reason: getErrorMessage(datafileAndSdkKeyMissingError),\n        });\n        logger.error(datafileAndSdkKeyMissingError);\n        return;\n      }\n\n      let handleNewDatafileException = null;\n      if (config.datafile) {\n        handleNewDatafileException = this.handleNewDatafile(config.datafile);\n      }\n\n      if (config.sdkKey && config.datafileManager) {\n        this.datafileManager = config.datafileManager;\n        this.datafileManager.start();\n        this.readyPromise = this.datafileManager\n          .onReady()\n          .then(this.onDatafileManagerReadyFulfill.bind(this), this.onDatafileManagerReadyReject.bind(this));\n        this.datafileManager.on('update', this.onDatafileManagerUpdate.bind(this));\n      } else if (this.configObj) {\n        this.readyPromise = Promise.resolve({\n          success: true,\n        });\n      } else {\n        this.readyPromise = Promise.resolve({\n          success: false,\n          reason: getErrorMessage(handleNewDatafileException, 'Invalid datafile'),\n        });\n      }\n    } catch (ex) {\n      logger.error(ex);\n      this.readyPromise = Promise.resolve({\n        success: false,\n        reason: getErrorMessage(ex, 'Error in initialize'),\n      });\n    }\n  }\n\n  /**\n   * Respond to datafile manager's onReady promise becoming fulfilled.\n   * If there are validation or parse failures using the datafile provided by\n   * DatafileManager, ProjectConfigManager's ready promise is resolved with an\n   * unsuccessful result. Otherwise, ProjectConfigManager updates its own project\n   * config object from the new datafile, and its ready promise is resolved with a\n   * successful result.\n   */\n  private onDatafileManagerReadyFulfill(): OnReadyResult {\n    if (this.datafileManager) {\n      const newDatafileError = this.handleNewDatafile(this.datafileManager.get());\n      if (newDatafileError) {\n        return {\n          success: false,\n          reason: getErrorMessage(newDatafileError),\n        };\n      }\n      return { success: true };\n    }\n\n    return {\n      success: false,\n      reason: getErrorMessage(null, 'Datafile manager is not provided'),\n    };\n  }\n\n  /**\n   * Respond to datafile manager's onReady promise becoming rejected.\n   * When DatafileManager's onReady promise is rejected, there is no possibility\n   * of obtaining a datafile. In this case, ProjectConfigManager's ready promise\n   * is fulfilled with an unsuccessful result.\n   * @param   {Error}   err\n   * @returns {Object}\n   */\n  private onDatafileManagerReadyReject(err: Error): OnReadyResult {\n    return {\n      success: false,\n      reason: getErrorMessage(err, 'Failed to become ready'),\n    };\n  }\n\n  /**\n   * Respond to datafile manager's update event. Attempt to update own config\n   * object using latest datafile from datafile manager. Call own registered\n   * update listeners if successful\n   */\n  private onDatafileManagerUpdate(): void {\n    if (this.datafileManager) {\n      this.handleNewDatafile(this.datafileManager.get());\n    }\n  }\n\n  /**\n   * Handle new datafile by attemping to create a new Project Config object. If successful and\n   * the new config object's revision is newer than the current one, sets/updates the project config\n   * and optimizely config object instance variables and returns null for the error. If unsuccessful,\n   * the project config and optimizely config objects will not be updated, and the error is returned.\n   * @param   {string | object}        newDatafile\n   * @returns {Error|null}    error or null\n   */\n  // TODO[OASIS-6649]: Don't use object type\n  // eslint-disable-next-line  @typescript-eslint/ban-types\n  private handleNewDatafile(newDatafile: string | object): Error | null {\n    const { configObj, error } = tryCreatingProjectConfig({\n      datafile: newDatafile,\n      jsonSchemaValidator: this.jsonSchemaValidator,\n      logger: logger,\n    });\n\n    if (error) {\n      logger.error(error);\n    } else {\n      const oldRevision = this.configObj ? this.configObj.revision : 'null';\n      if (configObj && oldRevision !== configObj.revision) {\n        this.configObj = configObj;\n        this.optimizelyConfigObj = null;\n        this.updateListeners.forEach(listener => listener(configObj));\n      }\n    }\n\n    return error;\n  }\n\n  /**\n   * Returns the current project config object, or null if no project config object\n   * is available\n   * @return {ProjectConfig|null}\n   */\n  getConfig(): ProjectConfig | null {\n    return this.configObj;\n  }\n\n  /**\n   * Returns the optimizely config object or null\n   * @return {OptimizelyConfig|null}\n   */\n  getOptimizelyConfig(): OptimizelyConfig | null {\n    if (!this.optimizelyConfigObj && this.configObj) {\n      this.optimizelyConfigObj = createOptimizelyConfig(this.configObj, toDatafile(this.configObj), logger);\n    }\n    return this.optimizelyConfigObj;\n  }\n\n  /**\n   * Returns a Promise that fulfills when this ProjectConfigManager is ready to\n   * use (meaning it has a valid project config object), or has failed to become\n   * ready.\n   *\n   * Failure can be caused by the following:\n   * - At least one of sdkKey or datafile is not provided in the constructor argument\n   * - The provided datafile was invalid\n   * - The datafile provided by the datafile manager was invalid\n   * - The datafile manager failed to fetch a datafile\n   *\n   * The returned Promise is fulfilled with a result object containing these\n   * properties:\n   *    - success (boolean): True if this instance is ready to use with a valid\n   *                         project config object, or false if it failed to\n   *                         become ready\n   *    - reason (string=):  If success is false, this is a string property with\n   *                         an explanatory message.\n   * @return {Promise}\n   */\n  onReady(): Promise<OnReadyResult> {\n    return this.readyPromise;\n  }\n\n  /**\n   * Add a listener for project config updates. The listener will be called\n   * whenever this instance has a new project config object available.\n   * Returns a dispose function that removes the subscription\n   * @param  {Function} listener\n   * @return {Function}\n   */\n  onUpdate(listener: (config: ProjectConfig) => void): () => void {\n    this.updateListeners.push(listener);\n    return () => {\n      const index = this.updateListeners.indexOf(listener);\n      if (index > -1) {\n        this.updateListeners.splice(index, 1);\n      }\n    };\n  }\n\n  /**\n   * Stop the internal datafile manager and remove all update listeners\n   */\n  stop(): void {\n    if (this.datafileManager) {\n      this.datafileManager.stop();\n    }\n    this.updateListeners = [];\n  }\n}\n\nexport function createProjectConfigManager(config: ProjectConfigManagerConfig): ProjectConfigManager {\n  return new ProjectConfigManager(config);\n}\n","/**\n * Copyright 2016, 2019-2022, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Bucketer API for determining the variation id from the specified parameters\n */\nimport { sprintf } from '../../utils/fns';\nimport murmurhash from 'murmurhash';\nimport { LogHandler } from '../../modules/logging';\nimport {\n  DecisionResponse,\n  BucketerParams,\n  TrafficAllocation,\n  Group,\n} from '../../shared_types';\n\nimport {\n  ERROR_MESSAGES,\n  LOG_LEVEL,\n  LOG_MESSAGES,\n} from '../../utils/enums';\n\nconst HASH_SEED = 1;\nconst MAX_HASH_VALUE = Math.pow(2, 32);\nconst MAX_TRAFFIC_VALUE = 10000;\nconst MODULE_NAME = 'BUCKETER';\nconst RANDOM_POLICY = 'random';\n\n/**\n * Determines ID of variation to be shown for the given input params\n * @param  {Object}             bucketerParams\n * @param  {string}             bucketerParams.experimentId\n * @param  {string}             bucketerParams.experimentKey\n * @param  {string}             bucketerParams.userId\n * @param  {Object[]}           bucketerParams.trafficAllocationConfig\n * @param  {Array}              bucketerParams.experimentKeyMap\n * @param  {Object}             bucketerParams.groupIdMap\n * @param  {Object}             bucketerParams.variationIdMap\n * @param  {string}             bucketerParams.varationIdMap[].key\n * @param  {Object}             bucketerParams.logger\n * @param  {string}             bucketerParams.bucketingId\n * @return {Object}             DecisionResponse                         DecisionResponse containing variation ID that user has been bucketed into,\n *                                                                       null if user is not bucketed into any experiment and the decide reasons.\n */\nexport const bucket = function(bucketerParams: BucketerParams): DecisionResponse<string | null> {\n  const decideReasons: (string | number)[][] = [];\n  // Check if user is in a random group; if so, check if user is bucketed into a specific experiment\n  const experiment = bucketerParams.experimentIdMap[bucketerParams.experimentId];\n  const groupId = experiment['groupId'];\n  if (groupId) {\n    const group = bucketerParams.groupIdMap[groupId];\n    if (!group) {\n      throw new Error(sprintf(ERROR_MESSAGES.INVALID_GROUP_ID, MODULE_NAME, groupId));\n    }\n    if (group.policy === RANDOM_POLICY) {\n      const bucketedExperimentId = bucketUserIntoExperiment(\n        group,\n        bucketerParams.bucketingId,\n        bucketerParams.userId,\n        bucketerParams.logger\n      );\n\n      // Return if user is not bucketed into any experiment\n      if (bucketedExperimentId === null) {\n        bucketerParams.logger.log(\n          LOG_LEVEL.INFO,\n          LOG_MESSAGES.USER_NOT_IN_ANY_EXPERIMENT,\n          MODULE_NAME,\n          bucketerParams.userId,\n          groupId,\n        );\n        decideReasons.push([\n          LOG_MESSAGES.USER_NOT_IN_ANY_EXPERIMENT,\n          MODULE_NAME,\n          bucketerParams.userId,\n          groupId,\n        ]);\n        return {\n          result: null,\n          reasons: decideReasons,\n        };\n      }\n\n      // Return if user is bucketed into a different experiment than the one specified\n      if (bucketedExperimentId !== bucketerParams.experimentId) {        \n        bucketerParams.logger.log(\n          LOG_LEVEL.INFO,\n          LOG_MESSAGES.USER_NOT_BUCKETED_INTO_EXPERIMENT_IN_GROUP,\n          MODULE_NAME,\n          bucketerParams.userId,\n          bucketerParams.experimentKey,\n          groupId,\n        );\n        decideReasons.push([\n          LOG_MESSAGES.USER_NOT_BUCKETED_INTO_EXPERIMENT_IN_GROUP,\n          MODULE_NAME,\n          bucketerParams.userId,\n          bucketerParams.experimentKey,\n          groupId,\n        ]);\n        return {\n          result: null,\n          reasons: decideReasons,\n        };\n      }\n\n      // Continue bucketing if user is bucketed into specified experiment      \n      bucketerParams.logger.log(\n        LOG_LEVEL.INFO,\n        LOG_MESSAGES.USER_BUCKETED_INTO_EXPERIMENT_IN_GROUP,\n        MODULE_NAME,\n        bucketerParams.userId,\n        bucketerParams.experimentKey,\n        groupId,\n      );\n      decideReasons.push([\n        LOG_MESSAGES.USER_BUCKETED_INTO_EXPERIMENT_IN_GROUP,\n        MODULE_NAME,\n        bucketerParams.userId,\n        bucketerParams.experimentKey,\n        groupId,\n      ]);\n    }\n  }\n  const bucketingId = `${bucketerParams.bucketingId}${bucketerParams.experimentId}`;\n  const bucketValue = _generateBucketValue(bucketingId);\n  \n  bucketerParams.logger.log(\n    LOG_LEVEL.DEBUG,\n    LOG_MESSAGES.USER_ASSIGNED_TO_EXPERIMENT_BUCKET,\n    MODULE_NAME,\n    bucketValue,\n    bucketerParams.userId,\n  );\n  decideReasons.push([\n    LOG_MESSAGES.USER_ASSIGNED_TO_EXPERIMENT_BUCKET,\n    MODULE_NAME,\n    bucketValue,\n    bucketerParams.userId,\n  ]);\n\n  const entityId = _findBucket(bucketValue, bucketerParams.trafficAllocationConfig);\n  if (entityId !== null) {\n    if (!bucketerParams.variationIdMap[entityId]) {\n      if (entityId) {        \n        bucketerParams.logger.log(LOG_LEVEL.WARNING, LOG_MESSAGES.INVALID_VARIATION_ID, MODULE_NAME);\n        decideReasons.push([LOG_MESSAGES.INVALID_VARIATION_ID, MODULE_NAME]);\n      }\n      return {\n        result: null,\n        reasons: decideReasons,\n      };\n    }\n  }\n\n  return {\n    result: entityId,\n    reasons: decideReasons,\n  };\n};\n\n/**\n * Returns bucketed experiment ID to compare against experiment user is being called into\n * @param  {Group}       group        Group that experiment is in\n * @param  {string}      bucketingId  Bucketing ID\n * @param  {string}      userId       ID of user to be bucketed into experiment\n * @param  {LogHandler}  logger       Logger implementation\n * @return {string|null}              ID of experiment if user is bucketed into experiment within the group, null otherwise\n */\nexport const bucketUserIntoExperiment = function(\n  group: Group,\n  bucketingId: string,\n  userId: string,\n  logger: LogHandler\n): string | null {\n  const bucketingKey = `${bucketingId}${group.id}`;\n  const bucketValue = _generateBucketValue(bucketingKey);\n  logger.log(\n    LOG_LEVEL.DEBUG,\n    LOG_MESSAGES.USER_ASSIGNED_TO_EXPERIMENT_BUCKET,\n    MODULE_NAME,\n    bucketValue,\n    userId,\n  );\n  const trafficAllocationConfig = group.trafficAllocation;\n  const bucketedExperimentId = _findBucket(bucketValue, trafficAllocationConfig);\n  return bucketedExperimentId;\n};\n\n/**\n * Returns entity ID associated with bucket value\n * @param  {number}                bucketValue\n * @param  {TrafficAllocation[]}   trafficAllocationConfig\n * @param  {number}                trafficAllocationConfig[].endOfRange\n * @param  {string}                trafficAllocationConfig[].entityId\n * @return {string|null}           Entity ID for bucketing if bucket value is within traffic allocation boundaries, null otherwise\n */\nexport const _findBucket = function(\n  bucketValue: number,\n  trafficAllocationConfig: TrafficAllocation[]\n): string | null {\n  for (let i = 0; i < trafficAllocationConfig.length; i++) {\n    if (bucketValue < trafficAllocationConfig[i].endOfRange) {\n      return trafficAllocationConfig[i].entityId;\n    }\n  }\n\n  return null;\n};\n\n/**\n * Helper function to generate bucket value in half-closed interval [0, MAX_TRAFFIC_VALUE)\n * @param  {string}               bucketingKey          String value for bucketing\n * @return {number}               The generated bucket value\n * @throws                        If bucketing value is not a valid string\n */\nexport const _generateBucketValue = function(bucketingKey: string): number {\n  try {\n    // NOTE: the mmh library already does cast the hash value as an unsigned 32bit int\n    // https://github.com/perezd/node-murmurhash/blob/master/murmurhash.js#L115\n    const hashValue = murmurhash.v3(bucketingKey, HASH_SEED);\n    const ratio = hashValue / MAX_HASH_VALUE;\n    return Math.floor(ratio * MAX_TRAFFIC_VALUE);\n  } catch (ex: any) {\n    throw new Error(sprintf(ERROR_MESSAGES.INVALID_BUCKETING_ID, MODULE_NAME, bucketingKey, ex.message));\n  }\n};\n\nexport default {\n  bucket: bucket,\n  bucketUserIntoExperiment: bucketUserIntoExperiment,\n  _generateBucketValue: _generateBucketValue,\n};\n","/**\n * Copyright 2020, 2022, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getLogger } from '../../modules/logging';\nimport { VERSION_TYPE, LOG_MESSAGES } from '../enums';\n\nconst MODULE_NAME = 'SEMANTIC VERSION';\nconst logger = getLogger();\n\n/**\n * Evaluate if provided string is number only\n * @param  {unknown}  content\n * @return {boolean}  true if the string is number only\n *\n */\nfunction isNumber(content: string): boolean {\n  return /^\\d+$/.test(content);\n}\n\n/**\n * Evaluate if provided version contains pre-release \"-\"\n * @param  {unknown}  version\n * @return {boolean}  true if the version contains \"-\" and meets condition\n *\n */\nfunction isPreReleaseVersion(version: string): boolean {\n  const preReleaseIndex = version.indexOf(VERSION_TYPE.PRE_RELEASE_VERSION_DELIMITER);\n  const buildIndex = version.indexOf(VERSION_TYPE.BUILD_VERSION_DELIMITER);\n\n  if (preReleaseIndex < 0) {\n    return false;\n  }\n\n  if (buildIndex < 0) {\n    return true;\n  }\n\n  return preReleaseIndex < buildIndex;\n}\n\n/**\n * Evaluate if provided version contains build \"+\"\n * @param  {unknown}  version\n * @return {boolean}  true if the version contains \"+\" and meets condition\n *\n */\nfunction isBuildVersion(version: string): boolean {\n  const preReleaseIndex = version.indexOf(VERSION_TYPE.PRE_RELEASE_VERSION_DELIMITER);\n  const buildIndex = version.indexOf(VERSION_TYPE.BUILD_VERSION_DELIMITER);\n\n  if (buildIndex < 0) {\n    return false;\n  }\n\n  if (preReleaseIndex < 0) {\n    return true;\n  }\n\n  return buildIndex < preReleaseIndex;\n}\n\n/**\n * check if there is any white spaces \" \" in version\n * @param  {unknown}  version\n * @return {boolean}  true if the version contains \" \"\n *\n */\nfunction hasWhiteSpaces(version: string): boolean {\n  return /\\s/.test(version);\n}\n\n/**\n * split version in parts\n * @param  {unknown}  version\n * @return {boolean}  The array of version split into smaller parts i.e major, minor, patch etc\n *                    null if given version is in invalid format\n */\nfunction splitVersion(version: string): string[] | null {\n  let targetPrefix = version;\n  let targetSuffix = '';\n\n  // check that version shouldn't have white space\n  if (hasWhiteSpaces(version)) {\n    logger.warn(LOG_MESSAGES.UNKNOWN_MATCH_TYPE, MODULE_NAME, version);\n    return null;\n  }\n  //check for pre release e.g. 1.0.0-alpha where 'alpha' is a pre release\n  //otherwise check for build e.g. 1.0.0+001 where 001 is a build metadata\n  if (isPreReleaseVersion(version)) {\n    targetPrefix = version.substring(0, version.indexOf(VERSION_TYPE.PRE_RELEASE_VERSION_DELIMITER));\n    targetSuffix = version.substring(version.indexOf(VERSION_TYPE.PRE_RELEASE_VERSION_DELIMITER) + 1);\n  } else if (isBuildVersion(version)) {\n    targetPrefix = version.substring(0, version.indexOf(VERSION_TYPE.BUILD_VERSION_DELIMITER));\n    targetSuffix = version.substring(version.indexOf(VERSION_TYPE.BUILD_VERSION_DELIMITER) + 1);\n  }\n\n  // check dot counts in target_prefix\n  if (typeof targetPrefix !== 'string' || typeof targetSuffix !== 'string') {\n    return null;\n  }\n\n  const dotCount = targetPrefix.split('.').length - 1;\n  if (dotCount > 2) {\n    logger.warn(LOG_MESSAGES.UNKNOWN_MATCH_TYPE, MODULE_NAME, version);\n    return null;\n  }\n\n  const targetVersionParts = targetPrefix.split('.');\n  if (targetVersionParts.length != dotCount + 1) {\n    logger.warn(LOG_MESSAGES.UNKNOWN_MATCH_TYPE, MODULE_NAME, version);\n    return null;\n  }\n  for (const part of targetVersionParts) {\n    if (!isNumber(part)) {\n      logger.warn(LOG_MESSAGES.UNKNOWN_MATCH_TYPE, MODULE_NAME, version);\n      return null;\n    }\n  }\n\n  if (targetSuffix) {\n    targetVersionParts.push(targetSuffix);\n  }\n\n  return targetVersionParts;\n}\n\n/**\n * Compare user version with condition version\n * @param  {string}  conditionsVersion\n * @param  {string}  userProvidedVersion\n * @return {number | null}  0 if user version is equal to condition version\n *                          1 if user version is greater than condition version\n *                         -1 if user version is less than condition version\n *                          null if invalid user or condition version is provided\n */\nexport function compareVersion(conditionsVersion: string, userProvidedVersion: string): number | null {\n  const userVersionParts = splitVersion(userProvidedVersion);\n  const conditionsVersionParts = splitVersion(conditionsVersion);\n\n  if (!userVersionParts || !conditionsVersionParts) {\n    return null;\n  }\n\n  const userVersionPartsLen = userVersionParts.length;\n\n  for (let idx = 0; idx < conditionsVersionParts.length; idx++) {\n    if (userVersionPartsLen <= idx) {\n      return isPreReleaseVersion(conditionsVersion) || isBuildVersion(conditionsVersion) ? 1 : -1;\n    } else if (!isNumber(userVersionParts[idx])) {\n      if (userVersionParts[idx] < conditionsVersionParts[idx]) {\n        return isPreReleaseVersion(conditionsVersion) && !isPreReleaseVersion(userProvidedVersion) ? 1 : -1;\n      } else if (userVersionParts[idx] > conditionsVersionParts[idx]) {\n        return !isPreReleaseVersion(conditionsVersion) && isPreReleaseVersion(userProvidedVersion) ? -1 : 1;\n      }\n    } else {\n      const userVersionPart = parseInt(userVersionParts[idx]);\n      const conditionsVersionPart = parseInt(conditionsVersionParts[idx]);\n      if (userVersionPart > conditionsVersionPart) {\n        return 1;\n      } else if (userVersionPart < conditionsVersionPart) {\n        return -1;\n      }\n    }\n  }\n\n  // check if user version contains release and target version does not\n  if (isPreReleaseVersion(userProvidedVersion) && !isPreReleaseVersion(conditionsVersion)) {\n    return -1;\n  }\n\n  return 0;\n}\n","/****************************************************************************\n * Copyright 2018-2019, 2020, 2022, Optimizely, Inc. and contributors              *\n *                                                                          *\n * Licensed under the Apache License, Version 2.0 (the \"License\");          *\n * you may not use this file except in compliance with the License.         *\n * You may obtain a copy of the License at                                  *\n *                                                                          *\n *    http://www.apache.org/licenses/LICENSE-2.0                            *\n *                                                                          *\n * Unless required by applicable law or agreed to in writing, software      *\n * distributed under the License is distributed on an \"AS IS\" BASIS,        *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *\n * See the License for the specific language governing permissions and      *\n * limitations under the License.                                           *\n ***************************************************************************/\nimport { getLogger } from '../../modules/logging';\nimport { Condition, OptimizelyUserContext } from '../../shared_types';\n\nimport fns from '../../utils/fns';\nimport { LOG_MESSAGES } from '../../utils/enums';\nimport { compareVersion } from '../../utils/semantic_version';\n\nconst MODULE_NAME = 'CUSTOM_ATTRIBUTE_CONDITION_EVALUATOR';\n\nconst logger = getLogger();\n\nconst EXACT_MATCH_TYPE = 'exact';\nconst EXISTS_MATCH_TYPE = 'exists';\nconst GREATER_OR_EQUAL_THAN_MATCH_TYPE = 'ge';\nconst GREATER_THAN_MATCH_TYPE = 'gt';\nconst LESS_OR_EQUAL_THAN_MATCH_TYPE = 'le';\nconst LESS_THAN_MATCH_TYPE = 'lt';\nconst SEMVER_EXACT_MATCH_TYPE = 'semver_eq';\nconst SEMVER_GREATER_OR_EQUAL_THAN_MATCH_TYPE = 'semver_ge';\nconst SEMVER_GREATER_THAN_MATCH_TYPE = 'semver_gt';\nconst SEMVER_LESS_OR_EQUAL_THAN_MATCH_TYPE = 'semver_le';\nconst SEMVER_LESS_THAN_MATCH_TYPE = 'semver_lt';\nconst SUBSTRING_MATCH_TYPE = 'substring';\n\nconst MATCH_TYPES = [\n  EXACT_MATCH_TYPE,\n  EXISTS_MATCH_TYPE,\n  GREATER_THAN_MATCH_TYPE,\n  GREATER_OR_EQUAL_THAN_MATCH_TYPE,\n  LESS_THAN_MATCH_TYPE,\n  LESS_OR_EQUAL_THAN_MATCH_TYPE,\n  SUBSTRING_MATCH_TYPE,\n  SEMVER_EXACT_MATCH_TYPE,\n  SEMVER_LESS_THAN_MATCH_TYPE,\n  SEMVER_LESS_OR_EQUAL_THAN_MATCH_TYPE,\n  SEMVER_GREATER_THAN_MATCH_TYPE,\n  SEMVER_GREATER_OR_EQUAL_THAN_MATCH_TYPE\n];\n\ntype ConditionEvaluator = (condition: Condition, user: OptimizelyUserContext) => boolean | null;\n\nconst EVALUATORS_BY_MATCH_TYPE: { [conditionType: string]: ConditionEvaluator | undefined } = {};\nEVALUATORS_BY_MATCH_TYPE[EXACT_MATCH_TYPE] = exactEvaluator;\nEVALUATORS_BY_MATCH_TYPE[EXISTS_MATCH_TYPE] = existsEvaluator;\nEVALUATORS_BY_MATCH_TYPE[GREATER_THAN_MATCH_TYPE] = greaterThanEvaluator;\nEVALUATORS_BY_MATCH_TYPE[GREATER_OR_EQUAL_THAN_MATCH_TYPE] = greaterThanOrEqualEvaluator;\nEVALUATORS_BY_MATCH_TYPE[LESS_THAN_MATCH_TYPE] = lessThanEvaluator;\nEVALUATORS_BY_MATCH_TYPE[LESS_OR_EQUAL_THAN_MATCH_TYPE] = lessThanOrEqualEvaluator;\nEVALUATORS_BY_MATCH_TYPE[SUBSTRING_MATCH_TYPE] = substringEvaluator;\nEVALUATORS_BY_MATCH_TYPE[SEMVER_EXACT_MATCH_TYPE] = semverEqualEvaluator;\nEVALUATORS_BY_MATCH_TYPE[SEMVER_GREATER_THAN_MATCH_TYPE] = semverGreaterThanEvaluator;\nEVALUATORS_BY_MATCH_TYPE[SEMVER_GREATER_OR_EQUAL_THAN_MATCH_TYPE] = semverGreaterThanOrEqualEvaluator;\nEVALUATORS_BY_MATCH_TYPE[SEMVER_LESS_THAN_MATCH_TYPE] = semverLessThanEvaluator;\nEVALUATORS_BY_MATCH_TYPE[SEMVER_LESS_OR_EQUAL_THAN_MATCH_TYPE] = semverLessThanOrEqualEvaluator;\n\n/**\n * Given a custom attribute audience condition and user attributes, evaluate the\n * condition against the attributes.\n * @param  {Condition}              condition\n * @param  {OptimizelyUserContext}  user\n * @return {?boolean}               true/false if the given user attributes match/don't match the given condition,\n *                                  null if the given user attributes and condition can't be evaluated\n * TODO: Change to accept and object with named properties\n */\nexport function evaluate(condition: Condition, user: OptimizelyUserContext): boolean | null {\n  const userAttributes = user.getAttributes();\n  const conditionMatch = condition.match;\n  if (typeof conditionMatch !== 'undefined' && MATCH_TYPES.indexOf(conditionMatch) === -1) {\n    logger.warn(LOG_MESSAGES.UNKNOWN_MATCH_TYPE, MODULE_NAME, JSON.stringify(condition));\n    return null;\n  }\n\n  const attributeKey = condition.name;\n  if (!userAttributes.hasOwnProperty(attributeKey) && conditionMatch != EXISTS_MATCH_TYPE) {\n    logger.debug(\n      LOG_MESSAGES.MISSING_ATTRIBUTE_VALUE, MODULE_NAME, JSON.stringify(condition), attributeKey\n    );\n    return null;\n  }\n\n  let evaluatorForMatch;\n  if (!conditionMatch) {\n    evaluatorForMatch = exactEvaluator;\n  } else {\n    evaluatorForMatch = EVALUATORS_BY_MATCH_TYPE[conditionMatch] || exactEvaluator;\n  }\n\n  return evaluatorForMatch(condition, user);\n}\n\n/**\n * Returns true if the value is valid for exact conditions. Valid values include\n * strings, booleans, and numbers that aren't NaN, -Infinity, or Infinity.\n * @param value\n * @returns {boolean}\n */\nfunction isValueTypeValidForExactConditions(value: unknown): boolean {\n  return typeof value === 'string' || typeof value === 'boolean' || fns.isNumber(value);\n}\n\n/**\n * Evaluate the given exact match condition for the given user attributes\n * @param  {Condition}              condition\n * @param  {OptimizelyUserContext}  user\n * @return  {?boolean}              true if the user attribute value is equal (===) to the condition value,\n *                                  false if the user attribute value is not equal (!==) to the condition value,\n *                                  null if the condition value or user attribute value has an invalid type, or\n *                                  if there is a mismatch between the user attribute type and the condition value\n *                                  type\n */\nfunction exactEvaluator(condition: Condition, user: OptimizelyUserContext): boolean | null {\n  const userAttributes = user.getAttributes();\n  const conditionValue = condition.value;\n  const conditionValueType = typeof conditionValue;\n  const conditionName = condition.name;\n  const userValue = userAttributes[conditionName];\n  const userValueType = typeof userValue;\n\n  if (\n    !isValueTypeValidForExactConditions(conditionValue) ||\n    (fns.isNumber(conditionValue) && !fns.isSafeInteger(conditionValue))\n  ) {\n    logger.warn(\n      LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME, JSON.stringify(condition)\n    );\n    return null;\n  }\n\n  if (userValue === null) {\n    logger.debug(\n      LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME, JSON.stringify(condition), conditionName\n    );\n    return null;\n  }\n\n  if (!isValueTypeValidForExactConditions(userValue) || conditionValueType !== userValueType) {\n    logger.warn(\n      LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME, JSON.stringify(condition), userValueType, conditionName\n    );\n    return null;\n  }\n\n  if (fns.isNumber(userValue) && !fns.isSafeInteger(userValue)) {\n    logger.warn(\n      LOG_MESSAGES.OUT_OF_BOUNDS, MODULE_NAME, JSON.stringify(condition), conditionName\n    );\n    return null;\n  }\n\n  return conditionValue === userValue;\n}\n\n/**\n * Evaluate the given exists match condition for the given user attributes\n * @param  {Condition}              condition\n * @param  {OptimizelyUserContext}  user\n * @returns {boolean}               true if both:\n *                                    1) the user attributes have a value for the given condition, and\n *                                    2) the user attribute value is neither null nor undefined\n *                                  Returns false otherwise\n */\nfunction existsEvaluator(condition: Condition, user: OptimizelyUserContext): boolean {\n  const userAttributes = user.getAttributes();\n  const userValue = userAttributes[condition.name];\n  return typeof userValue !== 'undefined' && userValue !== null;\n}\n\n/**\n * Validate user and condition values\n * @param  {Condition}              condition\n * @param  {OptimizelyUserContext}  user\n * @returns {?boolean}              true if values are valid,\n *                                  false if values are not valid\n */\nfunction validateValuesForNumericCondition(condition: Condition, user: OptimizelyUserContext): boolean {\n  const userAttributes = user.getAttributes();\n  const conditionName = condition.name;\n  const userValue = userAttributes[conditionName];\n  const userValueType = typeof userValue;\n  const conditionValue = condition.value;\n\n  if (conditionValue === null || !fns.isSafeInteger(conditionValue)) {\n    logger.warn(\n      LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME, JSON.stringify(condition)\n    );\n    return false;\n  }\n\n  if (userValue === null) {\n    logger.debug(\n      LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME, JSON.stringify(condition), conditionName\n    );\n    return false;\n  }\n\n  if (!fns.isNumber(userValue)) {\n    logger.warn(\n      LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME, JSON.stringify(condition), userValueType, conditionName\n    );\n    return false;\n  }\n\n  if (!fns.isSafeInteger(userValue)) {\n    logger.warn(\n      LOG_MESSAGES.OUT_OF_BOUNDS, MODULE_NAME, JSON.stringify(condition), conditionName\n    );\n    return false;\n  }\n  return true;\n}\n\n/**\n * Evaluate the given greater than match condition for the given user attributes\n * @param  {Condition}              condition\n * @param  {OptimizelyUserContext}  user\n * @returns {?boolean}              true if the user attribute value is greater than the condition value,\n *                                  false if the user attribute value is less than or equal to the condition value,\n *                                  null if the condition value isn't a number or the user attribute value\n *                                  isn't a number\n */\nfunction greaterThanEvaluator(condition: Condition, user: OptimizelyUserContext): boolean | null {\n  const userAttributes = user.getAttributes();\n  const userValue = userAttributes[condition.name];\n  const conditionValue = condition.value;\n\n  if (!validateValuesForNumericCondition(condition, user) || conditionValue === null) {\n    return null;\n  }\n  return userValue! > conditionValue;\n}\n\n/**\n * Evaluate the given greater or equal than match condition for the given user attributes\n * @param  {Condition}              condition\n * @param  {OptimizelyUserContext}  user\n * @returns {?Boolean}              true if the user attribute value is greater or equal than the condition value,\n *                                  false if the user attribute value is less than to the condition value,\n *                                  null if the condition value isn't a number or the user attribute value isn't a\n *                                  number\n */\nfunction greaterThanOrEqualEvaluator(condition: Condition, user: OptimizelyUserContext): boolean | null {\n  const userAttributes = user.getAttributes();\n  const userValue = userAttributes[condition.name];\n  const conditionValue = condition.value;\n\n  if (!validateValuesForNumericCondition(condition, user) || conditionValue === null) {\n    return null;\n  }\n\n  return userValue! >= conditionValue;\n}\n\n/**\n * Evaluate the given less than match condition for the given user attributes\n * @param  {Condition}              condition\n * @param  {OptimizelyUserContext}  user\n * @returns {?boolean}              true if the user attribute value is less than the condition value,\n *                                  false if the user attribute value is greater than or equal to the condition value,\n *                                  null if the condition value isn't a number or the user attribute value isn't a\n *                                  number\n */\nfunction lessThanEvaluator(condition: Condition, user: OptimizelyUserContext): boolean | null {\n  const userAttributes = user.getAttributes();\n  const userValue = userAttributes[condition.name];\n  const conditionValue = condition.value;\n\n  if (!validateValuesForNumericCondition(condition, user) || conditionValue === null) {\n    return null;\n  }\n\n  return userValue! < conditionValue;\n}\n\n/**\n * Evaluate the given less or equal than match condition for the given user attributes\n * @param  {Condition}              condition\n * @param  {OptimizelyUserContext}  user\n * @returns {?Boolean}              true if the user attribute value is less or equal than the condition value,\n *                                  false if the user attribute value is greater than to the condition value,\n *                                  null if the condition value isn't a number or the user attribute value isn't a\n *                                  number\n */\nfunction lessThanOrEqualEvaluator(condition: Condition, user: OptimizelyUserContext): boolean | null {\n  const userAttributes = user.getAttributes();\n  const userValue = userAttributes[condition.name];\n  const conditionValue = condition.value;\n\n  if (!validateValuesForNumericCondition(condition, user) || conditionValue === null) {\n    return null;\n  }\n\n  return userValue! <= conditionValue;\n}\n\n/**\n * Evaluate the given substring match condition for the given user attributes\n * @param  {Condition}              condition\n * @param  {OptimizelyUserContext}  user\n * @returns {?Boolean}              true if the condition value is a substring of the user attribute value,\n *                                  false if the condition value is not a substring of the user attribute value,\n *                                  null if the condition value isn't a string or the user attribute value\n *                                  isn't a string\n */\nfunction substringEvaluator(condition: Condition, user: OptimizelyUserContext): boolean | null {\n  const userAttributes = user.getAttributes();\n  const conditionName = condition.name;\n  const userValue = userAttributes[condition.name];\n  const userValueType = typeof userValue;\n  const conditionValue = condition.value;\n\n  if (typeof conditionValue !== 'string') {\n    logger.warn(\n      LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME, JSON.stringify(condition)\n    );\n    return null;\n  }\n\n  if (userValue === null) {\n    logger.debug(\n      LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME, JSON.stringify(condition), conditionName\n    );\n    return null;\n  }\n\n  if (typeof userValue !== 'string') {\n    logger.warn(\n      LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME, JSON.stringify(condition), userValueType, conditionName\n    );\n    return null;\n  }\n\n  return userValue.indexOf(conditionValue) !== -1;\n}\n\n/**\n * Evaluate the given semantic version match condition for the given user attributes\n * @param  {Condition}              condition\n * @param  {OptimizelyUserContext}  user\n * @returns {?number}               returns compareVersion result\n *                                  null if the user attribute version has an invalid type\n */\nfunction evaluateSemanticVersion(condition: Condition, user: OptimizelyUserContext): number | null {\n  const userAttributes = user.getAttributes();\n  const conditionName = condition.name;\n  const userValue = userAttributes[conditionName];\n  const userValueType = typeof userValue;\n  const conditionValue = condition.value;\n\n  if (typeof conditionValue !== 'string') {\n    logger.warn(\n      LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME, JSON.stringify(condition)\n    );\n    return null;\n  }\n\n  if (userValue === null) {\n    logger.debug(\n      LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME, JSON.stringify(condition), conditionName\n    );\n    return null;\n  }\n\n  if (typeof userValue !== 'string') {\n    logger.warn(\n      LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME, JSON.stringify(condition), userValueType, conditionName\n    );\n    return null;\n  }\n\n  return compareVersion(conditionValue, userValue);\n}\n\n/**\n * Evaluate the given version match condition for the given user attributes\n * @param  {Condition}              condition\n * @param  {OptimizelyUserContext}  user\n * @returns {?Boolean}              true if the user attribute version is equal (===) to the condition version,\n *                                  false if the user attribute version is not equal (!==) to the condition version,\n *                                  null if the user attribute version has an invalid type\n */\nfunction semverEqualEvaluator(condition: Condition, user: OptimizelyUserContext): boolean | null {\n  const result = evaluateSemanticVersion(condition, user);\n  if (result === null) {\n    return null;\n  }\n  return result === 0;\n}\n\n/**\n * Evaluate the given version match condition for the given user attributes\n * @param  {Condition}              condition\n * @param  {OptimizelyUserContext}  user\n * @returns {?Boolean}              true if the user attribute version is greater (>) than the condition version,\n *                                  false if the user attribute version is not greater than the condition version,\n *                                  null if the user attribute version has an invalid type\n */\nfunction semverGreaterThanEvaluator(condition: Condition, user: OptimizelyUserContext): boolean | null {\n  const result = evaluateSemanticVersion(condition, user);\n  if (result === null) {\n    return null;\n  }\n  return result > 0;\n}\n\n/**\n * Evaluate the given version match condition for the given user attributes\n * @param  {Condition}              condition\n * @param  {OptimizelyUserContext}  user\n * @returns {?Boolean}              true if the user attribute version is less (<) than the condition version,\n *                                  false if the user attribute version is not less than the condition version,\n *                                  null if the user attribute version has an invalid type\n */\nfunction semverLessThanEvaluator(condition: Condition, user: OptimizelyUserContext): boolean | null {\n  const result = evaluateSemanticVersion(condition, user);\n  if (result === null) {\n    return null;\n  }\n  return result < 0;\n}\n\n/**\n * Evaluate the given version match condition for the given user attributes\n * @param  {Condition}              condition\n * @param  {OptimizelyUserContext}  user\n * @returns {?Boolean}              true if the user attribute version is greater than or equal (>=) to the condition version,\n *                                  false if the user attribute version is not greater than or equal to the condition version,\n *                                  null if the user attribute version has an invalid type\n */\nfunction semverGreaterThanOrEqualEvaluator(condition: Condition, user: OptimizelyUserContext): boolean | null {\n  const result = evaluateSemanticVersion(condition, user);\n  if (result === null) {\n    return null;\n  }\n  return result >= 0;\n}\n\n/**\n * Evaluate the given version match condition for the given user attributes\n * @param  {Condition}              condition\n * @param  {OptimizelyUserContext}  user\n * @returns {?Boolean}              true if the user attribute version is less than or equal (<=) to the condition version,\n *                                  false if the user attribute version is not less than or equal to the condition version,\n *                                  null if the user attribute version has an invalid type\n */\nfunction semverLessThanOrEqualEvaluator(condition: Condition, user: OptimizelyUserContext): boolean | null {\n  const result = evaluateSemanticVersion(condition, user);\n  if (result === null) {\n    return null;\n  }\n  return result <= 0;\n\n}\n","/****************************************************************************\n * Copyright 2022 Optimizely, Inc. and contributors              *\n *                                                                          *\n * Licensed under the Apache License, Version 2.0 (the \"License\");          *\n * you may not use this file except in compliance with the License.         *\n * You may obtain a copy of the License at                                  *\n *                                                                          *\n *    http://www.apache.org/licenses/LICENSE-2.0                            *\n *                                                                          *\n * Unless required by applicable law or agreed to in writing, software      *\n * distributed under the License is distributed on an \"AS IS\" BASIS,        *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *\n * See the License for the specific language governing permissions and      *\n * limitations under the License.                                           *\n ***************************************************************************/\nimport { getLogger } from '../../../modules/logging';\nimport { Condition, OptimizelyUserContext } from '../../../shared_types';\n\nimport { LOG_MESSAGES } from '../../../utils/enums';\n\nconst MODULE_NAME = 'ODP_SEGMENT_CONDITION_EVALUATOR';\n\nconst logger = getLogger();\n\nconst QUALIFIED_MATCH_TYPE = 'qualified';\n\nconst MATCH_TYPES = [\n  QUALIFIED_MATCH_TYPE,\n];\n\ntype ConditionEvaluator = (condition: Condition, user: OptimizelyUserContext) => boolean | null;\n\nconst EVALUATORS_BY_MATCH_TYPE: { [conditionType: string]: ConditionEvaluator | undefined } = {};\nEVALUATORS_BY_MATCH_TYPE[QUALIFIED_MATCH_TYPE] = qualifiedEvaluator;\n\n/**\n * Given a custom attribute audience condition and user attributes, evaluate the\n * condition against the attributes.\n * @param  {Condition}        condition\n * @param  {OptimizelyUserContext} user\n * @return {?boolean}         true/false if the given user attributes match/don't match the given condition,\n *                            null if the given user attributes and condition can't be evaluated\n * TODO: Change to accept and object with named properties\n */\nexport function evaluate(condition: Condition, user: OptimizelyUserContext): boolean | null {\n  const conditionMatch = condition.match;\n  if (typeof conditionMatch !== 'undefined' && MATCH_TYPES.indexOf(conditionMatch) === -1) {\n    logger.warn(LOG_MESSAGES.UNKNOWN_MATCH_TYPE, MODULE_NAME, JSON.stringify(condition));\n    return null;\n  }\n\n  let evaluator;\n  if (!conditionMatch) {\n    evaluator = qualifiedEvaluator;\n  } else {\n    evaluator = EVALUATORS_BY_MATCH_TYPE[conditionMatch] || qualifiedEvaluator;\n  }\n\n  return evaluator(condition, user);\n}\n\nfunction qualifiedEvaluator(condition: Condition, user: OptimizelyUserContext): boolean {\n  return user.isQualifiedFor(condition.value as string);\n}\n","/**\n * Copyright 2016, 2018-2022, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getLogger } from '../../modules/logging';\n\nimport fns from '../../utils/fns';\nimport {\n  LOG_LEVEL,\n  LOG_MESSAGES,\n  ERROR_MESSAGES,\n} from '../../utils/enums';\nimport * as conditionTreeEvaluator from '../condition_tree_evaluator';\nimport * as customAttributeConditionEvaluator from '../custom_attribute_condition_evaluator';\nimport * as odpSegmentsConditionEvaluator from './odp_segment_condition_evaluator';\nimport { Audience, Condition, OptimizelyUserContext } from '../../shared_types';\n\nconst logger = getLogger();\nconst MODULE_NAME = 'AUDIENCE_EVALUATOR';\n\nexport class AudienceEvaluator {\n  private typeToEvaluatorMap: {\n    [key: string]: {\n      [key: string]: (condition: Condition, user: OptimizelyUserContext) => boolean | null\n    };\n  };\n\n  /**\n   * Construct an instance of AudienceEvaluator with given options\n   * @param {Object=} UNSTABLE_conditionEvaluators     A map of condition evaluators provided by the consumer. This enables matching\n   *                                                   condition types which are not supported natively by the SDK. Note that built in\n   *                                                   Optimizely evaluators cannot be overridden.\n   * @constructor\n   */\n  constructor(UNSTABLE_conditionEvaluators: unknown) {\n    this.typeToEvaluatorMap = fns.assign({}, UNSTABLE_conditionEvaluators, {\n      custom_attribute: customAttributeConditionEvaluator,\n      third_party_dimension: odpSegmentsConditionEvaluator,\n    });\n  }\n\n  /**\n   * Determine if the given user attributes satisfy the given audience conditions\n   * @param  {Array<string|string[]}        audienceConditions    Audience conditions to match the user attributes against - can be an array\n   *                                                              of audience IDs, a nested array of conditions, or a single leaf condition.\n   *                                                              Examples: [\"5\", \"6\"], [\"and\", [\"or\", \"1\", \"2\"], \"3\"], \"1\"\n   * @param  {[id: string]: Audience}       audiencesById         Object providing access to full audience objects for audience IDs\n   *                                                              contained in audienceConditions. Keys should be audience IDs, values\n   *                                                              should be full audience objects with conditions properties\n   * @param  {OptimizelyUserContext}        userAttributes        User context which contains the attributes and segments which will be used in \n   *                                                              determining if audience conditions are met.\n   * @return {boolean}                                            true if the user attributes match the given audience conditions, false\n   *                                                              otherwise\n   */\n  evaluate(\n    audienceConditions: Array<string | string[]>,\n    audiencesById: { [id: string]: Audience },\n    user: OptimizelyUserContext,\n  ): boolean {\n    // if there are no audiences, return true because that means ALL users are included in the experiment\n    if (!audienceConditions || audienceConditions.length === 0) {\n      return true;\n    }\n\n    const evaluateAudience = (audienceId: string) => {\n      const audience = audiencesById[audienceId];\n      if (audience) {\n        logger.log(\n          LOG_LEVEL.DEBUG,\n          LOG_MESSAGES.EVALUATING_AUDIENCE, MODULE_NAME, audienceId, JSON.stringify(audience.conditions)\n        );\n        const result = conditionTreeEvaluator.evaluate(\n          audience.conditions as unknown[] ,\n          this.evaluateConditionWithUserAttributes.bind(this, user)\n        );\n        const resultText = result === null ? 'UNKNOWN' : result.toString().toUpperCase();\n        logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.AUDIENCE_EVALUATION_RESULT, MODULE_NAME, audienceId, resultText);\n        return result;\n      }\n      return null;\n    };\n\n    return !!conditionTreeEvaluator.evaluate(audienceConditions, evaluateAudience);\n  }\n\n  /**\n   * Wrapper around evaluator.evaluate that is passed to the conditionTreeEvaluator.\n   * Evaluates the condition provided given the user attributes if an evaluator has been defined for the condition type.\n   * @param  {OptimizelyUserContext}  user             Optimizely user context containing attributes and segments\n   * @param  {Condition}              condition        A single condition object to evaluate.\n   * @return {boolean|null}                            true if the condition is satisfied, null if a matcher is not found.\n   */\n  evaluateConditionWithUserAttributes(user: OptimizelyUserContext, condition: Condition): boolean | null {\n    const evaluator = this.typeToEvaluatorMap[condition.type];\n    if (!evaluator) {\n      logger.log(LOG_LEVEL.WARNING, LOG_MESSAGES.UNKNOWN_CONDITION_TYPE, MODULE_NAME, JSON.stringify(condition));\n      return null;\n    }\n    try {\n      return evaluator.evaluate(condition, user);\n    } catch (err: any) {\n      logger.log(\n        LOG_LEVEL.ERROR,\n        ERROR_MESSAGES.CONDITION_EVALUATOR_ERROR, MODULE_NAME, condition.type, err.message\n      );\n    }\n\n    return null;\n  }\n}\n\nexport default AudienceEvaluator;\n\nexport const createAudienceEvaluator = function(UNSTABLE_conditionEvaluators: unknown): AudienceEvaluator {\n  return new AudienceEvaluator(UNSTABLE_conditionEvaluators);\n};\n","/**\n * Copyright 2018, 2020, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Validates provided value is a non-empty string\n * @param  {unknown}  input\n * @return {boolean}  true for non-empty string, false otherwise\n */\nexport function validate(input: unknown): boolean {\n  return typeof input === 'string' && input !== '';\n}\n","/****************************************************************************\n * Copyright 2017-2022 Optimizely, Inc. and contributors                    *\n *                                                                          *\n * Licensed under the Apache License, Version 2.0 (the \"License\");          *\n * you may not use this file except in compliance with the License.         *\n * You may obtain a copy of the License at                                  *\n *                                                                          *\n *    http://www.apache.org/licenses/LICENSE-2.0                            *\n *                                                                          *\n * Unless required by applicable law or agreed to in writing, software      *\n * distributed under the License is distributed on an \"AS IS\" BASIS,        *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *\n * See the License for the specific language governing permissions and      *\n * limitations under the License.                                           *\n ***************************************************************************/\nimport { LogHandler } from '../../modules/logging';\nimport { sprintf } from '../../utils/fns';\n\nimport fns from '../../utils/fns';\nimport { bucket } from '../bucketer';\nimport {\n  AUDIENCE_EVALUATION_TYPES,\n  CONTROL_ATTRIBUTES,\n  DECISION_SOURCES,\n  ERROR_MESSAGES,\n  LOG_LEVEL,\n  LOG_MESSAGES,\n} from '../../utils/enums';\nimport {\n  getAudiencesById,\n  getExperimentAudienceConditions,\n  getExperimentFromId,\n  getExperimentFromKey,\n  getFlagVariationByKey,\n  getTrafficAllocation,\n  getVariationIdFromExperimentAndVariationKey,\n  getVariationFromId,\n  getVariationKeyFromId,\n  isActive,\n  ProjectConfig,\n} from '../project_config';\nimport { AudienceEvaluator, createAudienceEvaluator } from '../audience_evaluator';\nimport * as stringValidator from '../../utils/string_value_validator';\nimport {\n  BucketerParams,\n  DecisionResponse,\n  Experiment,\n  ExperimentBucketMap,\n  FeatureFlag,\n  OptimizelyDecideOption,\n  OptimizelyUserContext,\n  UserAttributes,\n  UserProfile,\n  UserProfileService,\n  Variation,\n} from '../../shared_types';\n\nconst MODULE_NAME = 'DECISION_SERVICE';\n\nexport interface DecisionObj {\n  experiment: Experiment | null;\n  variation: Variation | null;\n  decisionSource: string;\n}\n\ninterface DecisionServiceOptions {\n  userProfileService: UserProfileService | null;\n  logger: LogHandler;\n  UNSTABLE_conditionEvaluators: unknown;\n}\n\ninterface DeliveryRuleResponse<T, K> extends DecisionResponse<T> {\n  skipToEveryoneElse: K;\n}\n\n/**\n * Optimizely's decision service that determines which variation of an experiment the user will be allocated to.\n *\n * The decision service contains all logic around how a user decision is made. This includes all of the following (in order):\n *   1. Checking experiment status\n *   2. Checking forced bucketing\n *   3. Checking whitelisting\n *   4. Checking user profile service for past bucketing decisions (sticky bucketing)\n *   5. Checking audience targeting\n *   6. Using Murmurhash3 to bucket the user.\n *\n * @constructor\n * @param   {DecisionServiceOptions}      options\n * @returns {DecisionService}\n */\nexport class DecisionService {\n  private logger: LogHandler;\n  private audienceEvaluator: AudienceEvaluator;\n  private forcedVariationMap: { [key: string]: { [id: string]: string } };\n  private userProfileService: UserProfileService | null;\n\n  constructor(options: DecisionServiceOptions) {\n    this.audienceEvaluator = createAudienceEvaluator(options.UNSTABLE_conditionEvaluators);\n    this.forcedVariationMap = {};\n    this.logger = options.logger;\n    this.userProfileService = options.userProfileService || null;\n  }\n\n  /**\n   * Gets variation where visitor will be bucketed.\n   * @param  {ProjectConfig}                          configObj         The parsed project configuration object\n   * @param  {Experiment}                             experiment\n   * @param  {OptimizelyUserContext}                  user              A user context\n   * @param  {[key: string]: boolean}                 options           Optional map of decide options\n   * @return {DecisionResponse<string|null>}          DecisionResponse containing the variation the user is bucketed into\n   *                                                                    and the decide reasons.\n   */\n  getVariation(\n    configObj: ProjectConfig,\n    experiment: Experiment,\n    user: OptimizelyUserContext,\n    options: { [key: string]: boolean } = {}\n  ): DecisionResponse<string | null> {\n    const userId = user.getUserId();\n    const attributes = user.getAttributes();\n    // by default, the bucketing ID should be the user ID\n    const bucketingId = this.getBucketingId(userId, attributes);\n    const decideReasons: (string | number)[][] = [];\n    const experimentKey = experiment.key;\n    if (!this.checkIfExperimentIsActive(configObj, experimentKey)) {\n      this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.EXPERIMENT_NOT_RUNNING, MODULE_NAME, experimentKey);\n      decideReasons.push([LOG_MESSAGES.EXPERIMENT_NOT_RUNNING, MODULE_NAME, experimentKey]);\n      return {\n        result: null,\n        reasons: decideReasons,\n      };\n    }\n    const decisionForcedVariation = this.getForcedVariation(configObj, experimentKey, userId);\n    decideReasons.push(...decisionForcedVariation.reasons);\n    const forcedVariationKey = decisionForcedVariation.result;\n\n    if (forcedVariationKey) {\n      return {\n        result: forcedVariationKey,\n        reasons: decideReasons,\n      };\n    }\n    const decisionWhitelistedVariation = this.getWhitelistedVariation(experiment, userId);\n    decideReasons.push(...decisionWhitelistedVariation.reasons);\n    let variation = decisionWhitelistedVariation.result;\n    if (variation) {\n      return {\n        result: variation.key,\n        reasons: decideReasons,\n      };\n    }\n\n    const shouldIgnoreUPS = options[OptimizelyDecideOption.IGNORE_USER_PROFILE_SERVICE];\n    const experimentBucketMap = this.resolveExperimentBucketMap(userId, attributes);\n\n    // check for sticky bucketing if decide options do not include shouldIgnoreUPS\n    if (!shouldIgnoreUPS) {\n      variation = this.getStoredVariation(configObj, experiment, userId, experimentBucketMap);\n      if (variation) {\n        this.logger.log(\n          LOG_LEVEL.INFO,\n          LOG_MESSAGES.RETURNING_STORED_VARIATION,\n          MODULE_NAME,\n          variation.key,\n          experimentKey,\n          userId,\n        );\n        decideReasons.push([\n          LOG_MESSAGES.RETURNING_STORED_VARIATION,\n          MODULE_NAME,\n          variation.key,\n          experimentKey,\n          userId,\n        ]);\n        return {\n          result: variation.key,\n          reasons: decideReasons,\n        };\n      }\n    }\n\n    // Perform regular targeting and bucketing\n    const decisionifUserIsInAudience = this.checkIfUserIsInAudience(\n      configObj,\n      experiment,\n      AUDIENCE_EVALUATION_TYPES.EXPERIMENT,\n      user,\n      ''\n    );\n    decideReasons.push(...decisionifUserIsInAudience.reasons);\n    if (!decisionifUserIsInAudience.result) {\n      this.logger.log(\n        LOG_LEVEL.INFO,\n        LOG_MESSAGES.USER_NOT_IN_EXPERIMENT,\n        MODULE_NAME,\n        userId,\n        experimentKey,\n      );\n      decideReasons.push([\n        LOG_MESSAGES.USER_NOT_IN_EXPERIMENT,\n        MODULE_NAME,\n        userId,\n        experimentKey,\n      ]);\n      return {\n        result: null,\n        reasons: decideReasons,\n      };\n    }\n\n    const bucketerParams = this.buildBucketerParams(configObj, experiment, bucketingId, userId);\n    const decisionVariation = bucket(bucketerParams);\n    decideReasons.push(...decisionVariation.reasons);\n    const variationId = decisionVariation.result;\n    if (variationId) {\n      variation = configObj.variationIdMap[variationId];\n    }\n    if (!variation) {\n      this.logger.log(\n        LOG_LEVEL.DEBUG,\n        LOG_MESSAGES.USER_HAS_NO_VARIATION,\n        MODULE_NAME,\n        userId,\n        experimentKey,\n      );\n      decideReasons.push([\n        LOG_MESSAGES.USER_HAS_NO_VARIATION,\n        MODULE_NAME,\n        userId,\n        experimentKey,\n      ]);\n      return {\n        result: null,\n        reasons: decideReasons,\n      };\n    }\n\n    this.logger.log(\n      LOG_LEVEL.INFO,\n      LOG_MESSAGES.USER_HAS_VARIATION,\n      MODULE_NAME,\n      userId,\n      variation.key,\n      experimentKey,\n    );\n    decideReasons.push([\n      LOG_MESSAGES.USER_HAS_VARIATION,\n      MODULE_NAME,\n      userId,\n      variation.key,\n      experimentKey,\n    ]);\n    // persist bucketing if decide options do not include shouldIgnoreUPS\n    if (!shouldIgnoreUPS) {\n      this.saveUserProfile(experiment, variation, userId, experimentBucketMap);\n    }\n\n    return {\n      result: variation.key,\n      reasons: decideReasons,\n    };\n  }\n\n  /**\n   * Merges attributes from attributes[STICKY_BUCKETING_KEY] and userProfileService\n   * @param  {string}               userId\n   * @param  {UserAttributes}       attributes\n   * @return {ExperimentBucketMap}  finalized copy of experiment_bucket_map\n   */\n  private resolveExperimentBucketMap(\n    userId: string,\n    attributes?: UserAttributes\n  ): ExperimentBucketMap {\n    attributes = attributes || {};\n\n    const userProfile = this.getUserProfile(userId) || {} as UserProfile;\n    const attributeExperimentBucketMap = attributes[CONTROL_ATTRIBUTES.STICKY_BUCKETING_KEY];\n    return fns.assign({}, userProfile.experiment_bucket_map, attributeExperimentBucketMap);\n  }\n\n  /**\n   * Checks whether the experiment is running\n   * @param  {ProjectConfig}  configObj     The parsed project configuration object\n   * @param  {string}         experimentKey Key of experiment being validated\n   * @return {boolean}        True if experiment is running\n   */\n  private checkIfExperimentIsActive(configObj: ProjectConfig, experimentKey: string): boolean {\n    return isActive(configObj, experimentKey);\n  }\n\n  /**\n   * Checks if user is whitelisted into any variation and return that variation if so\n   * @param  {Experiment}                                 experiment\n   * @param  {string}                                     userId\n   * @return {DecisionResponse<Variation|null>}           DecisionResponse containing the forced variation if it exists\n   *                                                      or user ID and the decide reasons.\n   */\n  private getWhitelistedVariation(\n    experiment: Experiment,\n    userId: string\n  ): DecisionResponse<Variation | null> {\n    const decideReasons: (string | number)[][] = [];\n    if (experiment.forcedVariations && experiment.forcedVariations.hasOwnProperty(userId)) {\n      const forcedVariationKey = experiment.forcedVariations[userId];\n      if (experiment.variationKeyMap.hasOwnProperty(forcedVariationKey)) {\n        this.logger.log(\n          LOG_LEVEL.INFO,\n          LOG_MESSAGES.USER_FORCED_IN_VARIATION,\n          MODULE_NAME,\n          userId,\n          forcedVariationKey,\n        );\n        decideReasons.push([\n          LOG_MESSAGES.USER_FORCED_IN_VARIATION,\n          MODULE_NAME,\n          userId,\n          forcedVariationKey,\n        ]);\n        return {\n          result: experiment.variationKeyMap[forcedVariationKey],\n          reasons: decideReasons,\n        };\n      } else {\n        this.logger.log(\n          LOG_LEVEL.ERROR,\n          LOG_MESSAGES.FORCED_BUCKETING_FAILED,\n          MODULE_NAME,\n          forcedVariationKey,\n          userId,\n        );\n        decideReasons.push([\n          LOG_MESSAGES.FORCED_BUCKETING_FAILED,\n          MODULE_NAME,\n          forcedVariationKey,\n          userId,\n        ]);\n        return {\n          result: null,\n          reasons: decideReasons,\n        };\n      }\n    }\n\n    return {\n      result: null,\n      reasons: decideReasons,\n    };\n  }\n\n  /**\n   * Checks whether the user is included in experiment audience\n   * @param  {ProjectConfig}                configObj            The parsed project configuration object\n   * @param  {string}                       experimentKey        Key of experiment being validated\n   * @param  {string}                       evaluationAttribute  String representing experiment key or rule\n   * @param  {string}                       userId               ID of user\n   * @param  {UserAttributes}               attributes           Optional parameter for user's attributes\n   * @param  {string}                       loggingKey           String representing experiment key or rollout rule. To be used in log messages only.\n   * @return {DecisionResponse<boolean>}    DecisionResponse     DecisionResponse containing result true if user meets audience conditions and\n   *                                                             the decide reasons.\n   */\n  private checkIfUserIsInAudience(\n    configObj: ProjectConfig,\n    experiment: Experiment,\n    evaluationAttribute: string,\n    user: OptimizelyUserContext,\n    loggingKey?: string | number,\n  ): DecisionResponse<boolean> {\n    const decideReasons: (string | number)[][] = [];\n    const experimentAudienceConditions = getExperimentAudienceConditions(configObj, experiment.id);\n    const audiencesById = getAudiencesById(configObj);\n    this.logger.log(\n      LOG_LEVEL.DEBUG,\n      LOG_MESSAGES.EVALUATING_AUDIENCES_COMBINED,\n      MODULE_NAME,\n      evaluationAttribute,\n      loggingKey || experiment.key,\n      JSON.stringify(experimentAudienceConditions),\n    );\n    decideReasons.push([\n      LOG_MESSAGES.EVALUATING_AUDIENCES_COMBINED,\n      MODULE_NAME,\n      evaluationAttribute,\n      loggingKey || experiment.key,\n      JSON.stringify(experimentAudienceConditions),\n    ]);\n    const result = this.audienceEvaluator.evaluate(experimentAudienceConditions, audiencesById, user);\n    this.logger.log(\n      LOG_LEVEL.INFO,\n      LOG_MESSAGES.AUDIENCE_EVALUATION_RESULT_COMBINED,\n      MODULE_NAME,\n      evaluationAttribute,\n      loggingKey || experiment.key,\n      result.toString().toUpperCase(),\n    );\n    decideReasons.push([\n      LOG_MESSAGES.AUDIENCE_EVALUATION_RESULT_COMBINED,\n      MODULE_NAME,\n      evaluationAttribute,\n      loggingKey || experiment.key,\n      result.toString().toUpperCase(),\n    ]);\n\n    return {\n      result: result,\n      reasons: decideReasons,\n    };\n  }\n\n  /**\n   * Given an experiment key and user ID, returns params used in bucketer call\n   * @param  {ProjectConfig}         configObj     The parsed project configuration object\n   * @param  {string}                experimentKey Experiment key used for bucketer\n   * @param  {string}                bucketingId   ID to bucket user into\n   * @param  {string}                userId        ID of user to be bucketed\n   * @return {BucketerParams}\n   */\n  private buildBucketerParams(\n    configObj: ProjectConfig,\n    experiment: Experiment,\n    bucketingId: string,\n    userId: string\n  ): BucketerParams {\n    return {\n      bucketingId,\n      experimentId: experiment.id,\n      experimentKey: experiment.key,\n      experimentIdMap: configObj.experimentIdMap,\n      experimentKeyMap: configObj.experimentKeyMap,\n      groupIdMap: configObj.groupIdMap,\n      logger: this.logger,\n      trafficAllocationConfig: getTrafficAllocation(configObj, experiment.id),\n      userId,\n      variationIdMap: configObj.variationIdMap,\n    }\n  }\n\n  /**\n   * Pull the stored variation out of the experimentBucketMap for an experiment/userId\n   * @param  {ProjectConfig}        configObj            The parsed project configuration object\n   * @param  {Experiment}           experiment\n   * @param  {string}               userId\n   * @param  {ExperimentBucketMap}  experimentBucketMap  mapping experiment => { variation_id: <variationId> }\n   * @return {Variation|null}       the stored variation or null if the user profile does not have one for the given experiment\n   */\n  private getStoredVariation(\n    configObj: ProjectConfig,\n    experiment: Experiment,\n    userId: string,\n    experimentBucketMap: ExperimentBucketMap\n  ): Variation | null {\n    if (experimentBucketMap.hasOwnProperty(experiment.id)) {\n      const decision = experimentBucketMap[experiment.id];\n      const variationId = decision.variation_id;\n      if (configObj.variationIdMap.hasOwnProperty(variationId)) {\n        return configObj.variationIdMap[decision.variation_id];\n      } else {\n        this.logger.log(\n          LOG_LEVEL.INFO,\n          LOG_MESSAGES.SAVED_VARIATION_NOT_FOUND,\n          MODULE_NAME, userId,\n          variationId,\n          experiment.key,\n        );\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Get the user profile with the given user ID\n   * @param  {string} userId\n   * @return {UserProfile|null} the stored user profile or null if one isn't found\n   */\n  private getUserProfile(userId: string): UserProfile | null {\n    const userProfile = {\n      user_id: userId,\n      experiment_bucket_map: {},\n    };\n\n    if (!this.userProfileService) {\n      return userProfile;\n    }\n\n    try {\n      return this.userProfileService.lookup(userId);\n    } catch (ex: any) {\n      this.logger.log(\n        LOG_LEVEL.ERROR,\n        ERROR_MESSAGES.USER_PROFILE_LOOKUP_ERROR,\n        MODULE_NAME,\n        userId,\n        ex.message,\n      );\n    }\n\n    return null;\n  }\n\n  /**\n   * Saves the bucketing decision to the user profile\n   * @param {Experiment}          experiment\n   * @param {Variation}           variation\n   * @param {string}              userId\n   * @param {ExperimentBucketMap} experimentBucketMap\n   */\n  private saveUserProfile(\n    experiment: Experiment,\n    variation: Variation,\n    userId: string,\n    experimentBucketMap: ExperimentBucketMap\n  ): void {\n    if (!this.userProfileService) {\n      return;\n    }\n\n    try {\n      experimentBucketMap[experiment.id] = {\n        variation_id: variation.id\n      };\n\n      this.userProfileService.save({\n        user_id: userId,\n        experiment_bucket_map: experimentBucketMap,\n      });\n\n      this.logger.log(\n        LOG_LEVEL.INFO,\n        LOG_MESSAGES.SAVED_VARIATION,\n        MODULE_NAME,\n        variation.key,\n        experiment.key,\n        userId,\n      );\n    } catch (ex: any) {\n      this.logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.USER_PROFILE_SAVE_ERROR, MODULE_NAME, userId, ex.message);\n    }\n  }\n\n  /**\n   * Given a feature, user ID, and attributes, returns a decision response containing \n   * an object representing a decision and decide reasons. If the user was bucketed into\n   * a variation for the given feature and attributes, the decision object will have variation and\n   * experiment properties (both objects), as well as a decisionSource property.\n   * decisionSource indicates whether the decision was due to a rollout or an\n   * experiment.\n   * @param   {ProjectConfig}               configObj         The parsed project configuration object\n   * @param   {FeatureFlag}                 feature           A feature flag object from project configuration\n   * @param   {OptimizelyUserContext}       user              A user context\n   * @param   {[key: string]: boolean}      options           Map of decide options\n   * @return  {DecisionResponse}            DecisionResponse  DecisionResponse containing an object with experiment, variation, and decisionSource\n   *                                                          properties and decide reasons. If the user was not bucketed into a variation, the variation\n   *                                                          property in decision object is null.\n   */\n  getVariationForFeature(\n    configObj: ProjectConfig,\n    feature: FeatureFlag,\n    user: OptimizelyUserContext,\n    options: { [key: string]: boolean } = {}\n  ): DecisionResponse<DecisionObj> {\n\n    const decideReasons: (string | number)[][] = [];\n    const decisionVariation = this.getVariationForFeatureExperiment(configObj, feature, user, options);\n    decideReasons.push(...decisionVariation.reasons);\n    const experimentDecision = decisionVariation.result;\n\n    if (experimentDecision.variation !== null) {\n      return {\n        result: experimentDecision,\n        reasons: decideReasons,\n      };\n    }\n\n    const decisionRolloutVariation = this.getVariationForRollout(configObj, feature, user);\n    decideReasons.push(...decisionRolloutVariation.reasons);\n    const rolloutDecision = decisionRolloutVariation.result;\n    const userId = user.getUserId();\n    if (rolloutDecision.variation) {\n      this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.USER_IN_ROLLOUT, MODULE_NAME, userId, feature.key);\n      decideReasons.push([LOG_MESSAGES.USER_IN_ROLLOUT, MODULE_NAME, userId, feature.key]);\n      return {\n        result: rolloutDecision,\n        reasons: decideReasons,\n      };\n    }\n\n    this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.USER_NOT_IN_ROLLOUT, MODULE_NAME, userId, feature.key);\n    decideReasons.push([LOG_MESSAGES.USER_NOT_IN_ROLLOUT, MODULE_NAME, userId, feature.key]);\n    return {\n      result: rolloutDecision,\n      reasons: decideReasons,\n    };\n  }\n\n  private getVariationForFeatureExperiment(\n    configObj: ProjectConfig,\n    feature: FeatureFlag,\n    user: OptimizelyUserContext,\n    options: { [key: string]: boolean } = {}\n  ): DecisionResponse<DecisionObj> {\n\n    const decideReasons: (string | number)[][] = [];\n    let variationKey = null;\n    let decisionVariation;\n    let index;\n    let variationForFeatureExperiment;\n\n    // Check if the feature flag is under an experiment and the the user is bucketed into one of these experiments\n    if (feature.experimentIds.length > 0) {\n      // Evaluate each experiment ID and return the first bucketed experiment variation\n      for (index = 0; index < feature.experimentIds.length; index++) {\n        const experiment = getExperimentFromId(configObj, feature.experimentIds[index], this.logger);\n        if (experiment) {\n          decisionVariation = this.getVariationFromExperimentRule(configObj, feature.key, experiment, user, options);\n          decideReasons.push(...decisionVariation.reasons);\n          variationKey = decisionVariation.result;\n          if (variationKey) {\n            let variation = null;\n            variation = experiment.variationKeyMap[variationKey];\n            if (!variation) {\n              variation = getFlagVariationByKey(configObj, feature.key, variationKey);\n            }\n            variationForFeatureExperiment = {\n              experiment: experiment,\n              variation: variation,\n              decisionSource: DECISION_SOURCES.FEATURE_TEST,\n            };\n\n            return {\n              result: variationForFeatureExperiment,\n              reasons: decideReasons,\n            }\n          }\n        }\n      }\n    } else {\n      this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.FEATURE_HAS_NO_EXPERIMENTS, MODULE_NAME, feature.key);\n      decideReasons.push([LOG_MESSAGES.FEATURE_HAS_NO_EXPERIMENTS, MODULE_NAME, feature.key]);\n    }\n\n    variationForFeatureExperiment = {\n      experiment: null,\n      variation: null,\n      decisionSource: DECISION_SOURCES.FEATURE_TEST,\n    };\n\n    return {\n      result: variationForFeatureExperiment,\n      reasons: decideReasons,\n    };\n  }\n\n  private getVariationForRollout(\n    configObj: ProjectConfig,\n    feature: FeatureFlag,\n    user: OptimizelyUserContext,\n  ): DecisionResponse<DecisionObj> {\n    const decideReasons: (string | number)[][] = [];\n    let decisionObj: DecisionObj;\n    if (!feature.rolloutId) {\n      this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.NO_ROLLOUT_EXISTS, MODULE_NAME, feature.key);\n      decideReasons.push([LOG_MESSAGES.NO_ROLLOUT_EXISTS, MODULE_NAME, feature.key]);\n      decisionObj = {\n        experiment: null,\n        variation: null,\n        decisionSource: DECISION_SOURCES.ROLLOUT,\n      };\n\n      return {\n        result: decisionObj,\n        reasons: decideReasons,\n      };\n    }\n\n    const rollout = configObj.rolloutIdMap[feature.rolloutId];\n    if (!rollout) {\n      this.logger.log(\n        LOG_LEVEL.ERROR,\n        ERROR_MESSAGES.INVALID_ROLLOUT_ID,\n        MODULE_NAME,\n        feature.rolloutId,\n        feature.key,\n      );\n      decideReasons.push([ERROR_MESSAGES.INVALID_ROLLOUT_ID, MODULE_NAME, feature.rolloutId, feature.key]);\n      decisionObj = {\n        experiment: null,\n        variation: null,\n        decisionSource: DECISION_SOURCES.ROLLOUT,\n      };\n      return {\n        result: decisionObj,\n        reasons: decideReasons,\n      };\n    }\n\n    const rolloutRules = rollout.experiments;\n    if (rolloutRules.length === 0) {\n      this.logger.log(\n        LOG_LEVEL.ERROR,\n        LOG_MESSAGES.ROLLOUT_HAS_NO_EXPERIMENTS,\n        MODULE_NAME,\n        feature.rolloutId,\n      );\n      decideReasons.push([LOG_MESSAGES.ROLLOUT_HAS_NO_EXPERIMENTS, MODULE_NAME, feature.rolloutId]);\n      decisionObj = {\n        experiment: null,\n        variation: null,\n        decisionSource: DECISION_SOURCES.ROLLOUT,\n      };\n      return {\n        result: decisionObj,\n        reasons: decideReasons,\n      };\n    }\n    let decisionVariation;\n    let skipToEveryoneElse;\n    let variation;\n    let rolloutRule;\n    let index = 0;\n    while (index < rolloutRules.length) {\n      decisionVariation = this.getVariationFromDeliveryRule(configObj, feature.key, rolloutRules, index, user);\n      decideReasons.push(...decisionVariation.reasons);\n      variation = decisionVariation.result;\n      skipToEveryoneElse = decisionVariation.skipToEveryoneElse;\n      if (variation) {\n        rolloutRule = configObj.experimentIdMap[rolloutRules[index].id];\n        decisionObj = {\n          experiment: rolloutRule,\n          variation: variation,\n          decisionSource: DECISION_SOURCES.ROLLOUT\n        };\n        return {\n          result: decisionObj,\n          reasons: decideReasons,\n        };\n      }\n      // the last rule is special for \"Everyone Else\"\n      index = skipToEveryoneElse ? (rolloutRules.length - 1) : (index + 1);\n    }\n\n    decisionObj = {\n      experiment: null,\n      variation: null,\n      decisionSource: DECISION_SOURCES.ROLLOUT,\n    };\n\n    return {\n      result: decisionObj,\n      reasons: decideReasons,\n    };\n  }\n\n  /**\n   * Get bucketing Id from user attributes.\n   * @param   {string}          userId\n   * @param   {UserAttributes}  attributes\n   * @returns {string}          Bucketing Id if it is a string type in attributes, user Id otherwise.\n   */\n  private getBucketingId(userId: string, attributes?: UserAttributes): string {\n    let bucketingId = userId;\n\n    // If the bucketing ID key is defined in attributes, than use that in place of the userID for the murmur hash key\n    if (\n      attributes != null &&\n      typeof attributes === 'object' &&\n      attributes.hasOwnProperty(CONTROL_ATTRIBUTES.BUCKETING_ID)\n    ) {\n      if (typeof attributes[CONTROL_ATTRIBUTES.BUCKETING_ID] === 'string') {\n        bucketingId = String(attributes[CONTROL_ATTRIBUTES.BUCKETING_ID]);\n        this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.VALID_BUCKETING_ID, MODULE_NAME, bucketingId);\n      } else {\n        this.logger.log(LOG_LEVEL.WARNING, LOG_MESSAGES.BUCKETING_ID_NOT_STRING, MODULE_NAME);\n      }\n    }\n\n    return bucketingId;\n  }\n\n  /**\n   * Finds a validated forced decision for specific flagKey and optional ruleKey.\n   * @param     {ProjectConfig}         config               A projectConfig.\n   * @param     {OptimizelyUserContext} user                 A Optimizely User Context.\n   * @param     {string}                flagKey              A flagKey.\n   * @param     {ruleKey}               ruleKey              A ruleKey (optional).\n   * @return    {DecisionResponse<Variation|null>}  DecisionResponse object containing valid variation object and decide reasons.\n   */\n  findValidatedForcedDecision(\n    config: ProjectConfig,\n    user: OptimizelyUserContext,\n    flagKey: string,\n    ruleKey?: string\n  ): DecisionResponse<Variation | null> {\n\n    const decideReasons: (string | number)[][] = [];\n    const forcedDecision = user.getForcedDecision({ flagKey, ruleKey });\n    let variation = null;\n    let variationKey;\n    const userId = user.getUserId()\n    if (config && forcedDecision) {\n      variationKey = forcedDecision.variationKey;\n      variation = getFlagVariationByKey(config, flagKey, variationKey);\n      if (variation) {\n        if (ruleKey) {\n          this.logger.log(\n            LOG_LEVEL.INFO,\n            LOG_MESSAGES.USER_HAS_FORCED_DECISION_WITH_RULE_SPECIFIED,\n            variationKey,\n            flagKey,\n            ruleKey,\n            userId\n          );\n          decideReasons.push([\n            LOG_MESSAGES.USER_HAS_FORCED_DECISION_WITH_RULE_SPECIFIED,\n            variationKey,\n            flagKey,\n            ruleKey,\n            userId\n          ]);\n        } else {\n          this.logger.log(\n            LOG_LEVEL.INFO,\n            LOG_MESSAGES.USER_HAS_FORCED_DECISION_WITH_NO_RULE_SPECIFIED,\n            variationKey,\n            flagKey,\n            userId\n          );\n          decideReasons.push([\n            LOG_MESSAGES.USER_HAS_FORCED_DECISION_WITH_NO_RULE_SPECIFIED,\n            variationKey,\n            flagKey,\n            userId\n          ])\n        }\n      } else {\n        if (ruleKey) {\n          this.logger.log(\n            LOG_LEVEL.INFO,\n            LOG_MESSAGES.USER_HAS_FORCED_DECISION_WITH_RULE_SPECIFIED_BUT_INVALID,\n            flagKey,\n            ruleKey,\n            userId\n          );\n          decideReasons.push([\n            LOG_MESSAGES.USER_HAS_FORCED_DECISION_WITH_RULE_SPECIFIED_BUT_INVALID,\n            flagKey,\n            ruleKey,\n            userId\n          ]);\n        } else {\n          this.logger.log(\n            LOG_LEVEL.INFO,\n            LOG_MESSAGES.USER_HAS_FORCED_DECISION_WITH_NO_RULE_SPECIFIED_BUT_INVALID,\n            flagKey,\n            userId\n          );\n          decideReasons.push([\n            LOG_MESSAGES.USER_HAS_FORCED_DECISION_WITH_NO_RULE_SPECIFIED_BUT_INVALID,\n            flagKey,\n            userId\n          ])\n        }\n      }\n    }\n\n    return {\n      result: variation,\n      reasons: decideReasons,\n    }\n  }\n\n  /**\n   * Removes forced variation for given userId and experimentKey\n   * @param  {string} userId         String representing the user id\n   * @param  {string} experimentId   Number representing the experiment id\n   * @param  {string} experimentKey  Key representing the experiment id\n   * @throws If the user id is not valid or not in the forced variation map\n   */\n  removeForcedVariation(userId: string, experimentId: string, experimentKey: string): void {\n    if (!userId) {\n      throw new Error(sprintf(ERROR_MESSAGES.INVALID_USER_ID, MODULE_NAME));\n    }\n\n    if (this.forcedVariationMap.hasOwnProperty(userId)) {\n      delete this.forcedVariationMap[userId][experimentId];\n      this.logger.log(\n        LOG_LEVEL.DEBUG,\n        LOG_MESSAGES.VARIATION_REMOVED_FOR_USER,\n        MODULE_NAME,\n        experimentKey,\n        userId,\n      );\n    } else {\n      throw new Error(sprintf(ERROR_MESSAGES.USER_NOT_IN_FORCED_VARIATION, MODULE_NAME, userId));\n    }\n  }\n\n  /**\n   * Sets forced variation for given userId and experimentKey\n   * @param  {string} userId        String representing the user id\n   * @param  {string} experimentId  Number representing the experiment id\n   * @param  {number} variationId   Number representing the variation id\n   * @throws If the user id is not valid\n   */\n  private setInForcedVariationMap(userId: string, experimentId: string, variationId: string): void {\n    if (this.forcedVariationMap.hasOwnProperty(userId)) {\n      this.forcedVariationMap[userId][experimentId] = variationId;\n    } else {\n      this.forcedVariationMap[userId] = {};\n      this.forcedVariationMap[userId][experimentId] = variationId;\n    }\n\n    this.logger.log(\n      LOG_LEVEL.DEBUG,\n      LOG_MESSAGES.USER_MAPPED_TO_FORCED_VARIATION,\n      MODULE_NAME,\n      variationId,\n      experimentId,\n      userId,\n    );\n  }\n\n  /**\n   * Gets the forced variation key for the given user and experiment.\n   * @param  {ProjectConfig}                  configObj         Object representing project configuration\n   * @param  {string}                         experimentKey     Key for experiment.\n   * @param  {string}                         userId            The user Id.\n   * @return {DecisionResponse<string|null>}                    DecisionResponse containing variation which the given user and experiment\n   *                                                            should be forced into and the decide reasons.\n   */\n  getForcedVariation(\n    configObj: ProjectConfig,\n    experimentKey: string,\n    userId: string\n  ): DecisionResponse<string | null> {\n    const decideReasons: (string | number)[][] = [];\n    const experimentToVariationMap = this.forcedVariationMap[userId];\n    if (!experimentToVariationMap) {\n      this.logger.log(\n        LOG_LEVEL.DEBUG,\n        LOG_MESSAGES.USER_HAS_NO_FORCED_VARIATION,\n        MODULE_NAME,\n        userId,\n      );\n\n      return {\n        result: null,\n        reasons: decideReasons,\n      };\n    }\n\n    let experimentId;\n    try {\n      const experiment = getExperimentFromKey(configObj, experimentKey);\n      if (experiment.hasOwnProperty('id')) {\n        experimentId = experiment['id'];\n      } else {\n        // catching improperly formatted experiments\n        this.logger.log(\n          LOG_LEVEL.ERROR,\n          ERROR_MESSAGES.IMPROPERLY_FORMATTED_EXPERIMENT,\n          MODULE_NAME,\n          experimentKey,\n        );\n        decideReasons.push([\n          ERROR_MESSAGES.IMPROPERLY_FORMATTED_EXPERIMENT,\n          MODULE_NAME,\n          experimentKey,\n        ]);\n\n        return {\n          result: null,\n          reasons: decideReasons,\n        };\n      }\n    } catch (ex: any) {\n      // catching experiment not in datafile\n      this.logger.log(LOG_LEVEL.ERROR, ex.message);\n      decideReasons.push(ex.message);\n\n      return {\n        result: null,\n        reasons: decideReasons,\n      };\n    }\n\n    const variationId = experimentToVariationMap[experimentId];\n    if (!variationId) {\n      this.logger.log(\n        LOG_LEVEL.DEBUG,\n        LOG_MESSAGES.USER_HAS_NO_FORCED_VARIATION_FOR_EXPERIMENT,\n        MODULE_NAME,\n        experimentKey,\n        userId,\n      );\n      return {\n        result: null,\n        reasons: decideReasons,\n      };\n    }\n\n    const variationKey = getVariationKeyFromId(configObj, variationId);\n    if (variationKey) {\n      this.logger.log(\n        LOG_LEVEL.DEBUG,\n        LOG_MESSAGES.USER_HAS_FORCED_VARIATION,\n        MODULE_NAME,\n        variationKey,\n        experimentKey,\n        userId,\n      );\n      decideReasons.push([\n        LOG_MESSAGES.USER_HAS_FORCED_VARIATION,\n        MODULE_NAME,\n        variationKey,\n        experimentKey,\n        userId,\n      ]);\n    } else {\n      this.logger.log(\n        LOG_LEVEL.DEBUG,\n        LOG_MESSAGES.USER_HAS_NO_FORCED_VARIATION_FOR_EXPERIMENT,\n        MODULE_NAME,\n        experimentKey,\n        userId,\n      );\n    }\n\n    return {\n      result: variationKey,\n      reasons: decideReasons,\n    };\n  }\n\n  /**\n   * Sets the forced variation for a user in a given experiment\n   * @param  {ProjectConfig}  configObj      Object representing project configuration\n   * @param  {string}         experimentKey  Key for experiment.\n   * @param  {string}         userId         The user Id.\n   * @param  {string|null}    variationKey   Key for variation. If null, then clear the existing experiment-to-variation mapping\n   * @return {boolean}     A boolean value that indicates if the set completed successfully.\n   */\n  setForcedVariation(\n    configObj: ProjectConfig,\n    experimentKey: string,\n    userId: string,\n    variationKey: string | null\n  ): boolean {\n    if (variationKey != null && !stringValidator.validate(variationKey)) {\n      this.logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.INVALID_VARIATION_KEY, MODULE_NAME);\n      return false;\n    }\n\n    let experimentId;\n    try {\n      const experiment = getExperimentFromKey(configObj, experimentKey);\n      if (experiment.hasOwnProperty('id')) {\n        experimentId = experiment['id'];\n      } else {\n        // catching improperly formatted experiments\n        this.logger.log(\n          LOG_LEVEL.ERROR,\n          ERROR_MESSAGES.IMPROPERLY_FORMATTED_EXPERIMENT,\n          MODULE_NAME,\n          experimentKey,\n        );\n        return false;\n      }\n    } catch (ex: any) {\n      // catching experiment not in datafile\n      this.logger.log(LOG_LEVEL.ERROR, ex.message);\n      return false;\n    }\n\n    if (variationKey == null) {\n      try {\n        this.removeForcedVariation(userId, experimentId, experimentKey);\n        return true;\n      } catch (ex: any) {\n        this.logger.log(LOG_LEVEL.ERROR, ex.message);\n        return false;\n      }\n    }\n\n    const variationId = getVariationIdFromExperimentAndVariationKey(configObj, experimentKey, variationKey);\n\n    if (!variationId) {\n      this.logger.log(\n        LOG_LEVEL.ERROR,\n        ERROR_MESSAGES.NO_VARIATION_FOR_EXPERIMENT_KEY,\n        MODULE_NAME,\n        variationKey,\n        experimentKey,\n      );\n      return false;\n    }\n\n    try {\n      this.setInForcedVariationMap(userId, experimentId, variationId);\n      return true;\n    } catch (ex: any) {\n      this.logger.log(LOG_LEVEL.ERROR, ex.message);\n      return false;\n    }\n  }\n\n  getVariationFromExperimentRule(\n    configObj: ProjectConfig,\n    flagKey: string,\n    rule: Experiment,\n    user: OptimizelyUserContext,\n    options: { [key: string]: boolean } = {}\n  ): DecisionResponse<string | null> {\n    const decideReasons: (string | number)[][] = [];\n\n    // check forced decision first\n    const forcedDecisionResponse = this.findValidatedForcedDecision(configObj, user, flagKey, rule.key);\n    decideReasons.push(...forcedDecisionResponse.reasons);\n\n    const forcedVariation = forcedDecisionResponse.result;\n    if (forcedVariation) {\n      return {\n        result: forcedVariation.key,\n        reasons: decideReasons,\n      };\n    }\n    const decisionVariation = this.getVariation(configObj, rule, user, options);\n    decideReasons.push(...decisionVariation.reasons);\n    const variationKey = decisionVariation.result;\n\n    return {\n      result: variationKey,\n      reasons: decideReasons,\n    };\n  }\n\n  getVariationFromDeliveryRule(\n    configObj: ProjectConfig,\n    flagKey: string,\n    rules: Experiment[],\n    ruleIndex: number,\n    user: OptimizelyUserContext\n  ): DeliveryRuleResponse<Variation | null, boolean> {\n    const decideReasons: (string | number)[][] = [];\n    let skipToEveryoneElse = false;\n\n    // check forced decision first\n    const rule = rules[ruleIndex];\n    const forcedDecisionResponse = this.findValidatedForcedDecision(configObj, user, flagKey, rule.key);\n    decideReasons.push(...forcedDecisionResponse.reasons);\n\n    const forcedVariation = forcedDecisionResponse.result;\n    if (forcedVariation) {\n      return {\n        result: forcedVariation,\n        reasons: decideReasons,\n        skipToEveryoneElse,\n      };\n    }\n\n    const userId = user.getUserId();\n    const attributes = user.getAttributes();\n    const bucketingId = this.getBucketingId(userId, attributes);\n    const everyoneElse = ruleIndex === rules.length - 1;\n    const loggingKey = everyoneElse ? \"Everyone Else\" : ruleIndex + 1;\n\n    let bucketedVariation = null;\n    let bucketerVariationId;\n    let bucketerParams;\n    let decisionVariation;\n    const decisionifUserIsInAudience = this.checkIfUserIsInAudience(\n      configObj,\n      rule,\n      AUDIENCE_EVALUATION_TYPES.RULE,\n      user,\n      loggingKey\n    );\n    decideReasons.push(...decisionifUserIsInAudience.reasons);\n    if (decisionifUserIsInAudience.result) {\n      this.logger.log(\n        LOG_LEVEL.DEBUG,\n        LOG_MESSAGES.USER_MEETS_CONDITIONS_FOR_TARGETING_RULE,\n        MODULE_NAME,\n        userId,\n        loggingKey\n      );\n      decideReasons.push([\n        LOG_MESSAGES.USER_MEETS_CONDITIONS_FOR_TARGETING_RULE,\n        MODULE_NAME,\n        userId,\n        loggingKey\n      ]);\n\n      bucketerParams = this.buildBucketerParams(configObj, rule, bucketingId, userId);\n      decisionVariation = bucket(bucketerParams);\n      decideReasons.push(...decisionVariation.reasons);\n      bucketerVariationId = decisionVariation.result;\n      if (bucketerVariationId) {\n        bucketedVariation = getVariationFromId(configObj, bucketerVariationId);\n      }\n      if (bucketedVariation) {\n        this.logger.log(\n          LOG_LEVEL.DEBUG,\n          LOG_MESSAGES.USER_BUCKETED_INTO_TARGETING_RULE,\n          MODULE_NAME,\n          userId,\n          loggingKey\n        );\n        decideReasons.push([\n          LOG_MESSAGES.USER_BUCKETED_INTO_TARGETING_RULE,\n          MODULE_NAME,\n          userId,\n          loggingKey]);\n      } else if (!everyoneElse) {\n        // skip this logging for EveryoneElse since this has a message not for EveryoneElse\n        this.logger.log(\n          LOG_LEVEL.DEBUG,\n          LOG_MESSAGES.USER_NOT_BUCKETED_INTO_TARGETING_RULE,\n          MODULE_NAME,\n          userId,\n          loggingKey\n        );\n        decideReasons.push([\n          LOG_MESSAGES.USER_NOT_BUCKETED_INTO_TARGETING_RULE,\n          MODULE_NAME,\n          userId,\n          loggingKey\n        ]);\n\n        // skip the rest of rollout rules to the everyone-else rule if audience matches but not bucketed\n        skipToEveryoneElse = true;\n      }\n    } else {\n      this.logger.log(\n        LOG_LEVEL.DEBUG,\n        LOG_MESSAGES.USER_DOESNT_MEET_CONDITIONS_FOR_TARGETING_RULE,\n        MODULE_NAME,\n        userId,\n        loggingKey\n      );\n      decideReasons.push([\n        LOG_MESSAGES.USER_DOESNT_MEET_CONDITIONS_FOR_TARGETING_RULE,\n        MODULE_NAME,\n        userId,\n        loggingKey\n      ]);\n    }\n\n    return {\n      result: bucketedVariation,\n      reasons: decideReasons,\n      skipToEveryoneElse,\n    };\n  }\n}\n\n/**\n * Creates an instance of the DecisionService.\n * @param  {DecisionServiceOptions}     options       Configuration options\n * @return {Object}                     An instance of the DecisionService\n */\nexport function createDecisionService(options: DecisionServiceOptions): DecisionService {\n  return new DecisionService(options);\n}\n","/**\n * Copyright 2017, 2019-2020, 2022-2023, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventTags } from '../../modules/event_processor';\nimport { LoggerFacade } from '../../modules/logging';\n\nimport {\n  LOG_LEVEL,\n  LOG_MESSAGES,\n  RESERVED_EVENT_KEYWORDS,\n} from '../enums';\n\n/**\n * Provides utility method for parsing event tag values\n */\nconst MODULE_NAME = 'EVENT_TAG_UTILS';\nconst REVENUE_EVENT_METRIC_NAME = RESERVED_EVENT_KEYWORDS.REVENUE;\nconst VALUE_EVENT_METRIC_NAME = RESERVED_EVENT_KEYWORDS.VALUE;\n\n/**\n * Grab the revenue value from the event tags. \"revenue\" is a reserved keyword.\n * @param {EventTags} eventTags\n * @param {LoggerFacade} logger\n * @return {number|null}\n */\nexport function getRevenueValue(eventTags: EventTags, logger: LoggerFacade): number | null {\n  const rawValue = eventTags[REVENUE_EVENT_METRIC_NAME];\n\n  if (rawValue == null) { // null or undefined event values\n    return null;\n  }\n\n  const parsedRevenueValue = typeof rawValue === 'string' ? parseInt(rawValue) : rawValue;\n\n  if (isFinite(parsedRevenueValue)) {\n    logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.PARSED_REVENUE_VALUE, MODULE_NAME, parsedRevenueValue);\n    return parsedRevenueValue;\n  } else { // NaN, +/- infinity values\n    logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.FAILED_TO_PARSE_REVENUE, MODULE_NAME, rawValue);\n    return null;\n  }\n}\n\n/**\n * Grab the event value from the event tags. \"value\" is a reserved keyword.\n * @param {EventTags} eventTags\n * @param {LoggerFacade} logger\n * @return {number|null}\n */\nexport function getEventValue(eventTags: EventTags, logger: LoggerFacade): number | null {\n  const rawValue = eventTags[VALUE_EVENT_METRIC_NAME];\n\n  if (rawValue == null) { // null or undefined event values\n    return null;\n  }\n\n  const parsedEventValue = typeof rawValue === 'string' ? parseFloat(rawValue) : rawValue;\n\n  if (isFinite(parsedEventValue)) {\n    logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.PARSED_NUMERIC_VALUE, MODULE_NAME, parsedEventValue);\n    return parsedEventValue;\n  } else { // NaN, +/- infinity values\n    logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.FAILED_TO_PARSE_VALUE, MODULE_NAME, rawValue);\n    return null;\n  }\n}","/**\n * Copyright 2016, 2018-2020, 2022, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { sprintf } from '../../utils/fns';\nimport { ObjectWithUnknownProperties } from '../../shared_types';\n\nimport fns from '../../utils/fns';\nimport { ERROR_MESSAGES } from '../enums';\n\nconst MODULE_NAME = 'ATTRIBUTES_VALIDATOR';\n\n/**\n * Validates user's provided attributes\n * @param  {unknown}  attributes\n * @return {boolean}  true if the attributes are valid\n * @throws If the attributes are not valid\n */\n\nexport function validate(attributes: unknown): boolean {\n  if (typeof attributes === 'object' && !Array.isArray(attributes) && attributes !== null) {\n    Object.keys(attributes).forEach(function(key) {\n      if (typeof (attributes as ObjectWithUnknownProperties)[key] === 'undefined') {\n        throw new Error(sprintf(ERROR_MESSAGES.UNDEFINED_ATTRIBUTE, MODULE_NAME, key));\n      }\n    });\n    return true;\n  } else {\n    throw new Error(sprintf(ERROR_MESSAGES.INVALID_ATTRIBUTES, MODULE_NAME));\n  }\n}\n\n/**\n * Validates user's provided attribute\n * @param  {unknown}  attributeKey\n * @param  {unknown}  attributeValue\n * @return {boolean}  true if the attribute is valid\n */\nexport function isAttributeValid(attributeKey: unknown, attributeValue: unknown): boolean {\n  return (\n    typeof attributeKey === 'string' &&\n    (typeof attributeValue === 'string' ||\n      typeof attributeValue === 'boolean' ||\n      (fns.isNumber(attributeValue) && fns.isSafeInteger(attributeValue)))\n  );\n}\n","/**\n * Copyright 2016-2022, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { LoggerFacade } from '../../modules/logging';\nimport { EventV1 as CommonEventParams } from '../../modules/event_processor';\n\nimport fns from '../../utils/fns';\nimport { CONTROL_ATTRIBUTES, RESERVED_EVENT_KEYWORDS } from '../../utils/enums';\nimport {\n  getAttributeId,\n  getEventId,\n  getLayerId,\n  getVariationKeyFromId,\n  ProjectConfig,\n} from '../project_config';\nimport * as eventTagUtils from '../../utils/event_tag_utils';\nimport { isAttributeValid } from '../../utils/attributes_validator';\nimport { EventTags, UserAttributes, Event as EventLoggingEndpoint } from '../../shared_types';\n\nconst ACTIVATE_EVENT_KEY = 'campaign_activated';\nconst CUSTOM_ATTRIBUTE_FEATURE_TYPE = 'custom';\nconst ENDPOINT = 'https://logx.optimizely.com/v1/events';\nconst HTTP_VERB = 'POST';\n\ninterface ImpressionOptions {\n  // Object representing user attributes and values which need to be recorded\n  attributes?: UserAttributes;\n  // The client we are using: node or javascript\n  clientEngine: string;\n  // The version of the client\n  clientVersion: string;\n  // Object representing project configuration, including datafile information and mappings for quick lookup\n  configObj: ProjectConfig;\n  // Experiment for which impression needs to be recorded\n  experimentId: string | null;\n  // Key of an experiment for which impression needs to be recorded\n  ruleKey: string;\n  // Key for a feature flag\n  flagKey: string;\n  // Boolean representing if feature is enabled\n  enabled: boolean;\n  // Type for the decision source\n  ruleType: string;\n  // Event key representing the event which needs to be recorded\n  eventKey?: string;\n  // ID for variation which would be presented to user\n  variationId: string | null;\n  // Logger object\n  logger: LoggerFacade;\n  // ID for user\n  userId: string;\n}\n\ninterface ConversionEventOptions {\n  // Object representing user attributes and values which need to be recorded\n  attributes?: UserAttributes;\n  // The client we are using: node or javascript\n  clientEngine: string;\n  // The version of the client\n  clientVersion: string;\n  // Object representing project configuration, including datafile information and mappings for quick lookup\n  configObj: ProjectConfig;\n  // Event key representing the event which needs to be recorded\n  eventKey: string;\n  // Logger object\n  logger: LoggerFacade;\n  // ID for user\n  userId: string;\n  // Object with event-specific tags\n  eventTags?: EventTags;\n}\n\ntype Metadata = {\n  flag_key: string;\n  rule_key: string;\n  rule_type: string;\n  variation_key: string;\n  enabled: boolean;\n}\n\ntype Decision = {\n  campaign_id: string | null;\n  experiment_id: string | null;\n  variation_id: string | null;\n  metadata: Metadata;\n}\n\ntype SnapshotEvent = {\n  entity_id: string | null;\n  timestamp: number;\n  uuid: string;\n  key: string;\n  revenue?: number;\n  value?: number;\n  tags?: EventTags;\n}\n\ninterface Snapshot {\n  decisions?: Decision[];\n  events: SnapshotEvent[];\n}\n\n/**\n * Get params which are used same in both conversion and impression events\n * @param  {ImpressionOptions|ConversionEventOptions} options    Object containing values needed to build impression/conversion event\n * @return {CommonEventParams}                                   Common params with properties that are used in both conversion and impression events\n */\nfunction getCommonEventParams({\n  attributes,\n  userId,\n  clientEngine,\n  clientVersion,\n  configObj,\n  logger,\n}: ImpressionOptions | ConversionEventOptions): CommonEventParams {\n\n  const anonymize_ip = configObj.anonymizeIP ? configObj.anonymizeIP : false;\n  const botFiltering = configObj.botFiltering;\n\n  const visitor = {\n    snapshots: [],\n    visitor_id: userId,\n    attributes: [],\n  };\n\n  const commonParams: CommonEventParams = {\n    account_id: configObj.accountId,\n    project_id: configObj.projectId,\n    visitors: [visitor],\n    revision: configObj.revision,\n    client_name: clientEngine,\n    client_version: clientVersion,\n    anonymize_ip: anonymize_ip,\n    enrich_decisions: true,\n  };\n\n  if (attributes) {\n    // Omit attribute values that are not supported by the log endpoint.\n    Object.keys(attributes || {}).forEach(function(attributeKey) {\n      const attributeValue = attributes[attributeKey];\n      if (isAttributeValid(attributeKey, attributeValue)) {\n        const attributeId = getAttributeId(configObj, attributeKey, logger);\n        if (attributeId) {\n          commonParams.visitors[0].attributes.push({\n            entity_id: attributeId,\n            key: attributeKey,\n            type: CUSTOM_ATTRIBUTE_FEATURE_TYPE,\n            value: attributeValue!,\n          });\n        }\n      }\n    });\n  }\n\n\n  if (typeof botFiltering === 'boolean') {\n    commonParams.visitors[0].attributes.push({\n      entity_id: CONTROL_ATTRIBUTES.BOT_FILTERING,\n      key: CONTROL_ATTRIBUTES.BOT_FILTERING,\n      type: CUSTOM_ATTRIBUTE_FEATURE_TYPE,\n      value: botFiltering,\n    });\n  }\n\n  return commonParams;\n}\n\n/**\n * Creates object of params specific to impression events\n * @param  {ProjectConfig}       configObj    Object representing project configuration\n * @param  {string|null}         experimentId ID of experiment for which impression needs to be recorded\n * @param  {string|null}         variationId  ID for variation which would be presented to user\n * @param  {string}              ruleKey      Key of experiment for which impression needs to be recorded\n * @param  {string}              ruleType     Type for the decision source\n * @param  {string}              flagKey      Key for a feature flag\n * @param  {boolean}             enabled      Boolean representing if feature is enabled\n * @return {Snapshot}                         Impression event params\n */\nfunction getImpressionEventParams(\n  configObj: ProjectConfig,\n  experimentId: string | null,\n  variationId: string | null,\n  ruleKey: string,\n  ruleType: string,\n  flagKey: string,\n  enabled: boolean\n): Snapshot {\n\n  const campaignId = experimentId ? getLayerId(configObj, experimentId) : null;\n\n  let variationKey = variationId ? getVariationKeyFromId(configObj, variationId) : null;\n  variationKey = variationKey || '';\n\n  const impressionEventParams = {\n    decisions: [\n      {\n        campaign_id: campaignId,\n        experiment_id: experimentId,\n        variation_id: variationId,\n        metadata: {\n          flag_key: flagKey,\n          rule_key: ruleKey,\n          rule_type: ruleType,\n          variation_key: variationKey,\n          enabled: enabled,\n        }\n      },\n    ],\n    events: [\n      {\n        entity_id: campaignId,\n        timestamp: fns.currentTimestamp(),\n        key: ACTIVATE_EVENT_KEY,\n        uuid: fns.uuid(),\n      },\n    ],\n  };\n\n  return impressionEventParams;\n}\n\n/**\n * Creates object of params specific to conversion events\n * @param  {ProjectConfig} configObj                 Object representing project configuration\n * @param  {string}        eventKey                  Event key representing the event which needs to be recorded\n * @param  {LoggerFacade}  logger                    Logger object\n * @param  {EventTags}     eventTags                 Values associated with the event.\n * @return {Snapshot}                                Conversion event params\n */\nfunction getVisitorSnapshot(\n  configObj: ProjectConfig,\n  eventKey: string,\n  logger: LoggerFacade,\n  eventTags?: EventTags,\n): Snapshot {\n  const snapshot: Snapshot = {\n    events: [],\n  };\n\n  const eventDict: SnapshotEvent = {\n    entity_id: getEventId(configObj, eventKey),\n    timestamp: fns.currentTimestamp(),\n    uuid: fns.uuid(),\n    key: eventKey,\n  };\n\n  if (eventTags) {\n    const revenue = eventTagUtils.getRevenueValue(eventTags, logger);\n    if (revenue !== null) {\n      eventDict[RESERVED_EVENT_KEYWORDS.REVENUE] = revenue;\n    }\n\n    const eventValue = eventTagUtils.getEventValue(eventTags, logger);\n    if (eventValue !== null) {\n      eventDict[RESERVED_EVENT_KEYWORDS.VALUE] = eventValue;\n    }\n\n    eventDict['tags'] = eventTags;\n  }\n  snapshot.events.push(eventDict);\n\n  return snapshot;\n}\n\n/**\n * Create impression event params to be sent to the logging endpoint\n * @param  {ImpressionOptions}    options    Object containing values needed to build impression event\n * @return {EventLoggingEndpoint}            Params to be used in impression event logging endpoint call\n */\nexport function getImpressionEvent(options: ImpressionOptions): EventLoggingEndpoint {\n  const commonParams = getCommonEventParams(options);\n  const impressionEventParams = getImpressionEventParams(\n    options.configObj,\n    options.experimentId,\n    options.variationId,\n    options.ruleKey,\n    options.ruleType,\n    options.flagKey,\n    options.enabled,\n  );\n  commonParams.visitors[0].snapshots.push(impressionEventParams);\n\n  const impressionEvent: EventLoggingEndpoint = {\n    httpVerb: HTTP_VERB,\n    url: ENDPOINT,\n    params: commonParams,\n  }\n\n  return impressionEvent;\n}\n\n/**\n * Create conversion event params to be sent to the logging endpoint\n * @param  {ConversionEventOptions}  options   Object containing values needed to build conversion event\n * @return {EventLoggingEndpoint}              Params to be used in conversion event logging endpoint call\n */\nexport function getConversionEvent(options: ConversionEventOptions): EventLoggingEndpoint {\n\n  const commonParams = getCommonEventParams(options);\n  const snapshot = getVisitorSnapshot(options.configObj, options.eventKey, options.logger, options.eventTags);\n  commonParams.visitors[0].snapshots = [snapshot];\n\n  const conversionEvent: EventLoggingEndpoint = {\n    httpVerb: HTTP_VERB,\n    url: ENDPOINT,\n    params: commonParams,\n  }\n\n  return conversionEvent;\n}\n","/**\n * Copyright 2020, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DecisionObj } from '../decision_service';\n\n/**\n * Get experiment key from the provided decision object\n * @param   {DecisionObj} decisionObj       Object representing decision\n * @returns {string}                        Experiment key or empty string if experiment is null\n */\nexport function getExperimentKey(decisionObj: DecisionObj): string {\n  return decisionObj.experiment?.key ?? '';\n}\n\n/**\n * Get variation key from the provided decision object\n * @param   {DecisionObj} decisionObj       Object representing decision\n * @returns {string}                        Variation key or empty string if variation is null\n */\nexport function getVariationKey(decisionObj: DecisionObj): string {\n  return decisionObj.variation?.key ?? '';\n}\n\n/**\n * Get featureEnabled from variation in the provided decision object\n * @param   {DecisionObj} decisionObj       Object representing decision\n * @returns {boolean}                       featureEnabled boolean or false if variation is null\n */\nexport function getFeatureEnabledFromVariation(decisionObj: DecisionObj): boolean {\n  return decisionObj.variation?.featureEnabled ?? false;\n}\n\n/**\n * Get experiment id from the provided decision object\n * @param   {DecisionObj} decisionObj       Object representing decision\n * @returns {string}                        Experiment id or null if experiment is null\n */\nexport function getExperimentId(decisionObj: DecisionObj): string | null {\n  return decisionObj.experiment?.id ?? null;\n}\n\n/**\n * Get variation id from the provided decision object\n * @param   {DecisionObj} decisionObj       Object representing decision\n * @returns {string}                        Variation id or null if variation is null\n */\nexport function getVariationId(decisionObj: DecisionObj): string | null {\n  return decisionObj.variation?.id ?? null;\n}\n","/**\n * Copyright 2019-2022, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getLogger } from '../../modules/logging';\n\nimport fns from '../../utils/fns';\nimport * as eventTagUtils from '../../utils/event_tag_utils';\nimport * as attributesValidator from '../../utils/attributes_validator';\nimport * as decision from '../decision';\n\nimport { EventTags, UserAttributes } from '../../shared_types';\nimport { DecisionObj } from '../decision_service';\nimport {\n  getAttributeId,\n  getEventId,\n  getLayerId,\n  ProjectConfig,\n} from '../project_config';\n\nconst logger = getLogger('EVENT_BUILDER');\n\ninterface ImpressionConfig {\n  decisionObj: DecisionObj;\n  userId: string;\n  flagKey: string;\n  enabled: boolean;\n  userAttributes?: UserAttributes;\n  clientEngine: string;\n  clientVersion: string;\n  configObj: ProjectConfig;\n}\n\ntype VisitorAttribute = {\n  entityId: string;\n  key: string;\n  value: string | number | boolean;\n}\n\ninterface ImpressionEvent {\n  type: 'impression';\n  timestamp: number;\n  uuid: string;\n  user: {\n    id: string;\n    attributes: VisitorAttribute[];\n  };\n  context: EventContext;\n  layer: {\n    id: string | null;\n  };\n  experiment: {\n    id: string | null;\n    key: string;\n  } | null;\n  variation: {\n    id: string | null;\n    key: string;\n  } | null;\n\n  ruleKey: string,\n  flagKey: string,\n  ruleType: string,\n  enabled: boolean,\n}\n\ntype EventContext = {\n  accountId: string;\n  projectId: string;\n  revision: string;\n  clientName: string;\n  clientVersion: string;\n  anonymizeIP: boolean;\n  botFiltering: boolean | undefined;\n}\n\ninterface ConversionConfig {\n  eventKey: string;\n  eventTags?: EventTags;\n  userId: string;\n  userAttributes?: UserAttributes;\n  clientEngine: string;\n  clientVersion: string;\n  configObj: ProjectConfig;\n}\n\ninterface ConversionEvent {\n  type: 'conversion';\n  timestamp: number;\n  uuid: string;\n  user: {\n    id: string;\n    attributes: VisitorAttribute[];\n  };\n  context: EventContext;\n  event: {\n    id: string | null;\n    key: string;\n  };\n  revenue: number | null;\n  value: number | null;\n  tags: EventTags | undefined;\n}\n\n\n/**\n * Creates an ImpressionEvent object from decision data\n * @param  {ImpressionConfig}  config\n * @return {ImpressionEvent}   an ImpressionEvent object\n */\nexport const buildImpressionEvent = function({\n  configObj,\n  decisionObj,\n  userId,\n  flagKey,\n  enabled,\n  userAttributes,\n  clientEngine,\n  clientVersion,\n}: ImpressionConfig): ImpressionEvent {\n\n  const ruleType = decisionObj.decisionSource;\n  const experimentKey = decision.getExperimentKey(decisionObj);\n  const experimentId = decision.getExperimentId(decisionObj);\n  const variationKey = decision.getVariationKey(decisionObj);\n  const variationId = decision.getVariationId(decisionObj);\n\n  const layerId = experimentId !== null ? getLayerId(configObj, experimentId) : null;\n\n  return {\n    type: 'impression',\n    timestamp: fns.currentTimestamp(),\n    uuid: fns.uuid(),\n\n    user: {\n      id: userId,\n      attributes: buildVisitorAttributes(configObj, userAttributes),\n    },\n\n    context: {\n      accountId: configObj.accountId,\n      projectId: configObj.projectId,\n      revision: configObj.revision,\n      clientName: clientEngine,\n      clientVersion: clientVersion,\n      anonymizeIP: configObj.anonymizeIP || false,\n      botFiltering: configObj.botFiltering,\n    },\n\n    layer: {\n      id: layerId,\n    },\n\n    experiment: {\n      id: experimentId,\n      key: experimentKey,\n    },\n\n    variation: {\n      id: variationId,\n      key: variationKey,\n    },\n\n    ruleKey: experimentKey,\n    flagKey: flagKey,\n    ruleType: ruleType,\n    enabled: enabled,\n  };\n};\n\n/**\n * Creates a ConversionEvent object from track\n * @param  {ConversionConfig} config\n * @return {ConversionEvent}  a ConversionEvent object\n */\nexport const buildConversionEvent = function({\n  configObj,\n  userId,\n  userAttributes,\n  clientEngine,\n  clientVersion,\n  eventKey,\n  eventTags,\n}: ConversionConfig): ConversionEvent {\n\n  const eventId = getEventId(configObj, eventKey);\n\n  const revenue = eventTags ? eventTagUtils.getRevenueValue(eventTags, logger) : null;\n  const eventValue = eventTags ? eventTagUtils.getEventValue(eventTags, logger) : null;\n\n  return {\n    type: 'conversion',\n    timestamp: fns.currentTimestamp(),\n    uuid: fns.uuid(),\n\n    user: {\n      id: userId,\n      attributes: buildVisitorAttributes(configObj, userAttributes),\n    },\n\n    context: {\n      accountId: configObj.accountId,\n      projectId: configObj.projectId,\n      revision: configObj.revision,\n      clientName: clientEngine,\n      clientVersion: clientVersion,\n      anonymizeIP: configObj.anonymizeIP || false,\n      botFiltering: configObj.botFiltering,\n    },\n\n    event: {\n      id: eventId,\n      key: eventKey,\n    },\n\n    revenue: revenue,\n    value: eventValue,\n    tags: eventTags,\n  };\n};\n\nfunction buildVisitorAttributes(\n  configObj: ProjectConfig,\n  attributes?: UserAttributes\n): VisitorAttribute[] {\n  const builtAttributes: VisitorAttribute[] = [];\n  // Omit attribute values that are not supported by the log endpoint.\n  if (attributes) {\n    Object.keys(attributes || {}).forEach(function(attributeKey) {\n      const attributeValue = attributes[attributeKey];\n      if (attributesValidator.isAttributeValid(attributeKey, attributeValue)) {\n        const attributeId = getAttributeId(configObj, attributeKey, logger);\n        if (attributeId) {\n          builtAttributes.push({\n            entityId: attributeId,\n            key: attributeKey,\n            value: attributeValue!,\n          });\n        }\n      }\n    });\n  }\n\n  return builtAttributes;\n}\n","/**\n * Copyright 2020, 2022, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { LogHandler, ErrorHandler } from '../../modules/logging';\nimport { objectValues } from '../../utils/fns';\nimport { NotificationListener, ListenerPayload } from '../../shared_types';\n\nimport {\n  LOG_LEVEL,\n  LOG_MESSAGES,\n  NOTIFICATION_TYPES,\n} from '../../utils/enums';\n\nconst MODULE_NAME = 'NOTIFICATION_CENTER';\n\ninterface NotificationCenterOptions {\n  logger: LogHandler;\n  errorHandler: ErrorHandler;\n}\n\ninterface ListenerEntry {\n  id: number;\n  // eslint-disable-next-line  @typescript-eslint/no-explicit-any\n  callback: (notificationData: any) => void;\n}\n\ntype NotificationListeners = {\n  [key: string]: ListenerEntry[];\n}\n\n/**\n * NotificationCenter allows registration and triggering of callback functions using\n * notification event types defined in NOTIFICATION_TYPES of utils/enums/index.js:\n * - ACTIVATE: An impression event will be sent to Optimizely.\n * - TRACK a conversion event will be sent to Optimizely\n */\nexport class NotificationCenter {\n  private logger: LogHandler;\n  private errorHandler: ErrorHandler;\n  private notificationListeners: NotificationListeners;\n  private listenerId: number;\n\n  /**\n   * @constructor\n   * @param   {NotificationCenterOptions}  options\n   * @param   {LogHandler}                 options.logger       An instance of a logger to log messages with\n   * @param   {ErrorHandler}               options.errorHandler An instance of errorHandler to handle any unexpected error\n   */\n  constructor(options: NotificationCenterOptions) {\n    this.logger = options.logger;\n    this.errorHandler = options.errorHandler;\n    this.notificationListeners = {};\n    objectValues(NOTIFICATION_TYPES).forEach(\n      (notificationTypeEnum) => {\n        this.notificationListeners[notificationTypeEnum] = [];\n      }\n    );\n    this.listenerId = 1;\n  }\n\n  /**\n   * Add a notification callback to the notification center\n   * @param   {string}                   notificationType     One of the values from NOTIFICATION_TYPES in utils/enums/index.js\n   * @param   {NotificationListener<T>}  callback             Function that will be called when the event is triggered\n   * @returns {number}                   If the callback was successfully added, returns a listener ID which can be used\n   * to remove the callback by calling removeNotificationListener. The ID is a number greater than 0.\n   * If there was an error and the listener was not added, addNotificationListener returns -1. This\n   * can happen if the first argument is not a valid notification type, or if the same callback\n   * function was already added as a listener by a prior call to this function.\n   */\n  addNotificationListener<T extends ListenerPayload>(\n    notificationType: string,\n    callback: NotificationListener<T>\n  ): number {\n    try {\n      const notificationTypeValues: string[] = objectValues(NOTIFICATION_TYPES);\n      const isNotificationTypeValid = notificationTypeValues.indexOf(notificationType) > -1;\n      if (!isNotificationTypeValid) {\n        return -1;\n      }\n  \n      if (!this.notificationListeners[notificationType]) {\n        this.notificationListeners[notificationType] = [];\n      }\n  \n      let callbackAlreadyAdded = false;\n      (this.notificationListeners[notificationType] || []).forEach(\n        (listenerEntry) => {\n          if (listenerEntry.callback === callback) {\n            callbackAlreadyAdded = true;\n            return;\n          }\n        });\n\n      if (callbackAlreadyAdded) {\n        return -1;\n      }\n  \n      this.notificationListeners[notificationType].push({\n        id: this.listenerId,\n        callback: callback,\n      });\n  \n      const returnId = this.listenerId;\n      this.listenerId += 1;\n      return returnId;\n    } catch (e: any) {\n      this.logger.log(LOG_LEVEL.ERROR, e.message);\n      this.errorHandler.handleError(e);\n      return -1;\n    }\n  }\n\n  /**\n   * Remove a previously added notification callback\n   * @param   {number}                 listenerId ID of listener to be removed\n   * @returns {boolean}                Returns true if the listener was found and removed, and false\n   * otherwise.\n   */\n  removeNotificationListener(listenerId: number): boolean {\n    try {\n      let indexToRemove: number | undefined;\n      let typeToRemove: string | undefined;\n  \n      Object.keys(this.notificationListeners).some(\n        (notificationType) => {\n          const listenersForType = this.notificationListeners[notificationType];\n          (listenersForType || []).every((listenerEntry, i) => {\n            if (listenerEntry.id === listenerId) {\n              indexToRemove = i;\n              typeToRemove = notificationType;\n              return false;\n            }\n\n            return true;\n          });\n\n          if (indexToRemove !== undefined && typeToRemove !== undefined) {\n            return true;\n          }\n\n          return false;\n        }\n      );\n  \n      if (indexToRemove !== undefined && typeToRemove !== undefined) {\n        this.notificationListeners[typeToRemove].splice(indexToRemove, 1);\n        return true;\n      }\n    } catch (e: any) {\n      this.logger.log(LOG_LEVEL.ERROR, e.message);\n      this.errorHandler.handleError(e);\n    }\n\n    return false;\n  }\n\n  /**\n   * Removes all previously added notification listeners, for all notification types\n   */\n  clearAllNotificationListeners(): void {\n    try {\n      objectValues(NOTIFICATION_TYPES).forEach(\n        (notificationTypeEnum) => {\n          this.notificationListeners[notificationTypeEnum] = [];\n        }\n      );\n    } catch (e: any) {\n      this.logger.log(LOG_LEVEL.ERROR, e.message);\n      this.errorHandler.handleError(e);\n    }\n  }\n\n  /**\n   * Remove all previously added notification listeners for the argument type\n   * @param   {NOTIFICATION_TYPES}    notificationType One of NOTIFICATION_TYPES\n   */\n  clearNotificationListeners(notificationType: NOTIFICATION_TYPES): void {\n    try {\n      this.notificationListeners[notificationType] = [];\n    } catch (e: any) {\n      this.logger.log(LOG_LEVEL.ERROR, e.message);\n      this.errorHandler.handleError(e);\n    }\n  }\n\n  /**\n   * Fires notifications for the argument type. All registered callbacks for this type will be\n   * called. The notificationData object will be passed on to callbacks called.\n   * @param {string} notificationType One of NOTIFICATION_TYPES\n   * @param {Object} notificationData Will be passed to callbacks called\n   */\n  sendNotifications<T extends ListenerPayload>(\n    notificationType: string,\n    notificationData?: T\n  ): void {\n    try {\n      (this.notificationListeners[notificationType] || []).forEach(\n        (listenerEntry) => {\n          const callback = listenerEntry.callback;\n          try {\n            callback(notificationData);\n          } catch (ex: any) {\n            this.logger.log(\n              LOG_LEVEL.ERROR,\n              LOG_MESSAGES.NOTIFICATION_LISTENER_EXCEPTION,\n              MODULE_NAME,\n              notificationType,\n              ex.message,\n            );\n          }\n        }\n      );\n    } catch (e: any) {\n      this.logger.log(LOG_LEVEL.ERROR, e.message);\n      this.errorHandler.handleError(e);\n    }\n  }\n}\n\n/**\n * Create an instance of NotificationCenter\n * @param   {NotificationCenterOptions}   options\n * @returns {NotificationCenter}          An instance of NotificationCenter\n */\nexport function createNotificationCenter(options: NotificationCenterOptions): NotificationCenter {\n  return new NotificationCenter(options);\n}\n\nexport interface NotificationSender {\n  // TODO[OASIS-6649]: Don't use any type\n  // eslint-disable-next-line  @typescript-eslint/no-explicit-any\n  sendNotifications(notificationType: NOTIFICATION_TYPES, notificationData?: any): void\n}\n","/**\n * Copyright 2023, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getLogger, LogHandler, LogLevel } from '../../modules/logging';\nimport { NotificationCenter, createNotificationCenter } from '../../core/notification_center';\n\n/**\n * Internal notification center registry for managing multiple notification centers.\n */\nexport class NotificationRegistry {\n  private static _notificationCenters = new Map<string, NotificationCenter>();\n\n  constructor() {}\n\n  /**\n   * Retrieves an SDK Key's corresponding notification center in the registry if it exists, otherwise it creates one\n   * @param sdkKey SDK Key to be used for the notification center tied to the ODP Manager\n   * @param logger Logger to be used for the corresponding notification center\n   * @returns {NotificationCenter | undefined} a notification center instance for ODP Manager if a valid SDK Key is provided, otherwise undefined\n   */\n  static getNotificationCenter(sdkKey?: string, logger: LogHandler = getLogger()): NotificationCenter | undefined {\n    if (!sdkKey) {\n      logger.log(LogLevel.ERROR, 'No SDK key provided to getNotificationCenter.');\n      return undefined;\n    }\n\n    let notificationCenter;\n    if (this._notificationCenters.has(sdkKey)) {\n      notificationCenter = this._notificationCenters.get(sdkKey);\n    } else {\n      notificationCenter = createNotificationCenter({\n        logger,\n        errorHandler: { handleError: () => {} },\n      });\n      this._notificationCenters.set(sdkKey, notificationCenter);\n    }\n\n    return notificationCenter;\n  }\n\n  static removeNotificationCenter(sdkKey?: string): void {\n    if (!sdkKey) {\n      return;\n    }\n\n    const notificationCenter = this._notificationCenters.get(sdkKey);\n    if (notificationCenter) {\n      notificationCenter.clearAllNotificationListeners();\n      this._notificationCenters.delete(sdkKey);\n    }\n  }\n}\n","/****************************************************************************\n * Copyright 2017, 2020, 2022, Optimizely, Inc. and contributors                  *\n *                                                                          *\n * Licensed under the Apache License, Version 2.0 (the \"License\");          *\n * you may not use this file except in compliance with the License.         *\n * You may obtain a copy of the License at                                  *\n *                                                                          *\n *    http://www.apache.org/licenses/LICENSE-2.0                            *\n *                                                                          *\n * Unless required by applicable law or agreed to in writing, software      *\n * distributed under the License is distributed on an \"AS IS\" BASIS,        *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *\n * See the License for the specific language governing permissions and      *\n * limitations under the License.                                           *\n ***************************************************************************/\n\n/**\n * Provides utility method for validating that the given user profile service implementation is valid.\n */\n\nimport { sprintf } from '../../utils/fns';\nimport { ObjectWithUnknownProperties } from '../../shared_types';\n\nimport { ERROR_MESSAGES } from '../enums';\n\nconst MODULE_NAME = 'USER_PROFILE_SERVICE_VALIDATOR';\n\n/**\n * Validates user's provided user profile service instance\n * @param  {unknown}  userProfileServiceInstance\n * @return {boolean} true if the instance is valid\n * @throws If the instance is not valid\n */\n\nexport function validate(userProfileServiceInstance: unknown): boolean {\n  if (typeof userProfileServiceInstance === 'object' && userProfileServiceInstance !== null) {\n    if (typeof (userProfileServiceInstance as ObjectWithUnknownProperties)['lookup'] !== 'function') {\n      throw new Error(sprintf(ERROR_MESSAGES.INVALID_USER_PROFILE_SERVICE, MODULE_NAME, \"Missing function 'lookup'\"));\n    } else if (typeof (userProfileServiceInstance as ObjectWithUnknownProperties)['save'] !== 'function') {\n      throw new Error(sprintf(ERROR_MESSAGES.INVALID_USER_PROFILE_SERVICE, MODULE_NAME, \"Missing function 'save'\"));\n    }\n    return true;\n  }\n  throw new Error(sprintf(ERROR_MESSAGES.INVALID_USER_PROFILE_SERVICE, MODULE_NAME));\n}\n","/****************************************************************************\n * Copyright 2020-2024, Optimizely, Inc. and contributors                   *\n *                                                                          *\n * Licensed under the Apache License, Version 2.0 (the \"License\");          *\n * you may not use this file except in compliance with the License.         *\n * You may obtain a copy of the License at                                  *\n *                                                                          *\n *    https://www.apache.org/licenses/LICENSE-2.0                           *\n *                                                                          *\n * Unless required by applicable law or agreed to in writing, software      *\n * distributed under the License is distributed on an \"AS IS\" BASIS,        *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *\n * See the License for the specific language governing permissions and      *\n * limitations under the License.                                           *\n ***************************************************************************/\n\nimport { LoggerFacade, ErrorHandler } from '../modules/logging';\nimport { sprintf, objectValues } from '../utils/fns';\nimport { NotificationCenter } from '../core/notification_center';\nimport { EventProcessor } from '../modules/event_processor';\n\nimport { IOdpManager } from '../core/odp/odp_manager';\nimport { OdpConfig } from '../core/odp/odp_config';\nimport { OdpEvent } from '../core/odp/odp_event';\nimport { OptimizelySegmentOption } from '../core/odp/optimizely_segment_option';\n\nimport {\n  UserAttributes,\n  EventTags,\n  OptimizelyConfig,\n  OnReadyResult,\n  UserProfileService,\n  Variation,\n  FeatureFlag,\n  FeatureVariable,\n  OptimizelyOptions,\n  OptimizelyDecideOption,\n  FeatureVariableValue,\n  OptimizelyDecision,\n  Client,\n} from '../shared_types';\nimport { newErrorDecision } from '../optimizely_decision';\nimport OptimizelyUserContext from '../optimizely_user_context';\nimport { createProjectConfigManager, ProjectConfigManager } from '../core/project_config/project_config_manager';\nimport { createDecisionService, DecisionService, DecisionObj } from '../core/decision_service';\nimport { getImpressionEvent, getConversionEvent } from '../core/event_builder';\nimport { buildImpressionEvent, buildConversionEvent } from '../core/event_builder/event_helpers';\nimport { NotificationRegistry } from '../core/notification_center/notification_registry';\nimport fns from '../utils/fns';\nimport { validate } from '../utils/attributes_validator';\nimport * as eventTagsValidator from '../utils/event_tags_validator';\nimport * as projectConfig from '../core/project_config';\nimport * as userProfileServiceValidator from '../utils/user_profile_service_validator';\nimport * as stringValidator from '../utils/string_value_validator';\nimport * as decision from '../core/decision';\n\nimport {\n  ERROR_MESSAGES,\n  LOG_LEVEL,\n  LOG_MESSAGES,\n  DECISION_SOURCES,\n  DECISION_MESSAGES,\n  FEATURE_VARIABLE_TYPES,\n  DECISION_NOTIFICATION_TYPES,\n  NOTIFICATION_TYPES,\n  NODE_CLIENT_ENGINE,\n  NODE_CLIENT_VERSION,\n  ODP_DEFAULT_EVENT_TYPE,\n  FS_USER_ID_ALIAS,\n  ODP_USER_KEY,\n} from '../utils/enums';\n\nconst MODULE_NAME = 'OPTIMIZELY';\n\nconst DEFAULT_ONREADY_TIMEOUT = 30000;\n\n// TODO: Make feature_key, user_id, variable_key, experiment_key, event_key camelCase\ntype InputKey = 'feature_key' | 'user_id' | 'variable_key' | 'experiment_key' | 'event_key' | 'variation_id';\n\ntype StringInputs = Partial<Record<InputKey, unknown>>;\n\nexport default class Optimizely implements Client {\n  private isOptimizelyConfigValid: boolean;\n  private disposeOnUpdate: (() => void) | null;\n  private readyPromise: Promise<{ success: boolean; reason?: string }>;\n  // readyTimeout is specified as any to make this work in both browser & Node\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private readyTimeouts: { [key: string]: { readyTimeout: any; onClose: () => void } };\n  private nextReadyTimeoutId: number;\n  private clientEngine: string;\n  private clientVersion: string;\n  private errorHandler: ErrorHandler;\n  protected logger: LoggerFacade;\n  private projectConfigManager: ProjectConfigManager;\n  private decisionService: DecisionService;\n  private eventProcessor: EventProcessor;\n  private defaultDecideOptions: { [key: string]: boolean };\n  protected odpManager?: IOdpManager;\n  public notificationCenter: NotificationCenter;\n\n  constructor(config: OptimizelyOptions) {\n    let clientEngine = config.clientEngine;\n    if (!clientEngine) {\n      config.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.INVALID_CLIENT_ENGINE, MODULE_NAME, clientEngine);\n      clientEngine = NODE_CLIENT_ENGINE;\n    }\n\n    this.clientEngine = clientEngine;\n    this.clientVersion = config.clientVersion || NODE_CLIENT_VERSION;\n    this.errorHandler = config.errorHandler;\n    this.isOptimizelyConfigValid = config.isValidInstance;\n    this.logger = config.logger;\n\n    let decideOptionsArray = config.defaultDecideOptions ?? [];\n    if (!Array.isArray(decideOptionsArray)) {\n      this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.INVALID_DEFAULT_DECIDE_OPTIONS, MODULE_NAME);\n      decideOptionsArray = [];\n    }\n\n    const defaultDecideOptions: { [key: string]: boolean } = {};\n    decideOptionsArray.forEach(option => {\n      // Filter out all provided default decide options that are not in OptimizelyDecideOption[]\n      if (OptimizelyDecideOption[option]) {\n        defaultDecideOptions[option] = true;\n      } else {\n        this.logger.log(LOG_LEVEL.WARNING, LOG_MESSAGES.UNRECOGNIZED_DECIDE_OPTION, MODULE_NAME, option);\n      }\n    });\n    this.defaultDecideOptions = defaultDecideOptions;\n    this.projectConfigManager = createProjectConfigManager({\n      datafile: config.datafile,\n      jsonSchemaValidator: config.jsonSchemaValidator,\n      sdkKey: config.sdkKey,\n      datafileManager: config.datafileManager,\n    });\n\n    this.disposeOnUpdate = this.projectConfigManager.onUpdate((configObj: projectConfig.ProjectConfig) => {\n      this.logger.log(\n        LOG_LEVEL.INFO,\n        LOG_MESSAGES.UPDATED_OPTIMIZELY_CONFIG,\n        MODULE_NAME,\n        configObj.revision,\n        configObj.projectId\n      );\n\n      this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.OPTIMIZELY_CONFIG_UPDATE);\n\n      NotificationRegistry.getNotificationCenter(config.sdkKey)?.sendNotifications(\n        NOTIFICATION_TYPES.OPTIMIZELY_CONFIG_UPDATE\n      );\n\n      this.updateOdpSettings();\n    });\n\n    const projectConfigManagerReadyPromise = this.projectConfigManager.onReady();\n\n    let userProfileService: UserProfileService | null = null;\n    if (config.userProfileService) {\n      try {\n        if (userProfileServiceValidator.validate(config.userProfileService)) {\n          userProfileService = config.userProfileService;\n          this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.VALID_USER_PROFILE_SERVICE, MODULE_NAME);\n        }\n      } catch (ex) {\n        this.logger.log(LOG_LEVEL.WARNING, ex.message);\n      }\n    }\n\n    this.decisionService = createDecisionService({\n      userProfileService: userProfileService,\n      logger: this.logger,\n      UNSTABLE_conditionEvaluators: config.UNSTABLE_conditionEvaluators,\n    });\n\n    this.notificationCenter = config.notificationCenter;\n\n    this.eventProcessor = config.eventProcessor;\n\n    const eventProcessorStartedPromise = this.eventProcessor.start();\n\n    const dependentPromises: Array<Promise<any>> = [projectConfigManagerReadyPromise, eventProcessorStartedPromise];\n\n    if (config.odpManager?.initPromise) {\n      dependentPromises.push(config.odpManager.initPromise);\n    }\n\n    this.readyPromise = Promise.all(dependentPromises).then(promiseResults => {\n      // If no odpManager exists yet, creates a new one\n      if (config.odpManager != null) {\n        this.odpManager = config.odpManager;\n        this.odpManager.eventManager?.start();\n        this.updateOdpSettings();\n        const sdkKey = this.projectConfigManager.getConfig()?.sdkKey;\n        if (sdkKey != null) {\n          NotificationRegistry.getNotificationCenter(\n            sdkKey,\n            this.logger\n          )?.addNotificationListener(NOTIFICATION_TYPES.OPTIMIZELY_CONFIG_UPDATE, () => this.updateOdpSettings());\n        } else {\n          this.logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.ODP_SDK_KEY_MISSING_NOTIFICATION_CENTER_FAILURE);\n        }\n      }\n\n      // Only return status from project config promise because event processor promise does not return any status.\n      return promiseResults[0];\n    });\n\n    this.readyTimeouts = {};\n    this.nextReadyTimeoutId = 0;\n  }\n\n  /**\n   * Returns a truthy value if this instance currently has a valid project config\n   * object, and the initial configuration object that was passed into the\n   * constructor was also valid.\n   * @return {boolean}\n   */\n  isValidInstance(): boolean {\n    return this.isOptimizelyConfigValid && !!this.projectConfigManager.getConfig();\n  }\n\n  /**\n   * Buckets visitor and sends impression event to Optimizely.\n   * @param  {string}             experimentKey\n   * @param  {string}             userId\n   * @param  {UserAttributes}     attributes\n   * @return {string|null}        variation key\n   */\n  activate(experimentKey: string, userId: string, attributes?: UserAttributes): string | null {\n    try {\n      if (!this.isValidInstance()) {\n        this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'activate');\n        return null;\n      }\n\n      if (!this.validateInputs({ experiment_key: experimentKey, user_id: userId }, attributes)) {\n        return this.notActivatingExperiment(experimentKey, userId);\n      }\n\n      const configObj = this.projectConfigManager.getConfig();\n      if (!configObj) {\n        return null;\n      }\n\n      try {\n        const variationKey = this.getVariation(experimentKey, userId, attributes);\n        if (variationKey === null) {\n          return this.notActivatingExperiment(experimentKey, userId);\n        }\n\n        // If experiment is not set to 'Running' status, log accordingly and return variation key\n        if (!projectConfig.isRunning(configObj, experimentKey)) {\n          this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.SHOULD_NOT_DISPATCH_ACTIVATE, MODULE_NAME, experimentKey);\n          return variationKey;\n        }\n\n        const experiment = projectConfig.getExperimentFromKey(configObj, experimentKey);\n        const variation = experiment.variationKeyMap[variationKey];\n        const decisionObj = {\n          experiment: experiment,\n          variation: variation,\n          decisionSource: DECISION_SOURCES.EXPERIMENT,\n        };\n\n        this.sendImpressionEvent(decisionObj, '', userId, true, attributes);\n        return variationKey;\n      } catch (ex) {\n        this.logger.log(LOG_LEVEL.ERROR, ex.message);\n        this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.NOT_ACTIVATING_USER, MODULE_NAME, userId, experimentKey);\n        this.errorHandler.handleError(ex);\n        return null;\n      }\n    } catch (e) {\n      this.logger.log(LOG_LEVEL.ERROR, e.message);\n      this.errorHandler.handleError(e);\n      return null;\n    }\n  }\n\n  /**\n   * Create an impression event and call the event dispatcher's dispatch method to\n   * send this event to Optimizely. Then use the notification center to trigger\n   * any notification listeners for the ACTIVATE notification type.\n   * @param {DecisionObj}    decisionObj    Decision Object\n   * @param {string}         flagKey        Key for a feature flag\n   * @param {string}         userId         ID of user to whom the variation was shown\n   * @param {UserAttributes} attributes     Optional user attributes\n   * @param {boolean}        enabled        Boolean representing if feature is enabled\n   */\n  private sendImpressionEvent(\n    decisionObj: DecisionObj,\n    flagKey: string,\n    userId: string,\n    enabled: boolean,\n    attributes?: UserAttributes\n  ): void {\n    const configObj = this.projectConfigManager.getConfig();\n    if (!configObj) {\n      return;\n    }\n    const impressionEvent = buildImpressionEvent({\n      decisionObj: decisionObj,\n      flagKey: flagKey,\n      enabled: enabled,\n      userId: userId,\n      userAttributes: attributes,\n      clientEngine: this.clientEngine,\n      clientVersion: this.clientVersion,\n      configObj: configObj,\n    });\n    // TODO is it okay to not pass a projectConfig as second argument\n    this.eventProcessor.process(impressionEvent);\n    this.emitNotificationCenterActivate(decisionObj, flagKey, userId, enabled, attributes);\n  }\n\n  /**\n   * Emit the ACTIVATE notification on the notificationCenter\n   * @param  {DecisionObj}    decisionObj    Decision object\n   * @param  {string}         flagKey        Key for a feature flag\n   * @param  {string}         userId         ID of user to whom the variation was shown\n   * @param  {boolean}        enabled        Boolean representing if feature is enabled\n   * @param  {UserAttributes} attributes     Optional user attributes\n   */\n  private emitNotificationCenterActivate(\n    decisionObj: DecisionObj,\n    flagKey: string,\n    userId: string,\n    enabled: boolean,\n    attributes?: UserAttributes\n  ): void {\n    const configObj = this.projectConfigManager.getConfig();\n    if (!configObj) {\n      return;\n    }\n\n    const ruleType = decisionObj.decisionSource;\n    const experimentKey = decision.getExperimentKey(decisionObj);\n    const experimentId = decision.getExperimentId(decisionObj);\n    const variationKey = decision.getVariationKey(decisionObj);\n    const variationId = decision.getVariationId(decisionObj);\n\n    let experiment;\n\n    if (experimentId !== null && variationKey !== '') {\n      experiment = configObj.experimentIdMap[experimentId];\n    }\n\n    const impressionEventOptions = {\n      attributes: attributes,\n      clientEngine: this.clientEngine,\n      clientVersion: this.clientVersion,\n      configObj: configObj,\n      experimentId: experimentId,\n      ruleKey: experimentKey,\n      flagKey: flagKey,\n      ruleType: ruleType,\n      userId: userId,\n      enabled: enabled,\n      variationId: variationId,\n      logger: this.logger,\n    };\n    const impressionEvent = getImpressionEvent(impressionEventOptions);\n    let variation;\n    if (experiment && experiment.variationKeyMap && variationKey !== '') {\n      variation = experiment.variationKeyMap[variationKey];\n    }\n    this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.ACTIVATE, {\n      experiment: experiment,\n      userId: userId,\n      attributes: attributes,\n      variation: variation,\n      logEvent: impressionEvent,\n    });\n  }\n\n  /**\n   * Sends conversion event to Optimizely.\n   * @param  {string}         eventKey\n   * @param  {string}         userId\n   * @param  {UserAttributes} attributes\n   * @param  {EventTags}      eventTags Values associated with the event.\n   */\n  track(eventKey: string, userId: string, attributes?: UserAttributes, eventTags?: EventTags): void {\n    try {\n      if (!this.isValidInstance()) {\n        this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'track');\n        return;\n      }\n\n      if (!this.validateInputs({ user_id: userId, event_key: eventKey }, attributes, eventTags)) {\n        return;\n      }\n\n      const configObj = this.projectConfigManager.getConfig();\n      if (!configObj) {\n        return;\n      }\n\n      if (!projectConfig.eventWithKeyExists(configObj, eventKey)) {\n        this.logger.log(LOG_LEVEL.WARNING, LOG_MESSAGES.EVENT_KEY_NOT_FOUND, MODULE_NAME, eventKey);\n        this.logger.log(LOG_LEVEL.WARNING, LOG_MESSAGES.NOT_TRACKING_USER, MODULE_NAME, userId);\n        return;\n      }\n\n      // remove null values from eventTags\n      eventTags = this.filterEmptyValues(eventTags);\n      const conversionEvent = buildConversionEvent({\n        eventKey: eventKey,\n        eventTags: eventTags,\n        userId: userId,\n        userAttributes: attributes,\n        clientEngine: this.clientEngine,\n        clientVersion: this.clientVersion,\n        configObj: configObj,\n      });\n      this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.TRACK_EVENT, MODULE_NAME, eventKey, userId);\n      // TODO is it okay to not pass a projectConfig as second argument\n      this.eventProcessor.process(conversionEvent);\n      this.emitNotificationCenterTrack(eventKey, userId, attributes, eventTags);\n    } catch (e) {\n      this.logger.log(LOG_LEVEL.ERROR, e.message);\n      this.errorHandler.handleError(e);\n      this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.NOT_TRACKING_USER, MODULE_NAME, userId);\n    }\n  }\n  /**\n   * Send TRACK event to notificationCenter\n   * @param  {string}         eventKey\n   * @param  {string}         userId\n   * @param  {UserAttributes} attributes\n   * @param  {EventTags}      eventTags Values associated with the event.\n   */\n  private emitNotificationCenterTrack(\n    eventKey: string,\n    userId: string,\n    attributes?: UserAttributes,\n    eventTags?: EventTags\n  ): void {\n    try {\n      const configObj = this.projectConfigManager.getConfig();\n      if (!configObj) {\n        return;\n      }\n\n      const conversionEventOptions = {\n        attributes: attributes,\n        clientEngine: this.clientEngine,\n        clientVersion: this.clientVersion,\n        configObj: configObj,\n        eventKey: eventKey,\n        eventTags: eventTags,\n        logger: this.logger,\n        userId: userId,\n      };\n      const conversionEvent = getConversionEvent(conversionEventOptions);\n\n      this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.TRACK, {\n        eventKey: eventKey,\n        userId: userId,\n        attributes: attributes,\n        eventTags: eventTags,\n        logEvent: conversionEvent,\n      });\n    } catch (ex) {\n      this.logger.log(LOG_LEVEL.ERROR, ex.message);\n      this.errorHandler.handleError(ex);\n    }\n  }\n\n  /**\n   * Gets variation where visitor will be bucketed.\n   * @param  {string}              experimentKey\n   * @param  {string}              userId\n   * @param  {UserAttributes}      attributes\n   * @return {string|null}         variation key\n   */\n  getVariation(experimentKey: string, userId: string, attributes?: UserAttributes): string | null {\n    try {\n      if (!this.isValidInstance()) {\n        this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'getVariation');\n        return null;\n      }\n\n      try {\n        if (!this.validateInputs({ experiment_key: experimentKey, user_id: userId }, attributes)) {\n          return null;\n        }\n\n        const configObj = this.projectConfigManager.getConfig();\n        if (!configObj) {\n          return null;\n        }\n\n        const experiment = configObj.experimentKeyMap[experimentKey];\n        if (!experiment) {\n          this.logger.log(LOG_LEVEL.DEBUG, ERROR_MESSAGES.INVALID_EXPERIMENT_KEY, MODULE_NAME, experimentKey);\n          return null;\n        }\n\n        const variationKey = this.decisionService.getVariation(\n          configObj,\n          experiment,\n          this.createInternalUserContext(userId, attributes) as OptimizelyUserContext\n        ).result;\n        const decisionNotificationType = projectConfig.isFeatureExperiment(configObj, experiment.id)\n          ? DECISION_NOTIFICATION_TYPES.FEATURE_TEST\n          : DECISION_NOTIFICATION_TYPES.AB_TEST;\n\n        this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.DECISION, {\n          type: decisionNotificationType,\n          userId: userId,\n          attributes: attributes || {},\n          decisionInfo: {\n            experimentKey: experimentKey,\n            variationKey: variationKey,\n          },\n        });\n\n        return variationKey;\n      } catch (ex) {\n        this.logger.log(LOG_LEVEL.ERROR, ex.message);\n        this.errorHandler.handleError(ex);\n        return null;\n      }\n    } catch (e) {\n      this.logger.log(LOG_LEVEL.ERROR, e.message);\n      this.errorHandler.handleError(e);\n      return null;\n    }\n  }\n\n  /**\n   * Force a user into a variation for a given experiment.\n   * @param  {string}      experimentKey\n   * @param  {string}      userId\n   * @param  {string|null} variationKey   user will be forced into. If null,\n   *                                      then clear the existing experiment-to-variation mapping.\n   * @return {boolean}                    A boolean value that indicates if the set completed successfully.\n   */\n  setForcedVariation(experimentKey: string, userId: string, variationKey: string | null): boolean {\n    if (!this.validateInputs({ experiment_key: experimentKey, user_id: userId })) {\n      return false;\n    }\n\n    const configObj = this.projectConfigManager.getConfig();\n    if (!configObj) {\n      return false;\n    }\n\n    try {\n      return this.decisionService.setForcedVariation(configObj, experimentKey, userId, variationKey);\n    } catch (ex) {\n      this.logger.log(LOG_LEVEL.ERROR, ex.message);\n      this.errorHandler.handleError(ex);\n      return false;\n    }\n  }\n\n  /**\n   * Gets the forced variation for a given user and experiment.\n   * @param  {string}      experimentKey\n   * @param  {string}      userId\n   * @return {string|null} The forced variation key.\n   */\n  getForcedVariation(experimentKey: string, userId: string): string | null {\n    if (!this.validateInputs({ experiment_key: experimentKey, user_id: userId })) {\n      return null;\n    }\n\n    const configObj = this.projectConfigManager.getConfig();\n    if (!configObj) {\n      return null;\n    }\n\n    try {\n      return this.decisionService.getForcedVariation(configObj, experimentKey, userId).result;\n    } catch (ex) {\n      this.logger.log(LOG_LEVEL.ERROR, ex.message);\n      this.errorHandler.handleError(ex);\n      return null;\n    }\n  }\n\n  /**\n   * Validate string inputs, user attributes and event tags.\n   * @param  {StringInputs}  stringInputs   Map of string keys and associated values\n   * @param  {unknown}       userAttributes Optional parameter for user's attributes\n   * @param  {unknown}       eventTags      Optional parameter for event tags\n   * @return {boolean}                      True if inputs are valid\n   *\n   */\n  protected validateInputs(stringInputs: StringInputs, userAttributes?: unknown, eventTags?: unknown): boolean {\n    try {\n      if (stringInputs.hasOwnProperty('user_id')) {\n        const userId = stringInputs['user_id'];\n        if (typeof userId !== 'string' || userId === null || userId === 'undefined') {\n          throw new Error(sprintf(ERROR_MESSAGES.INVALID_INPUT_FORMAT, MODULE_NAME, 'user_id'));\n        }\n\n        delete stringInputs['user_id'];\n      }\n      Object.keys(stringInputs).forEach(key => {\n        if (!stringValidator.validate(stringInputs[key as InputKey])) {\n          throw new Error(sprintf(ERROR_MESSAGES.INVALID_INPUT_FORMAT, MODULE_NAME, key));\n        }\n      });\n      if (userAttributes) {\n        validate(userAttributes);\n      }\n      if (eventTags) {\n        eventTagsValidator.validate(eventTags);\n      }\n      return true;\n    } catch (ex) {\n      this.logger.log(LOG_LEVEL.ERROR, ex.message);\n      this.errorHandler.handleError(ex);\n      return false;\n    }\n  }\n\n  /**\n   * Shows failed activation log message and returns null when user is not activated in experiment\n   * @param  {string} experimentKey\n   * @param  {string} userId\n   * @return {null}\n   */\n  private notActivatingExperiment(experimentKey: string, userId: string): null {\n    this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.NOT_ACTIVATING_USER, MODULE_NAME, userId, experimentKey);\n    return null;\n  }\n\n  /**\n   * Filters out attributes/eventTags with null or undefined values\n   * @param   {EventTags | undefined} map\n   * @returns {EventTags | undefined}\n   */\n  private filterEmptyValues(map: EventTags | undefined): EventTags | undefined {\n    for (const key in map) {\n      if (map.hasOwnProperty(key) && (map[key] === null || map[key] === undefined)) {\n        delete map[key];\n      }\n    }\n    return map;\n  }\n\n  /**\n   * Returns true if the feature is enabled for the given user.\n   * @param  {string}         featureKey   Key of feature which will be checked\n   * @param  {string}         userId       ID of user which will be checked\n   * @param  {UserAttributes} attributes   Optional user attributes\n   * @return {boolean}                     true if the feature is enabled for the user, false otherwise\n   */\n  isFeatureEnabled(featureKey: string, userId: string, attributes?: UserAttributes): boolean {\n    try {\n      if (!this.isValidInstance()) {\n        this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'isFeatureEnabled');\n        return false;\n      }\n\n      if (!this.validateInputs({ feature_key: featureKey, user_id: userId }, attributes)) {\n        return false;\n      }\n\n      const configObj = this.projectConfigManager.getConfig();\n      if (!configObj) {\n        return false;\n      }\n\n      const feature = projectConfig.getFeatureFromKey(configObj, featureKey, this.logger);\n      if (!feature) {\n        return false;\n      }\n\n      let sourceInfo = {};\n      const user = this.createInternalUserContext(userId, attributes) as OptimizelyUserContext;\n      const decisionObj = this.decisionService.getVariationForFeature(configObj, feature, user).result;\n      const decisionSource = decisionObj.decisionSource;\n      const experimentKey = decision.getExperimentKey(decisionObj);\n      const variationKey = decision.getVariationKey(decisionObj);\n\n      let featureEnabled = decision.getFeatureEnabledFromVariation(decisionObj);\n\n      if (decisionSource === DECISION_SOURCES.FEATURE_TEST) {\n        sourceInfo = {\n          experimentKey: experimentKey,\n          variationKey: variationKey,\n        };\n      }\n\n      if (\n        decisionSource === DECISION_SOURCES.FEATURE_TEST ||\n        (decisionSource === DECISION_SOURCES.ROLLOUT && projectConfig.getSendFlagDecisionsValue(configObj))\n      ) {\n        this.sendImpressionEvent(decisionObj, feature.key, userId, featureEnabled, attributes);\n      }\n\n      if (featureEnabled === true) {\n        this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.FEATURE_ENABLED_FOR_USER, MODULE_NAME, featureKey, userId);\n      } else {\n        this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.FEATURE_NOT_ENABLED_FOR_USER, MODULE_NAME, featureKey, userId);\n        featureEnabled = false;\n      }\n\n      const featureInfo = {\n        featureKey: featureKey,\n        featureEnabled: featureEnabled,\n        source: decisionObj.decisionSource,\n        sourceInfo: sourceInfo,\n      };\n\n      this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.DECISION, {\n        type: DECISION_NOTIFICATION_TYPES.FEATURE,\n        userId: userId,\n        attributes: attributes || {},\n        decisionInfo: featureInfo,\n      });\n\n      return featureEnabled;\n    } catch (e) {\n      this.logger.log(LOG_LEVEL.ERROR, e.message);\n      this.errorHandler.handleError(e);\n      return false;\n    }\n  }\n\n  /**\n   * Returns an Array containing the keys of all features in the project that are\n   * enabled for the given user.\n   * @param  {string}         userId\n   * @param  {UserAttributes} attributes\n   * @return {string[]}       Array of feature keys (strings)\n   */\n  getEnabledFeatures(userId: string, attributes?: UserAttributes): string[] {\n    try {\n      const enabledFeatures: string[] = [];\n      if (!this.isValidInstance()) {\n        this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'getEnabledFeatures');\n        return enabledFeatures;\n      }\n\n      if (!this.validateInputs({ user_id: userId })) {\n        return enabledFeatures;\n      }\n\n      const configObj = this.projectConfigManager.getConfig();\n      if (!configObj) {\n        return enabledFeatures;\n      }\n\n      objectValues(configObj.featureKeyMap).forEach((feature: FeatureFlag) => {\n        if (this.isFeatureEnabled(feature.key, userId, attributes)) {\n          enabledFeatures.push(feature.key);\n        }\n      });\n\n      return enabledFeatures;\n    } catch (e) {\n      this.logger.log(LOG_LEVEL.ERROR, e.message);\n      this.errorHandler.handleError(e);\n      return [];\n    }\n  }\n\n  /**\n   * Returns dynamically-typed value of the variable attached to the given\n   * feature flag. Returns null if the feature key or variable key is invalid.\n   *\n   * @param  {string}          featureKey           Key of the feature whose variable's\n   *                                                value is being accessed\n   * @param  {string}          variableKey          Key of the variable whose value is\n   *                                                being accessed\n   * @param  {string}          userId               ID for the user\n   * @param  {UserAttributes}  attributes           Optional user attributes\n   * @return {unknown}                              Value of the variable cast to the appropriate\n   *                                                type, or null if the feature key is invalid or\n   *                                                the variable key is invalid\n   */\n  getFeatureVariable(\n    featureKey: string,\n    variableKey: string,\n    userId: string,\n    attributes?: UserAttributes\n  ): FeatureVariableValue {\n    try {\n      if (!this.isValidInstance()) {\n        this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'getFeatureVariable');\n        return null;\n      }\n      return this.getFeatureVariableForType(featureKey, variableKey, null, userId, attributes);\n    } catch (e) {\n      this.logger.log(LOG_LEVEL.ERROR, e.message);\n      this.errorHandler.handleError(e);\n      return null;\n    }\n  }\n\n  /**\n   * Helper method to get the value for a variable of a certain type attached to a\n   * feature flag. Returns null if the feature key is invalid, the variable key is\n   * invalid, the given variable type does not match the variable's actual type,\n   * or the variable value cannot be cast to the required type. If the given variable\n   * type is null, the value of the variable cast to the appropriate type is returned.\n   *\n   * @param   {string}         featureKey           Key of the feature whose variable's value is\n   *                                                being accessed\n   * @param   {string}         variableKey          Key of the variable whose value is being\n   *                                                accessed\n   * @param   {string|null}    variableType         Type of the variable whose value is being\n   *                                                accessed (must be one of FEATURE_VARIABLE_TYPES\n   *                                                in lib/utils/enums/index.js), or null to return the\n   *                                                value of the variable cast to the appropriate type\n   * @param   {string}         userId               ID for the user\n   * @param   {UserAttributes} attributes           Optional user attributes\n   * @return  {unknown}                             Value of the variable cast to the appropriate\n   *                                                type, or null if the feature key is invalid, thevariable\n   *                                                key is invalid, or there is a mismatch with the type of\n   *                                                the variable\n   */\n  private getFeatureVariableForType(\n    featureKey: string,\n    variableKey: string,\n    variableType: string | null,\n    userId: string,\n    attributes?: UserAttributes\n  ): FeatureVariableValue {\n    if (!this.validateInputs({ feature_key: featureKey, variable_key: variableKey, user_id: userId }, attributes)) {\n      return null;\n    }\n\n    const configObj = this.projectConfigManager.getConfig();\n    if (!configObj) {\n      return null;\n    }\n\n    const featureFlag = projectConfig.getFeatureFromKey(configObj, featureKey, this.logger);\n    if (!featureFlag) {\n      return null;\n    }\n\n    const variable = projectConfig.getVariableForFeature(configObj, featureKey, variableKey, this.logger);\n    if (!variable) {\n      return null;\n    }\n\n    if (variableType && variable.type !== variableType) {\n      this.logger.log(\n        LOG_LEVEL.WARNING,\n        LOG_MESSAGES.VARIABLE_REQUESTED_WITH_WRONG_TYPE,\n        MODULE_NAME,\n        variableType,\n        variable.type\n      );\n      return null;\n    }\n\n    const user = this.createInternalUserContext(userId, attributes) as OptimizelyUserContext;\n    const decisionObj = this.decisionService.getVariationForFeature(configObj, featureFlag, user).result;\n    const featureEnabled = decision.getFeatureEnabledFromVariation(decisionObj);\n    const variableValue = this.getFeatureVariableValueFromVariation(\n      featureKey,\n      featureEnabled,\n      decisionObj.variation,\n      variable,\n      userId\n    );\n    let sourceInfo = {};\n    if (\n      decisionObj.decisionSource === DECISION_SOURCES.FEATURE_TEST &&\n      decisionObj.experiment !== null &&\n      decisionObj.variation !== null\n    ) {\n      sourceInfo = {\n        experimentKey: decisionObj.experiment.key,\n        variationKey: decisionObj.variation.key,\n      };\n    }\n\n    this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.DECISION, {\n      type: DECISION_NOTIFICATION_TYPES.FEATURE_VARIABLE,\n      userId: userId,\n      attributes: attributes || {},\n      decisionInfo: {\n        featureKey: featureKey,\n        featureEnabled: featureEnabled,\n        source: decisionObj.decisionSource,\n        variableKey: variableKey,\n        variableValue: variableValue,\n        variableType: variable.type,\n        sourceInfo: sourceInfo,\n      },\n    });\n    return variableValue;\n  }\n\n  /**\n   * Helper method to get the non type-casted value for a variable attached to a\n   * feature flag. Returns appropriate variable value depending on whether there\n   * was a matching variation, feature was enabled or not or varible was part of the\n   * available variation or not. Also logs the appropriate message explaining how it\n   * evaluated the value of the variable.\n   *\n   * @param  {string}          featureKey           Key of the feature whose variable's value is\n   *                                                being accessed\n   * @param  {boolean}         featureEnabled       Boolean indicating if feature is enabled or not\n   * @param  {Variation}       variation            variation returned by decision service\n   * @param  {FeatureVariable} variable             varible whose value is being evaluated\n   * @param  {string}          userId               ID for the user\n   * @return {unknown}                              Value of the variable or null if the\n   *                                                config Obj is null\n   */\n  private getFeatureVariableValueFromVariation(\n    featureKey: string,\n    featureEnabled: boolean,\n    variation: Variation | null,\n    variable: FeatureVariable,\n    userId: string\n  ): FeatureVariableValue {\n    const configObj = this.projectConfigManager.getConfig();\n    if (!configObj) {\n      return null;\n    }\n\n    let variableValue = variable.defaultValue;\n    if (variation !== null) {\n      const value = projectConfig.getVariableValueForVariation(configObj, variable, variation, this.logger);\n      if (value !== null) {\n        if (featureEnabled) {\n          variableValue = value;\n          this.logger.log(\n            LOG_LEVEL.INFO,\n            LOG_MESSAGES.USER_RECEIVED_VARIABLE_VALUE,\n            MODULE_NAME,\n            variableValue,\n            variable.key,\n            featureKey\n          );\n        } else {\n          this.logger.log(\n            LOG_LEVEL.INFO,\n            LOG_MESSAGES.FEATURE_NOT_ENABLED_RETURN_DEFAULT_VARIABLE_VALUE,\n            MODULE_NAME,\n            featureKey,\n            userId,\n            variableValue\n          );\n        }\n      } else {\n        this.logger.log(\n          LOG_LEVEL.INFO,\n          LOG_MESSAGES.VARIABLE_NOT_USED_RETURN_DEFAULT_VARIABLE_VALUE,\n          MODULE_NAME,\n          variable.key,\n          variation.key\n        );\n      }\n    } else {\n      this.logger.log(\n        LOG_LEVEL.INFO,\n        LOG_MESSAGES.USER_RECEIVED_DEFAULT_VARIABLE_VALUE,\n        MODULE_NAME,\n        userId,\n        variable.key,\n        featureKey\n      );\n    }\n\n    return projectConfig.getTypeCastValue(variableValue, variable.type, this.logger);\n  }\n\n  /**\n   * Returns value for the given boolean variable attached to the given feature\n   * flag.\n   * @param  {string}         featureKey   Key of the feature whose variable's value is\n   *                                       being accessed\n   * @param  {string}         variableKey  Key of the variable whose value is being\n   *                                       accessed\n   * @param  {string}         userId       ID for the user\n   * @param  {UserAttributes} attributes   Optional user attributes\n   * @return {boolean|null}                Boolean value of the variable, or null if the\n   *                                       feature key is invalid, the variable key is invalid,\n   *                                       or there is a mismatch with the type of the variable.\n   */\n  getFeatureVariableBoolean(\n    featureKey: string,\n    variableKey: string,\n    userId: string,\n    attributes?: UserAttributes\n  ): boolean | null {\n    try {\n      if (!this.isValidInstance()) {\n        this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'getFeatureVariableBoolean');\n        return null;\n      }\n      return this.getFeatureVariableForType(\n        featureKey,\n        variableKey,\n        FEATURE_VARIABLE_TYPES.BOOLEAN,\n        userId,\n        attributes\n      ) as boolean | null;\n    } catch (e) {\n      this.logger.log(LOG_LEVEL.ERROR, e.message);\n      this.errorHandler.handleError(e);\n      return null;\n    }\n  }\n\n  /**\n   * Returns value for the given double variable attached to the given feature\n   * flag.\n   * @param  {string} featureKey           Key of the feature whose variable's value is\n   *                                       being accessed\n   * @param  {string} variableKey          Key of the variable whose value is being\n   *                                       accessed\n   * @param  {string} userId               ID for the user\n   * @param  {UserAttributes} attributes   Optional user attributes\n   * @return {number|null}                 Number value of the variable, or null if the\n   *                                       feature key is invalid, the variable key is\n   *                                       invalid, or there is a mismatch with the type\n   *                                       of the variable\n   */\n  getFeatureVariableDouble(\n    featureKey: string,\n    variableKey: string,\n    userId: string,\n    attributes?: UserAttributes\n  ): number | null {\n    try {\n      if (!this.isValidInstance()) {\n        this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'getFeatureVariableDouble');\n        return null;\n      }\n      return this.getFeatureVariableForType(\n        featureKey,\n        variableKey,\n        FEATURE_VARIABLE_TYPES.DOUBLE,\n        userId,\n        attributes\n      ) as number | null;\n    } catch (e) {\n      this.logger.log(LOG_LEVEL.ERROR, e.message);\n      this.errorHandler.handleError(e);\n      return null;\n    }\n  }\n\n  /**\n   * Returns value for the given integer variable attached to the given feature\n   * flag.\n   * @param  {string}         featureKey   Key of the feature whose variable's value is\n   *                                       being accessed\n   * @param  {string}         variableKey  Key of the variable whose value is being\n   *                                       accessed\n   * @param  {string}         userId       ID for the user\n   * @param  {UserAttributes} attributes   Optional user attributes\n   * @return {number|null}                 Number value of the variable, or null if the\n   *                                       feature key is invalid, the variable key is\n   *                                       invalid, or there is a mismatch with the type\n   *                                       of the variable\n   */\n  getFeatureVariableInteger(\n    featureKey: string,\n    variableKey: string,\n    userId: string,\n    attributes?: UserAttributes\n  ): number | null {\n    try {\n      if (!this.isValidInstance()) {\n        this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'getFeatureVariableInteger');\n        return null;\n      }\n      return this.getFeatureVariableForType(\n        featureKey,\n        variableKey,\n        FEATURE_VARIABLE_TYPES.INTEGER,\n        userId,\n        attributes\n      ) as number | null;\n    } catch (e) {\n      this.logger.log(LOG_LEVEL.ERROR, e.message);\n      this.errorHandler.handleError(e);\n      return null;\n    }\n  }\n\n  /**\n   * Returns value for the given string variable attached to the given feature\n   * flag.\n   * @param  {string}         featureKey   Key of the feature whose variable's value is\n   *                                       being accessed\n   * @param  {string}         variableKey  Key of the variable whose value is being\n   *                                       accessed\n   * @param  {string}         userId       ID for the user\n   * @param  {UserAttributes} attributes   Optional user attributes\n   * @return {string|null}                 String value of the variable, or null if the\n   *                                       feature key is invalid, the variable key is\n   *                                       invalid, or there is a mismatch with the type\n   *                                       of the variable\n   */\n  getFeatureVariableString(\n    featureKey: string,\n    variableKey: string,\n    userId: string,\n    attributes?: UserAttributes\n  ): string | null {\n    try {\n      if (!this.isValidInstance()) {\n        this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'getFeatureVariableString');\n        return null;\n      }\n      return this.getFeatureVariableForType(\n        featureKey,\n        variableKey,\n        FEATURE_VARIABLE_TYPES.STRING,\n        userId,\n        attributes\n      ) as string | null;\n    } catch (e) {\n      this.logger.log(LOG_LEVEL.ERROR, e.message);\n      this.errorHandler.handleError(e);\n      return null;\n    }\n  }\n\n  /**\n   * Returns value for the given json variable attached to the given feature\n   * flag.\n   * @param  {string}         featureKey   Key of the feature whose variable's value is\n   *                                       being accessed\n   * @param  {string}         variableKey  Key of the variable whose value is being\n   *                                       accessed\n   * @param  {string}         userId       ID for the user\n   * @param  {UserAttributes} attributes   Optional user attributes\n   * @return {unknown}                     Object value of the variable, or null if the\n   *                                       feature key is invalid, the variable key is\n   *                                       invalid, or there is a mismatch with the type\n   *                                       of the variable\n   */\n  getFeatureVariableJSON(featureKey: string, variableKey: string, userId: string, attributes: UserAttributes): unknown {\n    try {\n      if (!this.isValidInstance()) {\n        this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'getFeatureVariableJSON');\n        return null;\n      }\n      return this.getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES.JSON, userId, attributes);\n    } catch (e) {\n      this.logger.log(LOG_LEVEL.ERROR, e.message);\n      this.errorHandler.handleError(e);\n      return null;\n    }\n  }\n\n  /**\n   * Returns values for all the variables attached to the given feature\n   * flag.\n   * @param  {string}         featureKey   Key of the feature whose variables are being\n   *                                       accessed\n   * @param  {string}         userId       ID for the user\n   * @param  {UserAttributes} attributes   Optional user attributes\n   * @return {object|null}                 Object containing all the variables, or null if the\n   *                                       feature key is invalid\n   */\n  getAllFeatureVariables(\n    featureKey: string,\n    userId: string,\n    attributes?: UserAttributes\n  ): { [variableKey: string]: unknown } | null {\n    try {\n      if (!this.isValidInstance()) {\n        this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'getAllFeatureVariables');\n        return null;\n      }\n\n      if (!this.validateInputs({ feature_key: featureKey, user_id: userId }, attributes)) {\n        return null;\n      }\n\n      const configObj = this.projectConfigManager.getConfig();\n      if (!configObj) {\n        return null;\n      }\n\n      const featureFlag = projectConfig.getFeatureFromKey(configObj, featureKey, this.logger);\n      if (!featureFlag) {\n        return null;\n      }\n\n      const user = this.createInternalUserContext(userId, attributes) as OptimizelyUserContext;\n\n      const decisionObj = this.decisionService.getVariationForFeature(configObj, featureFlag, user).result;\n      const featureEnabled = decision.getFeatureEnabledFromVariation(decisionObj);\n      const allVariables: { [variableKey: string]: unknown } = {};\n\n      featureFlag.variables.forEach((variable: FeatureVariable) => {\n        allVariables[variable.key] = this.getFeatureVariableValueFromVariation(\n          featureKey,\n          featureEnabled,\n          decisionObj.variation,\n          variable,\n          userId\n        );\n      });\n\n      let sourceInfo = {};\n      if (\n        decisionObj.decisionSource === DECISION_SOURCES.FEATURE_TEST &&\n        decisionObj.experiment !== null &&\n        decisionObj.variation !== null\n      ) {\n        sourceInfo = {\n          experimentKey: decisionObj.experiment.key,\n          variationKey: decisionObj.variation.key,\n        };\n      }\n      this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.DECISION, {\n        type: DECISION_NOTIFICATION_TYPES.ALL_FEATURE_VARIABLES,\n        userId: userId,\n        attributes: attributes || {},\n        decisionInfo: {\n          featureKey: featureKey,\n          featureEnabled: featureEnabled,\n          source: decisionObj.decisionSource,\n          variableValues: allVariables,\n          sourceInfo: sourceInfo,\n        },\n      });\n\n      return allVariables;\n    } catch (e) {\n      this.logger.log(LOG_LEVEL.ERROR, e.message);\n      this.errorHandler.handleError(e);\n      return null;\n    }\n  }\n\n  /**\n   * Returns OptimizelyConfig object containing experiments and features data\n   * @return {OptimizelyConfig|null}\n   *\n   * OptimizelyConfig Object Schema\n   * {\n   *   'experimentsMap': {\n   *     'my-fist-experiment': {\n   *       'id': '111111',\n   *       'key': 'my-fist-experiment'\n   *       'variationsMap': {\n   *         'variation_1': {\n   *           'id': '121212',\n   *           'key': 'variation_1',\n   *           'variablesMap': {\n   *             'age': {\n   *               'id': '222222',\n   *               'key': 'age',\n   *               'type': 'integer',\n   *               'value': '0',\n   *             }\n   *           }\n   *         }\n   *       }\n   *     }\n   *   },\n   *   'featuresMap': {\n   *     'awesome-feature': {\n   *       'id': '333333',\n   *       'key': 'awesome-feature',\n   *       'experimentsMap': Object,\n   *       'variationsMap': Object,\n   *     }\n   *   }\n   * }\n   */\n  getOptimizelyConfig(): OptimizelyConfig | null {\n    try {\n      const configObj = this.projectConfigManager.getConfig();\n      if (!configObj) {\n        return null;\n      }\n      return this.projectConfigManager.getOptimizelyConfig();\n    } catch (e) {\n      this.logger.log(LOG_LEVEL.ERROR, e.message);\n      this.errorHandler.handleError(e);\n      return null;\n    }\n  }\n\n  /**\n   * Stop background processes belonging to this instance, including:\n   *\n   * - Active datafile requests\n   * - Pending datafile requests\n   * - Pending event queue flushes\n   *\n   * In-flight datafile requests will be aborted. Any events waiting to be sent\n   * as part of a batched event request will be immediately flushed to the event\n   * dispatcher.\n   *\n   * Returns a Promise that fulfills after all in-flight event dispatcher requests\n   * (including any final request resulting from flushing the queue as described\n   * above) are complete. If there are no in-flight event dispatcher requests and\n   * no queued events waiting to be sent, returns an immediately-fulfilled Promise.\n   *\n   * Returned Promises are fulfilled with result objects containing these\n   * properties:\n   *    - success (boolean): true if the event dispatcher signaled completion of\n   *                         all in-flight and final requests, or if there were no\n   *                         queued events and no in-flight requests. false if an\n   *                         unexpected error was encountered during the close\n   *                         process.\n   *    - reason (string=):  If success is false, this is a string property with\n   *                         an explanatory message.\n   *\n   * NOTE: After close is called, this instance is no longer usable - any events\n   * generated will no longer be sent to the event dispatcher.\n   *\n   * @return {Promise}\n   */\n  close(): Promise<{ success: boolean; reason?: string }> {\n    try {\n      if (this.odpManager) {\n        this.odpManager.close();\n      }\n\n      this.notificationCenter.clearAllNotificationListeners();\n      const sdkKey = this.projectConfigManager.getConfig()?.sdkKey;\n      if (sdkKey) {\n        NotificationRegistry.removeNotificationCenter(sdkKey);\n      }\n\n      const eventProcessorStoppedPromise = this.eventProcessor.stop();\n      if (this.disposeOnUpdate) {\n        this.disposeOnUpdate();\n        this.disposeOnUpdate = null;\n      }\n      if (this.projectConfigManager) {\n        this.projectConfigManager.stop();\n      }\n      Object.keys(this.readyTimeouts).forEach((readyTimeoutId: string) => {\n        const readyTimeoutRecord = this.readyTimeouts[readyTimeoutId];\n        clearTimeout(readyTimeoutRecord.readyTimeout);\n        readyTimeoutRecord.onClose();\n      });\n      this.readyTimeouts = {};\n      return eventProcessorStoppedPromise.then(\n        function() {\n          return {\n            success: true,\n          };\n        },\n        function(err) {\n          return {\n            success: false,\n            reason: String(err),\n          };\n        }\n      );\n    } catch (err) {\n      this.logger.log(LOG_LEVEL.ERROR, err.message);\n      this.errorHandler.handleError(err);\n      return Promise.resolve({\n        success: false,\n        reason: String(err),\n      });\n    }\n  }\n\n  /**\n   * Returns a Promise that fulfills when this instance is ready to use (meaning\n   * it has a valid datafile), or has failed to become ready within a period of\n   * time (configurable by the timeout property of the options argument), or when\n   * this instance is closed via the close method.\n   *\n   * If a valid datafile was provided in the constructor, the returned Promise is\n   * immediately fulfilled. If an sdkKey was provided, a manager will be used to\n   * fetch  a datafile, and the returned promise will fulfill if that fetch\n   * succeeds or fails before the timeout. The default timeout is 30 seconds,\n   * which will be used if no timeout is provided in the argument options object.\n   *\n   * The returned Promise is fulfilled with a result object containing these\n   * properties:\n   *    - success (boolean): True if this instance is ready to use with a valid\n   *                         datafile, or false if this instance failed to become\n   *                         ready or was closed prior to becoming ready.\n   *    - reason (string=):  If success is false, this is a string property with\n   *                         an explanatory message. Failure could be due to\n   *                         expiration of the timeout, network errors,\n   *                         unsuccessful responses, datafile parse errors,\n   *                         datafile validation errors, or the instance being\n   *                         closed\n   * @param  {Object=}          options\n   * @param  {number|undefined} options.timeout\n   * @return {Promise}\n   */\n  onReady(options?: { timeout?: number }): Promise<OnReadyResult> {\n    let timeoutValue: number | undefined;\n    if (typeof options === 'object' && options !== null) {\n      if (options.timeout !== undefined) {\n        timeoutValue = options.timeout;\n      }\n    }\n    if (!fns.isSafeInteger(timeoutValue)) {\n      timeoutValue = DEFAULT_ONREADY_TIMEOUT;\n    }\n\n    let resolveTimeoutPromise: (value: OnReadyResult) => void;\n    const timeoutPromise = new Promise<OnReadyResult>(resolve => {\n      resolveTimeoutPromise = resolve;\n    });\n\n    const timeoutId = this.nextReadyTimeoutId;\n    this.nextReadyTimeoutId++;\n\n    const onReadyTimeout = () => {\n      delete this.readyTimeouts[timeoutId];\n      resolveTimeoutPromise({\n        success: false,\n        reason: sprintf('onReady timeout expired after %s ms', timeoutValue),\n      });\n    };\n    const readyTimeout = setTimeout(onReadyTimeout, timeoutValue);\n    const onClose = function() {\n      resolveTimeoutPromise({\n        success: false,\n        reason: 'Instance closed',\n      });\n    };\n\n    this.readyTimeouts[timeoutId] = {\n      readyTimeout: readyTimeout,\n      onClose: onClose,\n    };\n\n    this.readyPromise.then(() => {\n      clearTimeout(readyTimeout);\n      delete this.readyTimeouts[timeoutId];\n      resolveTimeoutPromise({\n        success: true,\n      });\n    });\n\n    return Promise.race([this.readyPromise, timeoutPromise]);\n  }\n\n  //============ decide ============//\n\n  /**\n   * Creates a context of the user for which decision APIs will be called.\n   *\n   * A user context will be created successfully even when the SDK is not fully configured yet, so no\n   * this.isValidInstance() check is performed here.\n   *\n   * @param  {string}          userId      (Optional) The user ID to be used for bucketing.\n   * @param  {UserAttributes}  attributes  (Optional) user attributes.\n   * @return {OptimizelyUserContext|null}  An OptimizelyUserContext associated with this OptimizelyClient or\n   *                                       null if provided inputs are invalid\n   */\n  createUserContext(userId?: string, attributes?: UserAttributes): OptimizelyUserContext | null {\n    let userIdentifier;\n\n    if (this.odpManager?.isVuidEnabled() && !userId) {\n      userIdentifier = userId || this.getVuid();\n    } else {\n      userIdentifier = userId;\n    }\n\n    if (\n      userIdentifier === null ||\n      userIdentifier === undefined ||\n      !this.validateInputs({ user_id: userIdentifier }, attributes)\n    ) {\n      return null;\n    }\n\n    return new OptimizelyUserContext({\n      optimizely: this,\n      userId: userIdentifier,\n      attributes,\n      shouldIdentifyUser: true,\n    });\n  }\n\n  /**\n   * Creates an internal context of the user for which decision APIs will be called.\n   *\n   * A user context will be created successfully even when the SDK is not fully configured yet, so no\n   * this.isValidInstance() check is performed here.\n   *\n   * @param  {string}          userId      The user ID to be used for bucketing.\n   * @param  {UserAttributes}  attributes  Optional user attributes.\n   * @return {OptimizelyUserContext|null}  An OptimizelyUserContext associated with this OptimizelyClient or\n   *                                       null if provided inputs are invalid\n   */\n  private createInternalUserContext(userId: string, attributes?: UserAttributes): OptimizelyUserContext | null {\n    return new OptimizelyUserContext({\n      optimizely: this,\n      userId,\n      attributes,\n      shouldIdentifyUser: false,\n    });\n  }\n\n  decide(user: OptimizelyUserContext, key: string, options: OptimizelyDecideOption[] = []): OptimizelyDecision {\n    const userId = user.getUserId();\n    const attributes = user.getAttributes();\n    const configObj = this.projectConfigManager.getConfig();\n    const reasons: (string | number)[][] = [];\n    let decisionObj: DecisionObj;\n    if (!this.isValidInstance() || !configObj) {\n      this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'decide');\n      return newErrorDecision(key, user, [DECISION_MESSAGES.SDK_NOT_READY]);\n    }\n\n    const feature = configObj.featureKeyMap[key];\n    if (!feature) {\n      this.logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.FEATURE_NOT_IN_DATAFILE, MODULE_NAME, key);\n      return newErrorDecision(key, user, [sprintf(DECISION_MESSAGES.FLAG_KEY_INVALID, key)]);\n    }\n\n    const allDecideOptions = this.getAllDecideOptions(options);\n\n    const forcedDecisionResponse = this.decisionService.findValidatedForcedDecision(configObj, user, key);\n    reasons.push(...forcedDecisionResponse.reasons);\n    const variation = forcedDecisionResponse.result;\n    if (variation) {\n      decisionObj = {\n        experiment: null,\n        variation: variation,\n        decisionSource: DECISION_SOURCES.FEATURE_TEST,\n      };\n    } else {\n      const decisionVariation = this.decisionService.getVariationForFeature(configObj, feature, user, allDecideOptions);\n      reasons.push(...decisionVariation.reasons);\n      decisionObj = decisionVariation.result;\n    }\n    const decisionSource = decisionObj.decisionSource;\n    const experimentKey = decisionObj.experiment?.key ?? null;\n    const variationKey = decisionObj.variation?.key ?? null;\n    const flagEnabled: boolean = decision.getFeatureEnabledFromVariation(decisionObj);\n    if (flagEnabled === true) {\n      this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.FEATURE_ENABLED_FOR_USER, MODULE_NAME, key, userId);\n    } else {\n      this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.FEATURE_NOT_ENABLED_FOR_USER, MODULE_NAME, key, userId);\n    }\n\n    const variablesMap: { [key: string]: unknown } = {};\n    let decisionEventDispatched = false;\n\n    if (!allDecideOptions[OptimizelyDecideOption.EXCLUDE_VARIABLES]) {\n      feature.variables.forEach(variable => {\n        variablesMap[variable.key] = this.getFeatureVariableValueFromVariation(\n          key,\n          flagEnabled,\n          decisionObj.variation,\n          variable,\n          userId\n        );\n      });\n    }\n\n    if (\n      !allDecideOptions[OptimizelyDecideOption.DISABLE_DECISION_EVENT] &&\n      (decisionSource === DECISION_SOURCES.FEATURE_TEST ||\n        (decisionSource === DECISION_SOURCES.ROLLOUT && projectConfig.getSendFlagDecisionsValue(configObj)))\n    ) {\n      this.sendImpressionEvent(decisionObj, key, userId, flagEnabled, attributes);\n      decisionEventDispatched = true;\n    }\n\n    const shouldIncludeReasons = allDecideOptions[OptimizelyDecideOption.INCLUDE_REASONS];\n\n    let reportedReasons: string[] = [];\n    if (shouldIncludeReasons) {\n      reportedReasons = reasons.map(reason => sprintf(reason[0] as string, ...reason.slice(1)));\n    }\n\n    const featureInfo = {\n      flagKey: key,\n      enabled: flagEnabled,\n      variationKey: variationKey,\n      ruleKey: experimentKey,\n      variables: variablesMap,\n      reasons: reportedReasons,\n      decisionEventDispatched: decisionEventDispatched,\n    };\n\n    this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.DECISION, {\n      type: DECISION_NOTIFICATION_TYPES.FLAG,\n      userId: userId,\n      attributes: attributes,\n      decisionInfo: featureInfo,\n    });\n\n    return {\n      variationKey: variationKey,\n      enabled: flagEnabled,\n      variables: variablesMap,\n      ruleKey: experimentKey,\n      flagKey: key,\n      userContext: user,\n      reasons: reportedReasons,\n    };\n  }\n\n  /**\n   * Get all decide options.\n   * @param  {OptimizelyDecideOption[]}          options   decide options\n   * @return {[key: string]: boolean}             Map of all provided decide options including default decide options\n   */\n  private getAllDecideOptions(options: OptimizelyDecideOption[]): { [key: string]: boolean } {\n    const allDecideOptions = { ...this.defaultDecideOptions };\n    if (!Array.isArray(options)) {\n      this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.INVALID_DECIDE_OPTIONS, MODULE_NAME);\n    } else {\n      options.forEach(option => {\n        // Filter out all provided decide options that are not in OptimizelyDecideOption[]\n        if (OptimizelyDecideOption[option]) {\n          allDecideOptions[option] = true;\n        } else {\n          this.logger.log(LOG_LEVEL.WARNING, LOG_MESSAGES.UNRECOGNIZED_DECIDE_OPTION, MODULE_NAME, option);\n        }\n      });\n    }\n\n    return allDecideOptions;\n  }\n\n  /**\n   * Returns an object of decision results for multiple flag keys and a user context.\n   * If the SDK finds an error for a key, the response will include a decision for the key showing reasons for the error.\n   * The SDK will always return an object of decisions. When it cannot process requests, it will return an empty object after logging the errors.\n   * @param     {OptimizelyUserContext}      user        A user context associated with this OptimizelyClient\n   * @param     {string[]}                   keys        An array of flag keys for which decisions will be made.\n   * @param     {OptimizelyDecideOption[]}  options     An array of options for decision-making.\n   * @return    {[key: string]: OptimizelyDecision}      An object of decision results mapped by flag keys.\n   */\n  decideForKeys(\n    user: OptimizelyUserContext,\n    keys: string[],\n    options: OptimizelyDecideOption[] = []\n  ): { [key: string]: OptimizelyDecision } {\n    const decisionMap: { [key: string]: OptimizelyDecision } = {};\n    if (!this.isValidInstance()) {\n      this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'decideForKeys');\n      return decisionMap;\n    }\n    if (keys.length === 0) {\n      return decisionMap;\n    }\n\n    const allDecideOptions = this.getAllDecideOptions(options);\n    keys.forEach(key => {\n      const optimizelyDecision: OptimizelyDecision = this.decide(user, key, options);\n      if (!allDecideOptions[OptimizelyDecideOption.ENABLED_FLAGS_ONLY] || optimizelyDecision.enabled) {\n        decisionMap[key] = optimizelyDecision;\n      }\n    });\n\n    return decisionMap;\n  }\n\n  /**\n   * Returns an object of decision results for all active flag keys.\n   * @param     {OptimizelyUserContext}      user        A user context associated with this OptimizelyClient\n   * @param     {OptimizelyDecideOption[]}  options     An array of options for decision-making.\n   * @return    {[key: string]: OptimizelyDecision}      An object of all decision results mapped by flag keys.\n   */\n  decideAll(\n    user: OptimizelyUserContext,\n    options: OptimizelyDecideOption[] = []\n  ): { [key: string]: OptimizelyDecision } {\n    const configObj = this.projectConfigManager.getConfig();\n    const decisionMap: { [key: string]: OptimizelyDecision } = {};\n    if (!this.isValidInstance() || !configObj) {\n      this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'decideAll');\n      return decisionMap;\n    }\n\n    const allFlagKeys = Object.keys(configObj.featureKeyMap);\n\n    return this.decideForKeys(user, allFlagKeys, options);\n  }\n\n  /**\n   * Updates ODP Config with most recent ODP key, host, pixelUrl, and segments from the project config\n   */\n  private updateOdpSettings(): void {\n    const projectConfig = this.projectConfigManager.getConfig();\n    if (this.odpManager != null && projectConfig != null) {\n      this.odpManager.updateSettings(\n        new OdpConfig(\n          projectConfig.publicKeyForOdp,\n          projectConfig.hostForOdp,\n          projectConfig.pixelUrlForOdp,\n          projectConfig.allSegments\n        )\n      );\n    }\n  }\n\n  /**\n   * Sends an action as an ODP Event with optional custom parameters including type, identifiers, and data\n   * Note: Since this depends on this.odpManager, it must await Optimizely client's onReady() promise resolution.\n   * @param {string}              action         Subcategory of the event type (i.e. \"client_initialized\", \"identified\", or a custom action)\n   * @param {string}              type           (Optional) Type of event (Defaults to \"fullstack\")\n   * @param {Map<string, string>} identifiers    (Optional) Key-value map of user identifiers\n   * @param {Map<string, string>} data           (Optional) Event data in a key-value map.\n   */\n  public sendOdpEvent(\n    action: string,\n    type?: string,\n    identifiers?: Map<string, string>,\n    data?: Map<string, unknown>\n  ): void {\n    if (!this.odpManager) {\n      this.logger.error(ERROR_MESSAGES.ODP_EVENT_FAILED_ODP_MANAGER_MISSING);\n      return;\n    }\n\n    const odpEventType = type ?? ODP_DEFAULT_EVENT_TYPE;\n\n    const odpIdentifiers = new Map(identifiers);\n\n    if (identifiers && identifiers.size > 0) {\n      try {\n        identifiers.forEach((identifier_value, identifier_key) => {\n          // Catch for fs-user-id, FS-USER-ID, and FS_USER_ID and assign value to fs_user_id identifier.\n          if (\n            FS_USER_ID_ALIAS === identifier_key.toLowerCase() ||\n            ODP_USER_KEY.FS_USER_ID === identifier_key.toLowerCase()\n          ) {\n            odpIdentifiers.delete(identifier_key);\n            odpIdentifiers.set(ODP_USER_KEY.FS_USER_ID, identifier_value);\n          }\n        });\n      } catch (e) {\n        this.logger.warn(LOG_MESSAGES.ODP_SEND_EVENT_IDENTIFIER_CONVERSION_FAILED);\n      }\n    }\n\n    try {\n      const odpEvent = new OdpEvent(odpEventType, action, odpIdentifiers, data);\n      this.odpManager.sendEvent(odpEvent);\n    } catch (e) {\n      this.logger.error(ERROR_MESSAGES.ODP_EVENT_FAILED, e);\n    }\n  }\n\n  /**\n   * Identifies user with ODP server in a fire-and-forget manner.\n   * @param {string} userId\n   */\n  public identifyUser(userId: string): void {\n    if (this.odpManager && this.odpManager.enabled) {\n      this.odpManager.identifyUser(userId);\n    }\n  }\n\n  /**\n   * Fetches list of qualified segments from ODP for a particular userId.\n   * @param {string}                          userId\n   * @param {Array<OptimizelySegmentOption>}  options\n   * @returns {Promise<string[] | null>}\n   */\n  public async fetchQualifiedSegments(\n    userId: string,\n    options?: Array<OptimizelySegmentOption>\n  ): Promise<string[] | null> {\n    if (!this.odpManager) {\n      return null;\n    }\n\n    if (!this.odpManager.enabled) {\n      this.logger.error(ERROR_MESSAGES.ODP_FETCH_QUALIFIED_SEGMENTS_FAILED_ODP_MANAGER_MISSING);\n      return null;\n    }\n\n    return await this.odpManager.fetchQualifiedSegments(userId, options);\n  }\n\n  /**\n   * @returns {string|undefined}    Currently provisioned VUID from local ODP Manager or undefined if\n   *                                ODP Manager has not been instantiated yet for any reason.\n   */\n  public getVuid(): string | undefined {\n    if (!this.odpManager) {\n      this.logger?.error('Unable to get VUID - ODP Manager is not instantiated yet.');\n      return undefined;\n    }\n\n    if (!this.odpManager.isVuidEnabled()) {\n      this.logger.log(LOG_LEVEL.WARNING, 'getVuid() unavailable for this platform', MODULE_NAME);\n      return undefined;\n    }\n\n    return this.odpManager.getVuid();\n  }\n}\n","/**\n * Copyright 2017, 2020, 2022 Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Provides utility method for validating that event tags user has provided are valid\n */\nimport { sprintf } from '../../utils/fns';\n\nimport { ERROR_MESSAGES } from '../enums';\n\nconst MODULE_NAME = 'EVENT_TAGS_VALIDATOR';\n\n/**\n * Validates user's provided event tags\n * @param  {unknown}  eventTags\n * @return {boolean} true if event tags are valid\n * @throws If event tags are not valid\n */\nexport function validate(eventTags: unknown): boolean {\n  if (typeof eventTags === 'object' && !Array.isArray(eventTags) && eventTags !== null) {\n    return true;\n  } else {\n    throw new Error(sprintf(ERROR_MESSAGES.INVALID_EVENT_TAGS, MODULE_NAME));\n  }\n}\n","/**\n * Copyright 2016-2017, 2020-2022, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ConsoleLogHandler, LogLevel } from '../../modules/logging';\n\ntype ConsoleLogHandlerConfig = {\n  logLevel?: LogLevel | string;\n  logToConsole?: boolean;\n  prefix?: string;\n}\n\nexport class NoOpLogger {\n  log(): void { }\n}\n\nexport function createLogger(opts?: ConsoleLogHandlerConfig): ConsoleLogHandler {  \n  return new ConsoleLogHandler(opts);\n}\n\nexport function createNoOpLogger(): NoOpLogger {\n  return new NoOpLogger();\n}\n","/**\n * Copyright 2016, 2020-2021, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Default error handler implementation\n */\nexport function handleError(): void {\n  // no-op\n}\n\nexport default {\n  handleError,\n}\n","/**\n * Copyright 2016-2018, 2020-2021, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport http from 'http';\nimport https from 'https';\nimport url from 'url';\n\nimport { Event } from '../../shared_types';\n\n/**\n * Dispatch an HTTP request to the given url and the specified options\n * @param  {Event}    eventObj           Event object containing\n * @param  {string}   eventObj.url       the url to make the request to\n * @param  {Object}   eventObj.params    parameters to pass to the request (i.e. in the POST body)\n * @param  {string}   eventObj.httpVerb  the HTTP request method type. only POST is supported.\n * @param  {function} callback           callback to execute\n * @return {ClientRequest|undefined}     ClientRequest object which made the request, or undefined if no request was made (error)\n */\nexport const dispatchEvent = function(\n  eventObj: Event,\n  callback: (response: { statusCode: number }) => void\n): http.ClientRequest | void {\n  // Non-POST requests not supported\n  if (eventObj.httpVerb !== 'POST') {\n    return;\n  }\n\n  const parsedUrl = url.parse(eventObj.url);\n\n  const dataString = JSON.stringify(eventObj.params);\n\n  const requestOptions = {\n    host: parsedUrl.host,\n    path: parsedUrl.path,\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json',\n      'content-length': dataString.length.toString(),\n    },\n  };\n\n  const requestCallback = function(response?: { statusCode: number }): void {\n    if (response && response.statusCode && response.statusCode >= 200 && response.statusCode < 400) {\n      callback(response);\n    }\n  };\n\n  const req = (parsedUrl.protocol === 'http:' ? http : https)\n    .request(requestOptions, requestCallback as (res: http.IncomingMessage) => void);\n  // Add no-op error listener to prevent this from throwing\n  req.on('error', function() {});\n  req.write(dataString);\n  req.end();\n  return req;\n};\n\nexport default {\n  dispatchEvent,\n};\n","/**\n * Copyright 2019-2020, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport fns from '../fns';\n\n/**\n * Return true if the argument is a valid event batch size, false otherwise\n * @param {unknown}   eventBatchSize\n * @returns {boolean}\n */\nconst validateEventBatchSize = function(eventBatchSize: unknown): boolean {\n  if (typeof eventBatchSize === 'number' && fns.isSafeInteger(eventBatchSize)) {\n    return eventBatchSize >= 1;\n  }\n  return false;\n}\n\n/**\n * Return true if the argument is a valid event flush interval, false otherwise\n * @param {unknown}   eventFlushInterval\n * @returns {boolean}\n */\nconst validateEventFlushInterval = function(eventFlushInterval: unknown): boolean {\n  if (typeof eventFlushInterval === 'number' && fns.isSafeInteger(eventFlushInterval)) {\n    return eventFlushInterval > 0;\n  }\n  return false;\n}\n\nexport default {\n  validateEventBatchSize: validateEventBatchSize,\n  validateEventFlushInterval: validateEventFlushInterval,\n}\n","/**\n * Copyright 2022, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport type VisitorAttribute = {\n  entityId: string\n  key: string\n  value: string | number | boolean\n}\n\nexport interface BaseEvent {\n  type: 'impression' | 'conversion'\n  timestamp: number\n  uuid: string\n\n  // projectConfig stuff\n  context: {\n    accountId: string\n    projectId: string\n    clientName: string\n    clientVersion: string\n    revision: string\n    anonymizeIP: boolean\n    botFiltering?: boolean\n  }\n}\n\nexport interface ImpressionEvent extends BaseEvent {\n  type: 'impression'\n\n  user: {\n    id: string\n    attributes: VisitorAttribute[]\n  }\n\n  layer: {\n    id: string | null\n  } | null\n\n  experiment: {\n    id: string | null\n    key: string\n  } | null\n\n  variation: {\n    id: string | null\n    key: string\n  } | null\n\n  ruleKey: string\n  flagKey: string\n  ruleType: string\n  enabled: boolean\n}\n\nexport interface ConversionEvent extends BaseEvent {\n  type: 'conversion'\n\n  user: {\n    id: string\n    attributes: VisitorAttribute[]\n  }\n\n  event: {\n    id: string | null\n    key: string\n  }\n\n  revenue: number | null\n  value: number | null\n  tags: EventTags | undefined\n}\n\nexport type EventTags = {\n  [key: string]: string | number | null\n}\n\nexport function areEventContextsEqual(eventA: BaseEvent, eventB: BaseEvent): boolean {\n  const contextA = eventA.context\n  const contextB = eventB.context\n  return (\n    contextA.accountId === contextB.accountId &&\n    contextA.projectId === contextB.projectId &&\n    contextA.clientName === contextB.clientName &&\n    contextA.clientVersion === contextB.clientVersion &&\n    contextA.revision === contextB.revision &&\n    contextA.anonymizeIP === contextB.anonymizeIP &&\n    contextA.botFiltering === contextB.botFiltering\n  )\n}\n","/**\n * Copyright 2022-2023, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getLogger } from '../logging';\n// TODO change this to use Managed from js-sdk-models when available\nimport { Managed } from './managed';\n\nconst logger = getLogger('EventProcessor');\n\nexport type EventQueueSink<K> = (buffer: K[]) => Promise<any>;\n\nexport interface EventQueue<K> extends Managed {\n  enqueue(event: K): void;\n}\n\nexport interface EventQueueFactory<K> {\n  createEventQueue(config: { sink: EventQueueSink<K>, flushInterval: number, maxQueueSize: number }): EventQueue<K>;\n}\n\nclass Timer {\n  private timeout: number;\n  private callback: () => void;\n  private timeoutId?: number;\n\n  constructor({ timeout, callback }: { timeout: number; callback: () => void }) {\n    this.timeout = Math.max(timeout, 0);\n    this.callback = callback;\n  }\n\n  start(): void {\n    this.timeoutId = setTimeout(this.callback, this.timeout) as any;\n  }\n\n  refresh(): void {\n    this.stop();\n    this.start();\n  }\n\n  stop(): void {\n    if (this.timeoutId) {\n      clearTimeout(this.timeoutId as any);\n    }\n  }\n}\n\nexport class SingleEventQueue<K> implements EventQueue<K> {\n  private sink: EventQueueSink<K>;\n\n  constructor({ sink }: { sink: EventQueueSink<K> }) {\n    this.sink = sink;\n  }\n\n  start(): Promise<any> {\n    // no-op\n    return Promise.resolve();\n  }\n\n  stop(): Promise<any> {\n    // no-op\n    return Promise.resolve();\n  }\n\n  enqueue(event: K): void {\n    this.sink([event]);\n  }\n}\n\nexport class DefaultEventQueue<K> implements EventQueue<K> {\n  // expose for testing\n  public timer: Timer;\n  private buffer: K[];\n  private maxQueueSize: number;\n  private sink: EventQueueSink<K>;\n  private closingSink?: EventQueueSink<K>;\n  // batchComparator is called to determine whether two events can be included\n  // together in the same batch\n  private batchComparator: (eventA: K, eventB: K) => boolean;\n  private started: boolean;\n\n  constructor({\n    flushInterval,\n    maxQueueSize,\n    sink,\n    closingSink,\n    batchComparator,\n  }: {\n    flushInterval: number;\n    maxQueueSize: number;\n    sink: EventQueueSink<K>;\n    closingSink?: EventQueueSink<K>;\n    batchComparator: (eventA: K, eventB: K) => boolean;\n  }) {\n    this.buffer = [];\n    this.maxQueueSize = Math.max(maxQueueSize, 1);\n    this.sink = sink;\n    this.closingSink = closingSink;\n    this.batchComparator = batchComparator;\n    this.timer = new Timer({\n      callback: this.flush.bind(this),\n      timeout: flushInterval,\n    });\n    this.started = false;\n  }\n\n  start(): Promise<any> {\n    this.started = true;\n    // dont start the timer until the first event is enqueued\n\n    return Promise.resolve();\n  }\n\n  stop(): Promise<any> {\n    this.started = false;\n    const result = this.closingSink ? this.closingSink(this.buffer) : this.sink(this.buffer);\n    this.buffer = [];\n    this.timer.stop();\n    return result;\n  }\n\n  enqueue(event: K): void {\n    if (!this.started) {\n      logger.warn('Queue is stopped, not accepting event');\n      return;\n    }\n\n    // If new event cannot be included into the current batch, flush so it can\n    // be in its own new batch.\n    const bufferedEvent: K | undefined = this.buffer[0];\n    if (bufferedEvent && !this.batchComparator(bufferedEvent, event)) {\n      this.flush();\n    }\n\n    // start the timer when the first event is put in\n    if (this.buffer.length === 0) {\n      this.timer.refresh();\n    }\n    this.buffer.push(event);\n\n    if (this.buffer.length >= this.maxQueueSize) {\n      this.flush();\n    }\n  }\n\n  flush(): void {\n    this.sink(this.buffer);\n    this.buffer = [];\n    this.timer.stop();\n  }\n}\n","/**\n * Copyright 2022-2023 Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// TODO change this to use Managed from js-sdk-models when available\nimport { Managed } from './managed'\nimport { ConversionEvent, ImpressionEvent } from './events'\nimport { EventV1Request } from './eventDispatcher'\nimport { EventQueue, DefaultEventQueue, SingleEventQueue, EventQueueSink } from './eventQueue'\nimport { getLogger } from '../logging'\nimport { NOTIFICATION_TYPES } from '../../utils/enums'\nimport { NotificationSender } from '../../core/notification_center'\n\nexport const DEFAULT_FLUSH_INTERVAL = 30000 // Unit is ms - default flush interval is 30s\nexport const DEFAULT_BATCH_SIZE = 10\n\nconst logger = getLogger('EventProcessor')\n\nexport type ProcessableEvent = ConversionEvent | ImpressionEvent\n\nexport type EventDispatchResult = { result: boolean; event: ProcessableEvent }\n\nexport interface EventProcessor extends Managed {\n  process(event: ProcessableEvent): void\n}\n\nexport function validateAndGetFlushInterval(flushInterval: number): number {\n  if (flushInterval <= 0) {\n    logger.warn(\n      `Invalid flushInterval ${flushInterval}, defaulting to ${DEFAULT_FLUSH_INTERVAL}`,\n    )\n    flushInterval = DEFAULT_FLUSH_INTERVAL\n  }\n  return flushInterval\n}\n\nexport function validateAndGetBatchSize(batchSize: number): number {\n  batchSize = Math.floor(batchSize)\n  if (batchSize < 1) {\n    logger.warn(\n      `Invalid batchSize ${batchSize}, defaulting to ${DEFAULT_BATCH_SIZE}`,\n    )\n    batchSize = DEFAULT_BATCH_SIZE\n  }\n  batchSize = Math.max(1, batchSize)\n  return batchSize\n}\n\nexport function getQueue(\n  batchSize: number, \n  flushInterval: number, \n  batchComparator: (eventA: ProcessableEvent, eventB: ProcessableEvent) => boolean,\n  sink: EventQueueSink<ProcessableEvent>,\n  closingSink?: EventQueueSink<ProcessableEvent>\n): EventQueue<ProcessableEvent> {\n  let queue: EventQueue<ProcessableEvent>\n  if (batchSize > 1) {\n    queue = new DefaultEventQueue<ProcessableEvent>({\n      flushInterval,\n      maxQueueSize: batchSize,\n      sink,\n      closingSink,\n      batchComparator,\n    })\n  } else {\n    queue = new SingleEventQueue({ sink })\n  }\n  return queue\n}\n\nexport function sendEventNotification(notificationSender: NotificationSender | undefined, event: EventV1Request): void {\n  if (notificationSender) {\n    notificationSender.sendNotifications(\n      NOTIFICATION_TYPES.LOG_EVENT,\n      event,\n    )\n  }\n}\n","/**\n * Copyright 2022, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { objectValues } from '../../utils/fns'\nimport { getLogger } from '../logging';\n\nconst logger = getLogger('EventProcessor')\n\nexport interface PendingEventsStore<K> {\n  get(key: string): K | null\n\n  set(key: string, value: K): void\n\n  remove(key: string): void\n\n  values(): K[]\n\n  clear(): void\n\n  replace(newMap: { [key: string]: K }): void\n}\n\ninterface StoreEntry {\n  uuid: string\n  timestamp: number\n}\n\nexport class LocalStorageStore<K extends StoreEntry> implements PendingEventsStore<K> {\n  protected LS_KEY: string\n  protected maxValues: number\n\n  constructor({ key, maxValues = 1000 }: { key: string; maxValues?: number }) {\n    this.LS_KEY = key\n    this.maxValues = maxValues\n  }\n\n  get(key: string): K | null {\n    return this.getMap()[key] || null\n  }\n\n  set(key: string, value: K): void {\n    const map = this.getMap()\n    map[key] = value\n    this.replace(map)\n  }\n\n  remove(key: string): void {\n    const map = this.getMap()\n    delete map[key]\n    this.replace(map)\n  }\n\n  values(): K[] {\n    return objectValues(this.getMap())\n  }\n\n  clear(): void {\n    this.replace({})\n  }\n\n  replace(map: { [key: string]: K }): void {\n    try {\n      // This is a temporary fix to support React Native which does not have localStorage.\n      typeof window !== 'undefined' ? window && window.localStorage && localStorage.setItem(this.LS_KEY, JSON.stringify(map)) : localStorage.setItem(this.LS_KEY, JSON.stringify(map))\n      this.clean()\n    } catch (e) {\n      logger.error(String(e))\n    }\n  }\n\n  private clean() {\n    const map = this.getMap()\n    const keys = Object.keys(map)\n    const toRemove = keys.length - this.maxValues\n    if (toRemove < 1) {\n      return\n    }\n\n    const entries = keys.map(key => ({\n      key,\n      value: map[key]\n    }))\n\n    entries.sort((a, b) => a.value.timestamp - b.value.timestamp)\n\n    for (let i = 0; i < toRemove; i++) {\n      delete map[entries[i].key]\n    }\n\n    this.replace(map)\n  }\n\n  private getMap(): { [key: string]: K } {\n    try {\n      // This is a temporary fix to support React Native which does not have localStorage.\n      const data = typeof window !== 'undefined' ? window && window.localStorage && localStorage.getItem(this.LS_KEY): localStorage.getItem(this.LS_KEY);\n      if (data) {\n        return (JSON.parse(data) as { [key: string]: K }) || {}\n      }\n    } catch (e: any) {\n      logger.error(e)\n    }\n    return {}\n  }\n}\n","/**\n * Copyright 2022, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getLogger } from '../logging'\nimport { EventDispatcher, EventV1Request, EventDispatcherCallback } from './eventDispatcher'\nimport { PendingEventsStore, LocalStorageStore } from './pendingEventsStore'\nimport { uuid, getTimestamp } from '../../utils/fns'\n\nconst logger = getLogger('EventProcessor')\n\nexport type DispatcherEntry = {\n  uuid: string\n  timestamp: number\n  request: EventV1Request\n}\n\nexport class PendingEventsDispatcher implements EventDispatcher {\n  protected dispatcher: EventDispatcher\n  protected store: PendingEventsStore<DispatcherEntry>\n\n  constructor({\n    eventDispatcher,\n    store,\n  }: {\n    eventDispatcher: EventDispatcher\n    store: PendingEventsStore<DispatcherEntry>\n  }) {\n    this.dispatcher = eventDispatcher\n    this.store = store\n  }\n\n  dispatchEvent(request: EventV1Request, callback: EventDispatcherCallback): void {\n    this.send(\n      {\n        uuid: uuid(),\n        timestamp: getTimestamp(),\n        request,\n      },\n      callback,\n    )\n  }\n\n  sendPendingEvents(): void {\n    const pendingEvents = this.store.values()\n\n    logger.debug('Sending %s pending events from previous page', pendingEvents.length)\n\n    pendingEvents.forEach(item => {\n      try {\n        this.send(item, () => {})\n      } catch (e)\n        {\n          logger.debug(String(e))\n        }\n    })\n  }\n\n  protected send(entry: DispatcherEntry, callback: EventDispatcherCallback): void {\n    this.store.set(entry.uuid, entry)\n\n    this.dispatcher.dispatchEvent(entry.request, response => {\n      this.store.remove(entry.uuid)\n      callback(response)\n    })\n  }\n}\n\nexport class LocalStoragePendingEventsDispatcher extends PendingEventsDispatcher {\n  constructor({ eventDispatcher }: { eventDispatcher: EventDispatcher }) {\n    super({\n      eventDispatcher,\n      store: new LocalStorageStore({\n        // TODO make this configurable\n        maxValues: 100,\n        key: 'fs_optly_pending_events',\n      }),\n    })\n  }\n}\n","/**\n * Copyright 2022, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventTags, ConversionEvent, ImpressionEvent, VisitorAttribute } from '../events'\nimport { ProcessableEvent } from '../eventProcessor'\nimport { EventV1Request } from '../eventDispatcher'\n\nconst ACTIVATE_EVENT_KEY = 'campaign_activated'\nconst CUSTOM_ATTRIBUTE_FEATURE_TYPE = 'custom'\nconst BOT_FILTERING_KEY = '$opt_bot_filtering'\n\nexport type EventV1 = {\n  account_id: string\n  project_id: string\n  revision: string\n  client_name: string\n  client_version: string\n  anonymize_ip: boolean\n  enrich_decisions: boolean\n  visitors: Visitor[]\n}\n\ntype Visitor = {\n  snapshots: Visitor.Snapshot[]\n  visitor_id: string\n  attributes: Visitor.Attribute[]\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace Visitor {\n  type AttributeType = 'custom'\n\n  export type Attribute = {\n    // attribute id\n    entity_id: string\n    // attribute key\n    key: string\n    type: AttributeType\n    value: string | number | boolean\n  }\n\n  export type Snapshot = {\n    decisions?: Decision[]\n    events: SnapshotEvent[]\n  }\n\n  type Decision = {\n    campaign_id: string | null\n    experiment_id: string | null\n    variation_id: string | null\n    metadata: Metadata\n  }\n\n  type Metadata = {\n    flag_key: string;\n    rule_key: string;\n    rule_type: string;\n    variation_key: string;\n    enabled: boolean;\n  }\n\n  export type SnapshotEvent = {\n    entity_id: string | null\n    timestamp: number\n    uuid: string\n    key: string\n    revenue?: number\n    value?: number\n    tags?: EventTags\n  }\n}\n\n\n\ntype Attributes = {\n  [key: string]: string | number | boolean\n}\n\n/**\n * Given an array of batchable Decision or ConversionEvent events it returns\n * a single EventV1 with proper batching\n *\n * @param {ProcessableEvent[]} events\n * @returns {EventV1}\n */\nexport function makeBatchedEventV1(events: ProcessableEvent[]): EventV1 {\n  const visitors: Visitor[] = []\n  const data = events[0]\n\n  events.forEach(event => {\n    if (event.type === 'conversion' || event.type === 'impression') {\n      const visitor = makeVisitor(event)\n\n      if (event.type === 'impression') {\n        visitor.snapshots.push(makeDecisionSnapshot(event))\n      } else if (event.type === 'conversion') {\n        visitor.snapshots.push(makeConversionSnapshot(event))\n      }\n\n      visitors.push(visitor)\n    }\n  })\n\n  return {\n    client_name: data.context.clientName,\n    client_version: data.context.clientVersion,\n\n    account_id: data.context.accountId,\n    project_id: data.context.projectId,\n    revision: data.context.revision,\n    anonymize_ip: data.context.anonymizeIP,\n    enrich_decisions: true,\n\n    visitors,\n  }\n}\n\nfunction makeConversionSnapshot(conversion: ConversionEvent): Visitor.Snapshot {\n  const tags: EventTags = {\n    ...conversion.tags,\n  }\n\n  delete tags['revenue']\n  delete tags['value']\n\n  const event: Visitor.SnapshotEvent = {\n    entity_id: conversion.event.id,\n    key: conversion.event.key,\n    timestamp: conversion.timestamp,\n    uuid: conversion.uuid,\n  }\n\n  if (conversion.tags) {\n    event.tags = conversion.tags\n  }\n\n  if (conversion.value != null) {\n    event.value = conversion.value\n  }\n\n  if (conversion.revenue != null) {\n    event.revenue = conversion.revenue\n  }\n\n  return {\n    events: [event],\n  }\n}\n\nfunction makeDecisionSnapshot(event: ImpressionEvent): Visitor.Snapshot {\n  const { layer, experiment, variation, ruleKey, flagKey, ruleType, enabled } = event\n  const layerId = layer ? layer.id : null\n  const experimentId = experiment?.id ?? ''\n  const variationId = variation?.id ?? ''\n  const variationKey = variation ? variation.key : ''\n\n  return {\n    decisions: [\n      {\n        campaign_id: layerId,\n        experiment_id: experimentId,\n        variation_id: variationId,\n        metadata: {\n          flag_key: flagKey,\n          rule_key: ruleKey,\n          rule_type: ruleType,\n          variation_key: variationKey,\n          enabled: enabled,\n        },\n      },\n    ],\n    events: [\n      {\n        entity_id: layerId,\n        timestamp: event.timestamp,\n        key: ACTIVATE_EVENT_KEY,\n        uuid: event.uuid,\n      },\n    ],\n  }\n}\n\nfunction makeVisitor(data: ImpressionEvent | ConversionEvent): Visitor {\n  const visitor: Visitor = {\n    snapshots: [],\n    visitor_id: data.user.id,\n    attributes: [],\n  }\n\n  const type = 'custom'\n  data.user.attributes.forEach(attr => {\n    visitor.attributes.push({\n      entity_id: attr.entityId,\n      key: attr.key,\n      type: type as 'custom', // tell the compiler this is always string \"custom\"\n      value: attr.value,\n    })\n  })\n\n  if (typeof data.context.botFiltering === 'boolean') {\n    visitor.attributes.push({\n      entity_id: BOT_FILTERING_KEY,\n      key: BOT_FILTERING_KEY,\n      type: CUSTOM_ATTRIBUTE_FEATURE_TYPE,\n      value: data.context.botFiltering,\n    })\n  }\n  return visitor\n}\n\n/**\n * Event for usage with v1 logtier\n *\n * @export\n * @interface EventBuilderV1\n */\n\nexport function buildImpressionEventV1(data: ImpressionEvent): EventV1 {\n  const visitor = makeVisitor(data)\n  visitor.snapshots.push(makeDecisionSnapshot(data))\n\n  return {\n    client_name: data.context.clientName,\n    client_version: data.context.clientVersion,\n\n    account_id: data.context.accountId,\n    project_id: data.context.projectId,\n    revision: data.context.revision,\n    anonymize_ip: data.context.anonymizeIP,\n    enrich_decisions: true,\n\n    visitors: [visitor],\n  }\n}\n\nexport function buildConversionEventV1(data: ConversionEvent): EventV1 {\n  const visitor = makeVisitor(data)\n  visitor.snapshots.push(makeConversionSnapshot(data))\n\n  return {\n    client_name: data.context.clientName,\n    client_version: data.context.clientVersion,\n\n    account_id: data.context.accountId,\n    project_id: data.context.projectId,\n    revision: data.context.revision,\n    anonymize_ip: data.context.anonymizeIP,\n    enrich_decisions: true,\n\n    visitors: [visitor],\n  }\n}\n\nexport function formatEvents(events: ProcessableEvent[]): EventV1Request {\n  return {\n    url: 'https://logx.optimizely.com/v1/events',\n    httpVerb: 'POST',\n    params: makeBatchedEventV1(events),\n  }\n}\n","/**\n * Copyright 2022, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * RequestTracker keeps track of in-flight requests for EventProcessor using\n * an internal counter. It exposes methods for adding a new request to be\n * tracked, and getting a Promise representing the completion of currently\n * tracked requests.\n */\nclass RequestTracker {\n  private reqsInFlightCount = 0\n  private reqsCompleteResolvers: Array<() => void> = []\n\n  /**\n   * Track the argument request (represented by a Promise). reqPromise will feed\n   * into the state of Promises returned by onRequestsComplete.\n   * @param {Promise<void>} reqPromise\n   */\n  public trackRequest(reqPromise: Promise<void>): void {\n    this.reqsInFlightCount++\n    const onReqComplete = () => {\n      this.reqsInFlightCount--\n      if (this.reqsInFlightCount === 0) {\n        this.reqsCompleteResolvers.forEach(resolver => resolver())\n        this.reqsCompleteResolvers = []\n      }\n    }\n    reqPromise.then(onReqComplete, onReqComplete)\n  }\n\n  /**\n   * Return a Promise that fulfills after all currently-tracked request promises\n   * are resolved.\n   * @return {Promise<void>}\n   */\n  public onRequestsComplete(): Promise<void> {\n    return new Promise(resolve => {\n      if (this.reqsInFlightCount === 0) {\n        resolve()\n      } else {\n        this.reqsCompleteResolvers.push(resolve)\n      }\n    })\n  }\n}\n\nexport default RequestTracker\n","/**\n * Copyright 2022-2023, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getLogger } from '../../logging'\nimport { NotificationSender } from '../../../core/notification_center'\n\nimport { EventDispatcher } from '../eventDispatcher'\nimport {\n  getQueue,\n  EventProcessor,\n  ProcessableEvent,\n  sendEventNotification,\n  validateAndGetBatchSize,\n  validateAndGetFlushInterval,\n  DEFAULT_BATCH_SIZE,\n  DEFAULT_FLUSH_INTERVAL,\n} from '../eventProcessor'\nimport { EventQueue } from '../eventQueue'\nimport RequestTracker from '../requestTracker'\nimport { areEventContextsEqual } from '../events'\nimport { formatEvents } from './buildEventV1'\n\nconst logger = getLogger('LogTierV1EventProcessor')\n\nexport class LogTierV1EventProcessor implements EventProcessor {\n  private dispatcher: EventDispatcher\n  private closingDispatcher?: EventDispatcher\n  private queue: EventQueue<ProcessableEvent>\n  private notificationCenter?: NotificationSender\n  private requestTracker: RequestTracker\n\n  constructor({\n    dispatcher,\n    closingDispatcher,\n    flushInterval = DEFAULT_FLUSH_INTERVAL,\n    batchSize = DEFAULT_BATCH_SIZE,\n    notificationCenter,\n  }: {\n    dispatcher: EventDispatcher\n    closingDispatcher?: EventDispatcher\n    flushInterval?: number\n    batchSize?: number\n    notificationCenter?: NotificationSender\n  }) {\n    this.dispatcher = dispatcher\n    this.closingDispatcher = closingDispatcher\n    this.notificationCenter = notificationCenter\n    this.requestTracker = new RequestTracker()\n    \n    flushInterval = validateAndGetFlushInterval(flushInterval)\n    batchSize = validateAndGetBatchSize(batchSize)\n    this.queue = getQueue(\n      batchSize,\n      flushInterval,\n      areEventContextsEqual,\n      this.drainQueue.bind(this, false),\n      this.drainQueue.bind(this, true),\n    );\n  }\n\n  private drainQueue(useClosingDispatcher: boolean, buffer: ProcessableEvent[]): Promise<void> {\n    const reqPromise = new Promise<void>(resolve => {\n      logger.debug('draining queue with %s events', buffer.length)\n\n      if (buffer.length === 0) {\n        resolve()\n        return\n      }\n\n      const formattedEvent = formatEvents(buffer)\n      const dispatcher = useClosingDispatcher && this.closingDispatcher\n        ? this.closingDispatcher : this.dispatcher;\n\n      dispatcher.dispatchEvent(formattedEvent, () => {\n        resolve()\n      })\n      sendEventNotification(this.notificationCenter, formattedEvent)\n    })\n    this.requestTracker.trackRequest(reqPromise)\n    return reqPromise\n  }\n\n  process(event: ProcessableEvent): void {\n    this.queue.enqueue(event)\n  }\n\n  // TODO[OASIS-6649]: Don't use any type\n  // eslint-disable-next-line  @typescript-eslint/no-explicit-any\n  stop(): Promise<any> {\n    // swallow - an error stopping this queue shouldn't prevent this from stopping\n    try {\n      this.queue.stop()\n      return this.requestTracker.onRequestsComplete()\n    } catch (e) {\n      logger.error('Error stopping EventProcessor: \"%s\"', Object(e).message, String(e))\n    }\n    return Promise.resolve()\n  }\n\n  async start(): Promise<void> {\n    await this.queue.start()\n  }\n}\n","/**\n * Copyright 2022-2023, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst DEFAULT_UPDATE_INTERVAL_MINUTES = 5;\n/** Standard interval (5 minutes in milliseconds) for polling datafile updates.; */\nexport const DEFAULT_UPDATE_INTERVAL = DEFAULT_UPDATE_INTERVAL_MINUTES * 60 * 1000;\n\nconst MIN_UPDATE_INTERVAL_SECONDS = 30;\n/** Minimum allowed interval (30 seconds in milliseconds) for polling datafile updates. */\nexport const MIN_UPDATE_INTERVAL = MIN_UPDATE_INTERVAL_SECONDS * 1000;\n\nexport const UPDATE_INTERVAL_BELOW_MINIMUM_MESSAGE = `Polling intervals below ${MIN_UPDATE_INTERVAL_SECONDS} seconds are not recommended.`;\n\nexport const DEFAULT_URL_TEMPLATE = `https://cdn.optimizely.com/datafiles/%s.json`;\n\nexport const DEFAULT_AUTHENTICATED_URL_TEMPLATE = `https://config.optimizely.com/datafiles/auth/%s.json`;\n\nexport const BACKOFF_BASE_WAIT_SECONDS_BY_ERROR_COUNT = [0, 8, 16, 32, 64, 128, 256, 512];\n\nexport const REQUEST_TIMEOUT_MS = 60 * 1000; // 1 minute\n","/**\n * Copyright 2022, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport http from 'http';\nimport https from 'https';\nimport url from 'url';\nimport { Headers, AbortableRequest, Response } from './http';\nimport { REQUEST_TIMEOUT_MS } from './config';\nimport decompressResponse from 'decompress-response';\n\n// Shared signature between http.request and https.request\ntype ClientRequestCreator = (options: http.RequestOptions) => http.ClientRequest;\n\nfunction getRequestOptionsFromUrl(url: url.UrlWithStringQuery): http.RequestOptions {\n  return {\n    hostname: url.hostname,\n    path: url.path,\n    port: url.port,\n    protocol: url.protocol,\n  };\n}\n\n/**\n * Convert incomingMessage.headers (which has type http.IncomingHttpHeaders) into our Headers type defined in src/http.ts.\n *\n * Our Headers type is simplified and can't represent mutliple values for the same header name.\n *\n * We don't currently need multiple values support, and the consumer code becomes simpler if it can assume at-most 1 value\n * per header name.\n *\n */\nfunction createHeadersFromNodeIncomingMessage(incomingMessage: http.IncomingMessage): Headers {\n  const headers: Headers = {};\n  Object.keys(incomingMessage.headers).forEach(headerName => {\n    const headerValue = incomingMessage.headers[headerName];\n    if (typeof headerValue === 'string') {\n      headers[headerName] = headerValue;\n    } else if (typeof headerValue === 'undefined') {\n      // no value provided for this header\n    } else {\n      // array\n      if (headerValue.length > 0) {\n        // We don't care about multiple values - just take the first one\n        headers[headerName] = headerValue[0];\n      }\n    }\n  });\n  return headers;\n}\n\nfunction getResponseFromRequest(request: http.ClientRequest): Promise<Response> {\n  // TODO: When we drop support for Node 6, consider using util.promisify instead of\n  // constructing own Promise\n  return new Promise((resolve, reject) => {\n    const timeout = setTimeout(() => {\n      request.abort();\n      reject(new Error('Request timed out'));\n    }, REQUEST_TIMEOUT_MS);\n\n    request.once('response', (incomingMessage: http.IncomingMessage) => {\n      if (request.aborted) {\n        return;\n      }\n\n      const response = decompressResponse(incomingMessage);\n\n      response.setEncoding('utf8');\n\n      let responseData = '';\n      response.on('data', (chunk: string) => {\n        if (!request.aborted) {\n          responseData += chunk;\n        }\n      });\n\n      response.on('end', () => {\n        if (request.aborted) {\n          return;\n        }\n\n        clearTimeout(timeout);\n\n        resolve({\n          statusCode: incomingMessage.statusCode,\n          body: responseData,\n          headers: createHeadersFromNodeIncomingMessage(incomingMessage),\n        });\n      });\n    });\n\n    request.on('error', (err: any) => {\n      clearTimeout(timeout);\n\n      if (err instanceof Error) {\n        reject(err);\n      } else if (typeof err === 'string') {\n        reject(new Error(err));\n      } else {\n        reject(new Error('Request error'));\n      }\n    });\n  });\n}\n\nexport function makeGetRequest(reqUrl: string, headers: Headers): AbortableRequest {\n  // TODO: Use non-legacy URL parsing when we drop support for Node 6\n  const parsedUrl = url.parse(reqUrl);\n\n  let requester: ClientRequestCreator;\n  if (parsedUrl.protocol === 'http:') {\n    requester = http.request;\n  } else if (parsedUrl.protocol === 'https:') {\n    requester = https.request;\n  } else {\n    return {\n      responsePromise: Promise.reject(new Error(`Unsupported protocol: ${parsedUrl.protocol}`)),\n      abort(): void {},\n    };\n  }\n\n  const requestOptions: http.RequestOptions = {\n    ...getRequestOptionsFromUrl(parsedUrl),\n    method: 'GET',\n    headers: {\n      ...headers,\n      'accept-encoding': 'gzip,deflate',\n    },\n  };\n\n  const request = requester(requestOptions);\n  const responsePromise = getResponseFromRequest(request);\n\n  request.end();\n\n  return {\n    abort(): void {\n      request.abort();\n    },\n    responsePromise,\n  };\n}\n","/**\n * Copyright 2022, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DatafileUpdate } from \"./datafileManager\";\n\nexport type Disposer = () => void;\n\nexport type Listener = (arg?: any) => void;\n\ninterface Listeners {\n  [index: string]: {\n    // index is event name\n    [index: string]: Listener; // index is listener id\n  };\n}\n\nexport default class EventEmitter {\n  private listeners: Listeners = {};\n\n  private listenerId = 1;\n\n  on(eventName: string, listener: Listener): Disposer {\n    if (!this.listeners[eventName]) {\n      this.listeners[eventName] = {};\n    }\n    const currentListenerId = String(this.listenerId);\n    this.listenerId++;\n    this.listeners[eventName][currentListenerId] = listener;\n    return (): void => {\n      if (this.listeners[eventName]) {\n        delete this.listeners[eventName][currentListenerId];\n      }\n    };\n  }\n\n  emit(eventName: string, arg?: DatafileUpdate): void {\n    const listeners = this.listeners[eventName];\n    if (listeners) {\n      Object.keys(listeners).forEach(listenerId => {\n        const listener = listeners[listenerId];\n        listener(arg);\n      });\n    }\n  }\n\n  removeAllListeners(): void {\n    this.listeners = {};\n  }\n}\n\n// TODO: Create a typed event emitter for use in TS only (not JS)\n","/**\n * Copyright 2019-2020, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BACKOFF_BASE_WAIT_SECONDS_BY_ERROR_COUNT } from './config';\n\nfunction randomMilliseconds(): number {\n  return Math.round(Math.random() * 1000);\n}\n\nexport default class BackoffController {\n  private errorCount = 0;\n\n  getDelay(): number {\n    if (this.errorCount === 0) {\n      return 0;\n    }\n    const baseWaitSeconds =\n      BACKOFF_BASE_WAIT_SECONDS_BY_ERROR_COUNT[\n        Math.min(BACKOFF_BASE_WAIT_SECONDS_BY_ERROR_COUNT.length - 1, this.errorCount)\n      ];\n    return baseWaitSeconds * 1000 + randomMilliseconds();\n  }\n\n  countError(): void {\n    if (this.errorCount < BACKOFF_BASE_WAIT_SECONDS_BY_ERROR_COUNT.length - 1) {\n      this.errorCount++;\n    }\n  }\n\n  reset(): void {\n    this.errorCount = 0;\n  }\n}\n","/**\n * Copyright 2022-2023, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getLogger } from '../logging';\nimport { sprintf } from '../../utils/fns';\nimport { DatafileManager, DatafileManagerConfig, DatafileUpdate } from './datafileManager';\nimport EventEmitter, { Disposer } from './eventEmitter';\nimport { AbortableRequest, Response, Headers } from './http';\nimport { DEFAULT_UPDATE_INTERVAL, MIN_UPDATE_INTERVAL, DEFAULT_URL_TEMPLATE, UPDATE_INTERVAL_BELOW_MINIMUM_MESSAGE } from './config';\nimport BackoffController from './backoffController';\nimport PersistentKeyValueCache from './persistentKeyValueCache';\n\nimport { NotificationRegistry } from './../../core/notification_center/notification_registry';\nimport { NOTIFICATION_TYPES } from '../../utils/enums';\n\nconst logger = getLogger('DatafileManager');\n\nconst UPDATE_EVT = 'update';\n\nfunction isSuccessStatusCode(statusCode: number): boolean {\n  return statusCode >= 200 && statusCode < 400;\n}\n\nconst noOpKeyValueCache: PersistentKeyValueCache = {\n  get(): Promise<string> {\n    return Promise.resolve('');\n  },\n\n  set(): Promise<void> {\n    return Promise.resolve();\n  },\n\n  contains(): Promise<boolean> {\n    return Promise.resolve(false);\n  },\n\n  remove(): Promise<void> {\n    return Promise.resolve();\n  },\n};\n\nexport default abstract class HttpPollingDatafileManager implements DatafileManager {\n  // Make an HTTP get request to the given URL with the given headers\n  // Return an AbortableRequest, which has a promise for a Response.\n  // If we can't get a response, the promise is rejected.\n  // The request will be aborted if the manager is stopped while the request is in flight.\n  protected abstract makeGetRequest(reqUrl: string, headers: Headers): AbortableRequest;\n\n  // Return any default configuration options that should be applied\n  protected abstract getConfigDefaults(): Partial<DatafileManagerConfig>;\n\n  private currentDatafile: string;\n\n  private readonly readyPromise: Promise<void>;\n\n  private isReadyPromiseSettled: boolean;\n\n  private readyPromiseResolver: () => void;\n\n  private readyPromiseRejecter: (err: Error) => void;\n\n  private readonly emitter: EventEmitter;\n\n  private readonly autoUpdate: boolean;\n\n  private readonly updateInterval: number;\n\n  private currentTimeout: any;\n\n  private isStarted: boolean;\n\n  private lastResponseLastModified?: string;\n\n  private datafileUrl: string;\n\n  private currentRequest: AbortableRequest | null;\n\n  private backoffController: BackoffController;\n\n  private cacheKey: string;\n\n  private cache: PersistentKeyValueCache;\n\n  private sdkKey: string;\n\n  // When true, this means the update interval timeout fired before the current\n  // sync completed. In that case, we should sync again immediately upon\n  // completion of the current request, instead of waiting another update\n  // interval.\n  private syncOnCurrentRequestComplete: boolean;\n\n  constructor(config: DatafileManagerConfig) {\n    const configWithDefaultsApplied: DatafileManagerConfig = {\n      ...this.getConfigDefaults(),\n      ...config,\n    };\n    const {\n      datafile,\n      autoUpdate = false,\n      sdkKey,\n      updateInterval = DEFAULT_UPDATE_INTERVAL,\n      urlTemplate = DEFAULT_URL_TEMPLATE,\n      cache = noOpKeyValueCache,\n    } = configWithDefaultsApplied;\n\n    this.cache = cache;\n    this.cacheKey = 'opt-datafile-' + sdkKey;\n    this.sdkKey = sdkKey;\n    this.isReadyPromiseSettled = false;\n    this.readyPromiseResolver = (): void => { };\n    this.readyPromiseRejecter = (): void => { };\n    this.readyPromise = new Promise((resolve, reject) => {\n      this.readyPromiseResolver = resolve;\n      this.readyPromiseRejecter = reject;\n    });\n\n    if (datafile) {\n      this.currentDatafile = datafile;\n      if (!sdkKey) {\n        this.resolveReadyPromise();\n      }\n    } else {\n      this.currentDatafile = '';\n    }\n\n    this.isStarted = false;\n\n    this.datafileUrl = sprintf(urlTemplate, sdkKey);\n\n    this.emitter = new EventEmitter();\n\n    this.autoUpdate = autoUpdate;\n\n    this.updateInterval = updateInterval;\n    if (this.updateInterval < MIN_UPDATE_INTERVAL) {\n      logger.warn(UPDATE_INTERVAL_BELOW_MINIMUM_MESSAGE);\n    }\n\n    this.currentTimeout = null;\n\n    this.currentRequest = null;\n\n    this.backoffController = new BackoffController();\n\n    this.syncOnCurrentRequestComplete = false;\n  }\n\n  get(): string {\n    return this.currentDatafile;\n  }\n\n  start(): void {\n    if (!this.isStarted) {\n      logger.debug('Datafile manager started');\n      this.isStarted = true;\n      this.backoffController.reset();\n      this.setDatafileFromCacheIfAvailable();\n      this.syncDatafile();\n    }\n  }\n\n  stop(): Promise<void> {\n    logger.debug('Datafile manager stopped');\n    this.isStarted = false;\n    if (this.currentTimeout) {\n      clearTimeout(this.currentTimeout);\n      this.currentTimeout = null;\n    }\n\n    this.emitter.removeAllListeners();\n\n    if (this.currentRequest) {\n      this.currentRequest.abort();\n      this.currentRequest = null;\n    }\n\n    return Promise.resolve();\n  }\n\n  onReady(): Promise<void> {\n    return this.readyPromise;\n  }\n\n  on(eventName: string, listener: (datafileUpdate: DatafileUpdate) => void): Disposer {\n    return this.emitter.on(eventName, listener);\n  }\n\n  private onRequestRejected(err: any): void {\n    if (!this.isStarted) {\n      return;\n    }\n\n    this.backoffController.countError();\n\n    if (err instanceof Error) {\n      logger.error('Error fetching datafile: %s', err.message, err);\n    } else if (typeof err === 'string') {\n      logger.error('Error fetching datafile: %s', err);\n    } else {\n      logger.error('Error fetching datafile');\n    }\n  }\n\n  private onRequestResolved(response: Response): void {\n    if (!this.isStarted) {\n      return;\n    }\n\n    if (typeof response.statusCode !== 'undefined' && isSuccessStatusCode(response.statusCode)) {\n      this.backoffController.reset();\n    } else {\n      this.backoffController.countError();\n    }\n\n    this.trySavingLastModified(response.headers);\n\n    const datafile = this.getNextDatafileFromResponse(response);\n    if (datafile !== '') {\n      logger.info('Updating datafile from response');\n      this.currentDatafile = datafile;\n      this.cache.set(this.cacheKey, datafile);\n      if (!this.isReadyPromiseSettled) {\n        this.resolveReadyPromise();\n      } else {\n        const datafileUpdate: DatafileUpdate = {\n          datafile,\n        };\n        NotificationRegistry.getNotificationCenter(this.sdkKey, logger)?.sendNotifications(\n          NOTIFICATION_TYPES.OPTIMIZELY_CONFIG_UPDATE\n        );\n        this.emitter.emit(UPDATE_EVT, datafileUpdate);\n      }\n    }\n  }\n\n  private onRequestComplete(this: HttpPollingDatafileManager): void {\n    if (!this.isStarted) {\n      return;\n    }\n\n    this.currentRequest = null;\n\n    if (!this.isReadyPromiseSettled && !this.autoUpdate) {\n      // We will never resolve ready, so reject it\n      this.rejectReadyPromise(new Error('Failed to become ready'));\n    }\n\n    if (this.autoUpdate && this.syncOnCurrentRequestComplete) {\n      this.syncDatafile();\n    }\n    this.syncOnCurrentRequestComplete = false;\n  }\n\n  private syncDatafile(): void {\n    const headers: Headers = {};\n    if (this.lastResponseLastModified) {\n      headers['if-modified-since'] = this.lastResponseLastModified;\n    }\n\n    logger.debug('Making datafile request to url %s with headers: %s', this.datafileUrl, () => JSON.stringify(headers));\n    this.currentRequest = this.makeGetRequest(this.datafileUrl, headers);\n\n    const onRequestComplete = (): void => {\n      this.onRequestComplete();\n    };\n    const onRequestResolved = (response: Response): void => {\n      this.onRequestResolved(response);\n    };\n    const onRequestRejected = (err: any): void => {\n      this.onRequestRejected(err);\n    };\n    this.currentRequest.responsePromise\n      .then(onRequestResolved, onRequestRejected)\n      .then(onRequestComplete, onRequestComplete);\n\n    if (this.autoUpdate) {\n      this.scheduleNextUpdate();\n    }\n  }\n\n  private resolveReadyPromise(): void {\n    this.readyPromiseResolver();\n    this.isReadyPromiseSettled = true;\n  }\n\n  private rejectReadyPromise(err: Error): void {\n    this.readyPromiseRejecter(err);\n    this.isReadyPromiseSettled = true;\n  }\n\n  private scheduleNextUpdate(): void {\n    const currentBackoffDelay = this.backoffController.getDelay();\n    const nextUpdateDelay = Math.max(currentBackoffDelay, this.updateInterval);\n    logger.debug('Scheduling sync in %s ms', nextUpdateDelay);\n    this.currentTimeout = setTimeout(() => {\n      if (this.currentRequest) {\n        this.syncOnCurrentRequestComplete = true;\n      } else {\n        this.syncDatafile();\n      }\n    }, nextUpdateDelay);\n  }\n\n  private getNextDatafileFromResponse(response: Response): string {\n    logger.debug('Response status code: %s', response.statusCode);\n    if (typeof response.statusCode === 'undefined') {\n      return '';\n    }\n    if (response.statusCode === 304) {\n      return '';\n    }\n    if (isSuccessStatusCode(response.statusCode)) {\n      return response.body;\n    }\n    return '';\n  }\n\n  private trySavingLastModified(headers: Headers): void {\n    const lastModifiedHeader = headers['last-modified'] || headers['Last-Modified'];\n    if (typeof lastModifiedHeader !== 'undefined') {\n      this.lastResponseLastModified = lastModifiedHeader;\n      logger.debug('Saved last modified header value from response: %s', this.lastResponseLastModified);\n    }\n  }\n\n  setDatafileFromCacheIfAvailable(): void {\n    this.cache.get(this.cacheKey).then(datafile => {\n      if (this.isStarted && !this.isReadyPromiseSettled && datafile !== '') {\n        logger.debug('Using datafile from cache');\n        this.currentDatafile = datafile;\n        this.resolveReadyPromise();\n      }\n    });\n  }\n}\n","/**\n * Copyright 2022, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getLogger } from '../logging';\nimport { makeGetRequest } from './nodeRequest';\nimport HttpPollingDatafileManager from './httpPollingDatafileManager';\nimport { Headers, AbortableRequest } from './http';\nimport { NodeDatafileManagerConfig, DatafileManagerConfig } from './datafileManager';\nimport { DEFAULT_URL_TEMPLATE, DEFAULT_AUTHENTICATED_URL_TEMPLATE } from './config';\n\nconst logger = getLogger('NodeDatafileManager');\n\nexport default class NodeDatafileManager extends HttpPollingDatafileManager {\n  private accessToken?: string;\n\n  constructor(config: NodeDatafileManagerConfig) {\n    const defaultUrlTemplate = config.datafileAccessToken ? DEFAULT_AUTHENTICATED_URL_TEMPLATE : DEFAULT_URL_TEMPLATE;\n    super({\n      ...config,\n      urlTemplate: config.urlTemplate || defaultUrlTemplate,\n    });\n    this.accessToken = config.datafileAccessToken;\n  }\n\n  protected makeGetRequest(reqUrl: string, headers: Headers): AbortableRequest {\n    const requestHeaders = Object.assign({}, headers);\n    if (this.accessToken) {\n      logger.debug('Adding Authorization header with Bearer Token');\n      requestHeaders['Authorization'] = `Bearer ${this.accessToken}`;\n    }\n    return makeGetRequest(reqUrl, requestHeaders);\n  }\n\n  protected getConfigDefaults(): Partial<DatafileManagerConfig> {\n    return {\n      autoUpdate: true,\n    };\n  }\n}\n","/**\n * Copyright 2022, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport NodeDatafileManager from './nodeDatafileManager';\nexport * from './datafileManager';\nexport { NodeDatafileManager as HttpPollingDatafileManager };\nexport default { HttpPollingDatafileManager: NodeDatafileManager };\n","/**\n * Copyright 2021-2022, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { LoggerFacade } from '../../modules/logging';\nimport datafileManager from '../../modules/datafile-manager/index.node';\nimport { DatafileOptions, DatafileManagerConfig, DatafileManager } from '../../shared_types';\nimport { toDatafile, tryCreatingProjectConfig } from '../../core/project_config';\nimport fns from '../../utils/fns';\n\nexport function createHttpPollingDatafileManager(\n  sdkKey: string,\n  logger: LoggerFacade,\n  // TODO[OASIS-6649]: Don't use object type\n  // eslint-disable-next-line  @typescript-eslint/ban-types\n  datafile?: string | object,\n  datafileOptions?: DatafileOptions,\n): DatafileManager {  \n  const datafileManagerConfig: DatafileManagerConfig = { sdkKey };\n  if (datafileOptions === undefined || (typeof datafileOptions === 'object' && datafileOptions !== null)) {\n    fns.assign(datafileManagerConfig, datafileOptions);\n  }\n  if (datafile) {\n    const { configObj, error } = tryCreatingProjectConfig({\n      datafile: datafile,\n      jsonSchemaValidator: undefined,\n      logger: logger,\n    });\n    \n    if (error) {\n      logger.error(error);\n    }\n    if (configObj) {\n      datafileManagerConfig.datafile = toDatafile(configObj);\n    }\n  }\n  return new datafileManager.HttpPollingDatafileManager(datafileManagerConfig);\n}\n","/**\n * Copyright 2022-2023 Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport http from 'http';\nimport https from 'https';\nimport url from 'url';\nimport { AbortableRequest, Headers, RequestHandler, Response } from './http';\nimport decompressResponse from 'decompress-response';\nimport { LogHandler } from '../../modules/logging';\nimport { REQUEST_TIMEOUT_MS } from '../enums';\n\n/**\n * Handles sending requests and receiving responses over HTTP via NodeJS http module\n */\nexport class NodeRequestHandler implements RequestHandler {\n  private readonly logger: LogHandler;\n  private readonly timeout: number;\n\n  constructor(logger: LogHandler, timeout: number = REQUEST_TIMEOUT_MS) {\n    this.logger = logger;\n    this.timeout = timeout;\n  }\n\n  /**\n   * Builds an XMLHttpRequest\n   * @param requestUrl Fully-qualified URL to which to send the request\n   * @param headers List of headers to include in the request\n   * @param method HTTP method to use\n   * @param data? stringified version of data to POST, PUT, etc\n   * @returns AbortableRequest contains both the response Promise and capability to abort()\n   */\n  makeRequest(requestUrl: string, headers: Headers, method: string, data?: string): AbortableRequest {\n    const parsedUrl = url.parse(requestUrl);\n\n    if (parsedUrl.protocol !== 'https:') {\n      return {\n        responsePromise: Promise.reject(new Error(`Unsupported protocol: ${parsedUrl.protocol}`)),\n        abort: () => {},\n      };\n    }\n\n    const request = https.request({\n      ...this.getRequestOptionsFromUrl(parsedUrl),\n      method,\n      headers: {\n        ...headers,\n        'accept-encoding': 'gzip,deflate',\n      },\n      timeout: this.timeout,\n    });\n    const abortableRequest = this.getAbortableRequestFromRequest(request);\n\n    if (data) {\n      request.write(data);\n    }\n    request.end();\n\n    return abortableRequest;\n  }\n\n  /**\n   * Parses a URL into its constituent parts\n   * @param url URL object to parse\n   * @private\n   * @returns https.RequestOptions Standard request options dictionary\n   */\n  private getRequestOptionsFromUrl(url: url.UrlWithStringQuery): https.RequestOptions {\n    return {\n      hostname: url.hostname,\n      path: url.path,\n      port: url.port,\n      protocol: url.protocol,\n    };\n  }\n\n  /**\n   * Parses headers from an http response\n   * @param incomingMessage Incoming response message to parse\n   * @private\n   * @returns Headers Dictionary of headers without duplicates\n   */\n  private createHeadersFromNodeIncomingMessage(incomingMessage: http.IncomingMessage): Headers {\n    const headers: Headers = {};\n    Object.keys(incomingMessage.headers).forEach(headerName => {\n      const headerValue = incomingMessage.headers[headerName];\n      if (typeof headerValue === 'string') {\n        headers[headerName] = headerValue;\n      } else if (typeof headerValue === 'undefined') {\n        // no value provided for this header\n      } else {\n        // array\n        if (headerValue.length > 0) {\n          // We don't care about multiple values - just take the first one\n          headers[headerName] = headerValue[0];\n        }\n      }\n    });\n    return headers;\n  }\n\n  /**\n   * Sends a built request handling response, errors, and events around the transmission\n   * @param request Request to send\n   * @private\n   * @returns AbortableRequest with simplified response promise\n   */\n  private getAbortableRequestFromRequest(request: http.ClientRequest): AbortableRequest {\n    let aborted = false;\n\n    const abort = () => {\n      aborted = true;\n      request.destroy();\n    };\n\n    const responsePromise: Promise<Response> = new Promise((resolve, reject) => {\n      request.on('timeout', () => {\n        aborted = true;\n        request.destroy();\n        reject(new Error('Request timed out'));\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      request.on('error', (err: any) => {\n        if (err instanceof Error) {\n          reject(err);\n        } else if (typeof err === 'string') {\n          reject(new Error(err));\n        } else {\n          reject(new Error('Request error'));\n        }\n      });\n\n      request.once('response', (incomingMessage: http.IncomingMessage) => {\n        if (aborted) {\n          return;\n        }\n\n        const response = decompressResponse(incomingMessage);\n\n        response.setEncoding('utf8');\n\n        let responseData = '';\n        response.on('data', (chunk: string) => {\n          if (!aborted) {\n            responseData += chunk;\n          }\n        });\n\n        response.on('end', () => {\n          if (aborted) {\n            return;\n          }\n\n          resolve({\n            statusCode: incomingMessage.statusCode,\n            body: responseData,\n            headers: this.createHeadersFromNodeIncomingMessage(incomingMessage),\n          });\n        });\n      });\n    });\n\n    return { abort, responsePromise };\n  }\n}\n","/**\n * Copyright 2022, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * CacheElement represents an individual generic item within the LRUCache\n */\nexport class CacheElement<V> {\n  private _value: V | null;\n  private _time: number;\n\n  get value(): V | null {\n    return this._value;\n  }\n  get time(): number {\n    return this._time;\n  }\n\n  constructor(value: V | null = null) {\n    this._value = value;\n    this._time = Date.now();\n  }\n\n  public is_stale(timeout: number): boolean {\n    if (timeout <= 0) return false;\n    return Date.now() - this._time >= timeout;\n  }\n}\n\nexport default CacheElement;\n","/**\n * Copyright 2022-2023, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getLogger } from '../../modules/logging';\nimport CacheElement from './cache_element';\n\nexport interface LRUCacheConfig {\n  maxSize: number;\n  timeout: number;\n}\n\nexport interface ICache<K, V> {\n  lookup(key: K): V | null;\n  save({ key, value }: { key: K; value: V }): void;\n  reset(): void;\n}\n\n/**\n * Least-Recently Used Cache (LRU Cache) Implementation with Generic Key-Value Pairs\n * Analogous to a Map that has a specified max size and a timeout per element.\n * - Removes the least-recently used element from the cache if max size exceeded.\n * - Removes stale elements (entries older than their timeout) from the cache.\n */\nexport class LRUCache<K, V> implements ICache<K, V> {\n  private _map: Map<K, CacheElement<V>> = new Map();\n  private _maxSize; // Defines maximum size of _map\n  private _timeout; // Milliseconds each entry has before it becomes stale\n\n  get map(): Map<K, CacheElement<V>> {\n    return this._map;\n  }\n\n  get maxSize(): number {\n    return this._maxSize;\n  }\n\n  get timeout(): number {\n    return this._timeout;\n  }\n\n  constructor({ maxSize, timeout }: LRUCacheConfig) {\n    const logger = getLogger();\n\n    logger.debug(`Provisioning cache with maxSize of ${maxSize}`);\n    logger.debug(`Provisioning cache with timeout of ${timeout}`);\n\n    this._maxSize = maxSize;\n    this._timeout = timeout;\n  }\n\n  /**\n   * Returns a valid, non-stale value from LRU Cache based on an input key.\n   * Additionally moves the element to the end of the cache and removes from cache if stale.\n   */\n  lookup(key: K): V | null {\n    if (this._maxSize <= 0) {\n      return null;\n    }\n\n    const element: CacheElement<V> | undefined = this._map.get(key);\n\n    if (!element) return null;\n\n    if (element.is_stale(this._timeout)) {\n      this._map.delete(key);\n      return null;\n    }\n\n    this._map.delete(key);\n    this._map.set(key, element);\n\n    return element.value;\n  }\n\n  /**\n   * Inserts/moves an input key-value pair to the end of the LRU Cache.\n   * Removes the least-recently used element if the cache exceeds it's maxSize.\n   */\n  save({ key, value }: { key: K; value: V }): void {\n    if (this._maxSize <= 0) return;\n\n    const element: CacheElement<V> | undefined = this._map.get(key);\n    if (element) this._map.delete(key);\n    this._map.set(key, new CacheElement(value));\n\n    if (this._map.size > this._maxSize) {\n      const firstMapEntryKey = this._map.keys().next().value;\n      this._map.delete(firstMapEntryKey);\n    }\n  }\n\n  /**\n   * Clears the LRU Cache\n   */\n  reset(): void {\n    if (this._maxSize <= 0) return;\n\n    this._map.clear();\n  }\n\n  /**\n   * Reads value from specified key without moving elements in the LRU Cache.\n   * @param {K} key\n   */\n  peek(key: K): V | null {\n    if (this._maxSize <= 0) return null;\n\n    const element: CacheElement<V> | undefined = this._map.get(key);\n\n    return element?.value ?? null;\n  }\n}\n\nexport interface ISegmentsCacheConfig {\n  DEFAULT_CAPACITY: number;\n  DEFAULT_TIMEOUT_SECS: number;\n}\n\nexport default LRUCache;\n","/**\n * Copyright 2022-2023, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport LRUCache, { ISegmentsCacheConfig } from './lru_cache';\n\nexport interface ServerLRUCacheConfig {\n  maxSize?: number;\n  timeout?: number;\n}\n\nexport const ServerLRUCacheConfig: ISegmentsCacheConfig = {\n  DEFAULT_CAPACITY: 10000,\n  DEFAULT_TIMEOUT_SECS: 600,\n};\n\nexport class ServerLRUCache<K, V> extends LRUCache<K, V> {\n  constructor(config?: ServerLRUCacheConfig) {\n    super({\n      maxSize: config?.maxSize?? ServerLRUCacheConfig.DEFAULT_CAPACITY,\n      timeout: config?.timeout?? ServerLRUCacheConfig.DEFAULT_TIMEOUT_SECS * 1000,\n    });\n  }\n}\n","/**\n * Copyright 2022-2023, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { uuid } from '../../utils/fns';\nimport PersistentKeyValueCache from '../key_value_cache/persistentKeyValueCache';\n\nexport interface IVuidManager {\n  readonly vuid: string;\n}\n\n/**\n * Manager for creating, persisting, and retrieving a Visitor Unique Identifier\n */\nexport class VuidManager implements IVuidManager {\n  /**\n   * Prefix used as part of the VUID format\n   * @public\n   * @readonly\n   */\n  static readonly vuid_prefix: string = `vuid_`;\n\n  /**\n   * Unique key used within the persistent value cache against which to\n   * store the VUID\n   * @private\n   */\n  private _keyForVuid = 'optimizely-vuid';\n\n  /**\n   * Current VUID value being used\n   * @private\n   */\n  private _vuid: string;\n\n  /**\n   * Get the current VUID value being used\n   */\n  get vuid(): string {\n    return this._vuid;\n  }\n\n  private constructor() {\n    this._vuid = '';\n  }\n\n  /**\n   * Instance of the VUID Manager\n   * @private\n   */\n  private static _instance: VuidManager;\n\n  /**\n   * Gets the current instance of the VUID Manager, initializing if needed\n   * @param cache Caching mechanism to use for persisting the VUID outside working memory   *\n   * @returns An instance of VuidManager\n   */\n  static async instance(cache: PersistentKeyValueCache): Promise<VuidManager> {\n    if (!this._instance) {\n      this._instance = new VuidManager();\n    }\n\n    if (!this._instance._vuid) {\n      await this._instance.load(cache);\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Attempts to load a VUID from persistent cache or generates a new VUID\n   * @param cache Caching mechanism to use for persisting the VUID outside working memory\n   * @returns Current VUID stored in the VuidManager\n   * @private\n   */\n  private async load(cache: PersistentKeyValueCache): Promise<string> {\n    const cachedValue = await cache.get(this._keyForVuid);\n    if (cachedValue && VuidManager.isVuid(cachedValue)) {\n      this._vuid = cachedValue;\n    } else {\n      this._vuid = this.makeVuid();\n      await this.save(this._vuid, cache);\n    }\n\n    return this._vuid;\n  }\n\n  /**\n   * Creates a new VUID\n   * @returns A new visitor unique identifier\n   * @private\n   */\n  private makeVuid(): string {\n    const maxLength = 32; // required by ODP server\n\n    // make sure UUIDv4 is used (not UUIDv1 or UUIDv6) since the trailing 5 chars will be truncated. See TDD for details.\n    const uuidV4 = uuid();\n    const formatted = uuidV4.replace(/-/g, '').toLowerCase();\n    const vuidFull = `${VuidManager.vuid_prefix}${formatted}`;\n\n    return vuidFull.length <= maxLength ? vuidFull : vuidFull.substring(0, maxLength);\n  }\n\n  /**\n   * Saves a VUID to a persistent cache\n   * @param vuid VUID to be stored\n   * @param cache Caching mechanism to use for persisting the VUID outside working memory\n   * @private\n   */\n  private async save(vuid: string, cache: PersistentKeyValueCache): Promise<void> {\n    await cache.set(this._keyForVuid, vuid);\n  }\n\n  /**\n   * Validates the format of a Visitor Unique Identifier\n   * @param vuid VistorId to check\n   * @returns *true* if the VisitorId is valid otherwise *false* for invalid\n   */\n  static isVuid = (vuid: string): boolean => vuid?.startsWith(VuidManager.vuid_prefix) || false;\n\n  /**\n   * Function used in unit testing to reset the VuidManager\n   * **Important**: This should not to be used in production code\n   * @private\n   */\n  private static _reset(): void {\n    this._instance._vuid = '';\n  }\n}\n","/**\n * Copyright 2023, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Validate event data value types\n * @param data Event data to be validated\n * @returns True if an invalid type was found in the data otherwise False\n * @private\n */\nexport function invalidOdpDataFound(data: Map<string, any>): boolean {\n  const validTypes: string[] = ['string', 'number', 'boolean'];\n  let foundInvalidValue = false;\n  data.forEach(value => {\n    if (!validTypes.includes(typeof value) && value !== null) {\n      foundInvalidValue = true;\n    }\n  });\n  return foundInvalidValue;\n}\n","/**\n * Copyright 2023, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LOG_MESSAGES } from './../../utils/enums/index';\nimport { getLogger, LogHandler, LogLevel } from '../../modules/logging';\nimport { ERROR_MESSAGES, ODP_USER_KEY } from '../../utils/enums';\n\nimport { VuidManager } from '../../plugins/vuid_manager';\n\nimport { OdpConfig } from './odp_config';\nimport { IOdpEventManager } from './odp_event_manager';\nimport { IOdpSegmentManager } from './odp_segment_manager';\nimport { OptimizelySegmentOption } from './optimizely_segment_option';\nimport { invalidOdpDataFound } from './odp_utils';\nimport { OdpEvent } from './odp_event';\n\n/**\n * Manager for handling internal all business logic related to\n * Optimizely Data Platform (ODP) / Advanced Audience Targeting (AAT)\n */\nexport interface IOdpManager {\n  initPromise?: Promise<void>;\n\n  enabled: boolean;\n\n  segmentManager: IOdpSegmentManager | undefined;\n\n  eventManager: IOdpEventManager | undefined;\n\n  updateSettings({ apiKey, apiHost, pixelUrl, segmentsToCheck }: OdpConfig): boolean;\n\n  close(): void;\n\n  fetchQualifiedSegments(userId: string, options?: Array<OptimizelySegmentOption>): Promise<string[] | null>;\n\n  identifyUser(userId?: string, vuid?: string): void;\n\n  sendEvent({ type, action, identifiers, data }: OdpEvent): void;\n\n  isVuidEnabled(): boolean;\n\n  getVuid(): string | undefined;\n}\n\n/**\n * Orchestrates segments manager, event manager, and ODP configuration\n */\nexport abstract class OdpManager implements IOdpManager {\n  /**\n   * Promise that returns when the OdpManager is finished initializing\n   */\n  initPromise?: Promise<void>;\n\n  /**\n   * Switch to enable/disable ODP Manager functionality\n   */\n  enabled = true;\n\n  /**\n   * ODP Segment Manager which provides an interface to the remote ODP server (GraphQL API) for audience segments mapping.\n   * It fetches all qualified segments for the given user context and manages the segments cache for all user contexts.\n   */\n  segmentManager: IOdpSegmentManager | undefined;\n\n  /**\n   * ODP Event Manager which provides an interface to the remote ODP server (REST API) for events.\n   * It will queue all pending events (persistent) and send them (in batches of up to 10 events) to the ODP server when possible.\n   */\n  eventManager: IOdpEventManager | undefined;\n\n  /**\n   * Handler for recording execution logs\n   * @protected\n   */\n  protected logger: LogHandler = getLogger(); // TODO: Consider making private and moving instantiation to constructor\n\n  /**\n   * ODP configuration settings for identifying the target API and segments\n   */\n  odpConfig: OdpConfig = new OdpConfig(); // TODO: Consider making private and adding public accessors\n\n  constructor() {} // TODO: Consider accepting logger as a parameter and initializing it in constructor instead\n\n  /**\n   * Provides a method to update ODP Manager's ODP Config API Key, API Host, and Audience Segments\n   */\n  updateSettings({ apiKey, apiHost, pixelUrl, segmentsToCheck }: OdpConfig): boolean {\n    if (!this.enabled) {\n      return false;\n    }\n\n    if (!this.eventManager) {\n      this.logger.log(LogLevel.ERROR, ERROR_MESSAGES.ODP_MANAGER_UPDATE_SETTINGS_FAILED_EVENT_MANAGER_MISSING);\n      return false;\n    }\n\n    if (!this.segmentManager) {\n      this.logger.log(LogLevel.ERROR, ERROR_MESSAGES.ODP_MANAGER_UPDATE_SETTINGS_FAILED_SEGMENTS_MANAGER_MISSING);\n      return false;\n    }\n\n    this.eventManager.flush();\n\n    const newConfig = new OdpConfig(apiKey, apiHost, pixelUrl, segmentsToCheck);\n    const configDidUpdate = this.odpConfig.update(newConfig);\n\n    if (configDidUpdate) {\n      this.odpConfig.update(newConfig);\n      this.segmentManager?.reset();\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Attempts to stop the current instance of ODP Manager's event manager, if it exists and is running.\n   */\n  close(): void {\n    if (!this.enabled) {\n      return;\n    }\n\n    this.eventManager?.stop();\n  }\n\n  /**\n   * Attempts to fetch and return a list of a user's qualified segments from the local segments cache.\n   * If no cached data exists for the target user, this fetches and caches data from the ODP server instead.\n   * @param {string}                          userId  - Unique identifier of a target user.\n   * @param {Array<OptimizelySegmentOption>}  options - An array of OptimizelySegmentOption used to ignore and/or reset the cache.\n   * @returns {Promise<string[] | null>}      A promise holding either a list of qualified segments or null.\n   */\n  async fetchQualifiedSegments(userId: string, options: Array<OptimizelySegmentOption> = []): Promise<string[] | null> {\n    if (!this.enabled) {\n      this.logger.log(LogLevel.ERROR, ERROR_MESSAGES.ODP_NOT_ENABLED);\n      return null;\n    }\n\n    if (!this.segmentManager) {\n      this.logger.log(LogLevel.ERROR, ERROR_MESSAGES.ODP_FETCH_QUALIFIED_SEGMENTS_SEGMENTS_MANAGER_MISSING);\n      return null;\n    }\n\n    if (VuidManager.isVuid(userId)) {\n      return this.segmentManager.fetchQualifiedSegments(ODP_USER_KEY.VUID, userId, options);\n    }\n\n    return this.segmentManager.fetchQualifiedSegments(ODP_USER_KEY.FS_USER_ID, userId, options);\n  }\n\n  /**\n   * Identifies a user via the ODP Event Manager\n   * @param {string}  userId    (Optional) Custom unique identifier of a target user.\n   * @param {string}  vuid      (Optional) Secondary unique identifier of a target user, primarily used by client SDKs.\n   * @returns\n   */\n  identifyUser(userId?: string, vuid?: string): void {\n    if (!this.enabled) {\n      this.logger.log(LogLevel.DEBUG, LOG_MESSAGES.ODP_IDENTIFY_FAILED_ODP_DISABLED);\n      return;\n    }\n\n    if (!this.odpConfig.isReady()) {\n      this.logger.log(LogLevel.DEBUG, LOG_MESSAGES.ODP_IDENTIFY_FAILED_ODP_NOT_INTEGRATED);\n      return;\n    }\n\n    if (!this.eventManager) {\n      this.logger.log(LogLevel.ERROR, ERROR_MESSAGES.ODP_IDENTIFY_FAILED_EVENT_MANAGER_MISSING);\n      return;\n    }\n\n    if (userId && VuidManager.isVuid(userId)) {\n      this.eventManager.identifyUser(undefined, userId);\n      return;\n    }\n\n    this.eventManager.identifyUser(userId, vuid);\n  }\n\n  /**\n   * Sends an event to the ODP Server via the ODP Events API\n   * @param {OdpEvent}  > ODP Event to send to event manager\n   */\n  sendEvent({ type, action, identifiers, data }: OdpEvent): void {\n    let mType = type;\n\n    if (typeof mType !== 'string' || mType === '') {\n      mType = 'fullstack';\n    }\n\n    if (!this.enabled) {\n      throw new Error(ERROR_MESSAGES.ODP_NOT_ENABLED);\n    }\n\n    if (!this.odpConfig.isReady()) {\n      throw new Error(ERROR_MESSAGES.ODP_NOT_INTEGRATED);\n    }\n\n    if (invalidOdpDataFound(data)) {\n      throw new Error(ERROR_MESSAGES.ODP_INVALID_DATA);\n    }\n\n    if (!this.eventManager) {\n      throw new Error(ERROR_MESSAGES.ODP_SEND_EVENT_FAILED_EVENT_MANAGER_MISSING);\n    }\n\n    if (typeof action !== 'string' || action === '') {\n      throw new Error('ODP action is not valid (cannot be empty).');\n    }\n\n    this.eventManager.sendEvent(new OdpEvent(mType, action, identifiers, data));\n  }\n\n  /**\n   * Identifies if the VUID feature is enabled\n   */\n  abstract isVuidEnabled(): boolean;\n\n  /**\n   * Returns VUID value if it exists\n   */\n  abstract getVuid(): string | undefined;\n}\n","/**\n * Copyright 2022-2023, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LogHandler, LogLevel } from '../../modules/logging';\n\nimport { uuid } from '../../utils/fns';\nimport { ERROR_MESSAGES, ODP_USER_KEY, ODP_DEFAULT_EVENT_TYPE, ODP_EVENT_ACTION } from '../../utils/enums';\n\nimport { OdpEvent } from './odp_event';\nimport { OdpConfig } from './odp_config';\nimport { IOdpEventApiManager } from './odp_event_api_manager';\nimport { invalidOdpDataFound } from './odp_utils';\nimport { IUserAgentParser } from './user_agent_parser';\n\nconst MAX_RETRIES = 3;\n\n/**\n * Event dispatcher's execution states\n */\nexport enum STATE {\n  STOPPED,\n  RUNNING,\n  PROCESSING,\n}\n\n/**\n * Manager for persisting events to the Optimizely Data Platform (ODP)\n */\nexport interface IOdpEventManager {\n  updateSettings(odpConfig: OdpConfig): void;\n\n  start(): void;\n\n  stop(): Promise<void>;\n\n  registerVuid(vuid: string): void;\n\n  identifyUser(userId?: string, vuid?: string): void;\n\n  sendEvent(event: OdpEvent): void;\n\n  flush(): void;\n}\n\n/**\n * Concrete implementation of a manager for persisting events to the Optimizely Data Platform\n */\nexport abstract class OdpEventManager implements IOdpEventManager {\n  /**\n   * Current state of the event processor\n   */\n  state: STATE = STATE.STOPPED;\n\n  /**\n   * Queue for holding all events to be eventually dispatched\n   * @protected\n   */\n  protected queue = new Array<OdpEvent>();\n\n  /**\n   * Identifier of the currently running timeout so clearCurrentTimeout() can be called\n   * @private\n   */\n  private timeoutId?: NodeJS.Timeout | number;\n\n  /**\n   * ODP configuration settings for identifying the target API and segments\n   * @private\n   */\n  private odpConfig: OdpConfig;\n\n  /**\n   * REST API Manager used to send the events\n   * @private\n   */\n  private readonly apiManager: IOdpEventApiManager;\n\n  /**\n   * Handler for recording execution logs\n   * @private\n   */\n  private readonly logger: LogHandler;\n\n  /**\n   * Maximum queue size\n   * @protected\n   */\n  protected queueSize!: number;\n\n  /**\n   * Maximum number of events to process at once. Ignored in browser context\n   * @protected\n   */\n  protected batchSize!: number;\n\n  /**\n   * Milliseconds between setTimeout() to process new batches. Ignored in browser context\n   * @protected\n   */\n  protected flushInterval!: number;\n\n  /**\n   * Type of execution context eg node, js, react\n   * @private\n   */\n  private readonly clientEngine: string;\n\n  /**\n   * Version of the client being used\n   * @private\n   */\n  private readonly clientVersion: string;\n\n  /**\n   * Version of the client being used\n   * @private\n   */\n  private readonly userAgentParser?: IUserAgentParser;\n\n\n  /**\n   * Information about the user agent\n   * @private\n   */\n  private readonly userAgentData?: Map<string, unknown>;\n\n  constructor({\n    odpConfig,\n    apiManager,\n    logger,\n    clientEngine,\n    clientVersion,\n    queueSize,\n    batchSize,\n    flushInterval,\n    userAgentParser,\n  }: {\n    odpConfig: OdpConfig;\n    apiManager: IOdpEventApiManager;\n    logger: LogHandler;\n    clientEngine: string;\n    clientVersion: string;\n    queueSize?: number;\n    batchSize?: number;\n    flushInterval?: number;\n    userAgentParser?: IUserAgentParser;\n  }) {\n    this.odpConfig = odpConfig;\n    this.apiManager = apiManager;\n    this.logger = logger;\n    this.clientEngine = clientEngine;\n    this.clientVersion = clientVersion;\n    this.initParams(batchSize, queueSize, flushInterval);\n    this.state = STATE.STOPPED;\n    this.userAgentParser = userAgentParser;\n\n    if (userAgentParser) {\n      const { os, device } = userAgentParser.parseUserAgentInfo();\n\n      const userAgentInfo: Record<string, unknown> = {\n        'os': os.name,\n        'os_version': os.version,\n        'device_type': device.type,\n        'model': device.model,\n      };\n\n      this.userAgentData = new Map<string, unknown>(\n        Object.entries(userAgentInfo).filter(([key, value]) => value != null && value != undefined)\n      );\n    }\n\n    this.apiManager.updateSettings(odpConfig);\n  }\n\n  protected abstract initParams(\n    batchSize: number | undefined,\n    queueSize: number | undefined,\n    flushInterval: number | undefined\n  ): void;\n\n  /**\n   * Update ODP configuration settings.\n   * @param newConfig New configuration to apply\n   */\n  updateSettings(newConfig: OdpConfig): void {\n    this.odpConfig = newConfig;\n    this.apiManager.updateSettings(newConfig);\n  }\n\n  /**\n   * Cleans up all pending events; occurs every time the ODP Config is updated.\n   */\n  flush(): void {\n    this.processQueue(true);\n  }\n\n  /**\n   * Start processing events in the queue\n   */\n  start(): void {\n    this.state = STATE.RUNNING;\n\n    this.setNewTimeout();\n  }\n\n  /**\n   * Drain the queue sending all remaining events in batches then stop processing\n   */\n  async stop(): Promise<void> {\n    this.logger.log(LogLevel.DEBUG, 'Stop requested.');\n\n    await this.processQueue(true);\n\n    this.state = STATE.STOPPED;\n    this.logger.log(LogLevel.DEBUG, 'Stopped. Queue Count: %s', this.queue.length);\n  }\n\n  /**\n   * Register a new visitor user id (VUID) in ODP\n   * @param vuid Visitor User ID to send\n   */\n  registerVuid(vuid: string): void {\n    const identifiers = new Map<string, string>();\n    identifiers.set(ODP_USER_KEY.VUID, vuid);\n\n    const event = new OdpEvent(ODP_DEFAULT_EVENT_TYPE, ODP_EVENT_ACTION.INITIALIZED, identifiers);\n    this.sendEvent(event);\n  }\n\n  /**\n   * Associate a full-stack userid with an established VUID\n   * @param {string} userId   (Optional) Full-stack User ID\n   * @param {string} vuid     (Optional) Visitor User ID\n   */\n  identifyUser(userId?: string, vuid?: string): void {\n    const identifiers = new Map<string, string>();\n    if (!userId && !vuid) {\n      this.logger.log(LogLevel.ERROR, ERROR_MESSAGES.ODP_SEND_EVENT_FAILED_UID_MISSING);\n      return;\n    }\n\n    if (vuid) {\n      identifiers.set(ODP_USER_KEY.VUID, vuid);\n    }\n\n    if (userId) {\n      identifiers.set(ODP_USER_KEY.FS_USER_ID, userId);\n    }\n\n    const event = new OdpEvent(ODP_DEFAULT_EVENT_TYPE, ODP_EVENT_ACTION.IDENTIFIED, identifiers);\n    this.sendEvent(event);\n  }\n\n  /**\n   * Send an event to ODP via dispatch queue\n   * @param event ODP Event to forward\n   */\n  sendEvent(event: OdpEvent): void {\n    if (invalidOdpDataFound(event.data)) {\n      this.logger.log(LogLevel.ERROR, 'Event data found to be invalid.');\n    } else {\n      event.data = this.augmentCommonData(event.data);\n      this.enqueue(event);\n    }\n  }\n\n  /**\n   * Add a new event to the main queue\n   * @param event ODP Event to be queued\n   * @private\n   */\n  private enqueue(event: OdpEvent): void {\n    if (this.state === STATE.STOPPED) {\n      this.logger.log(LogLevel.WARNING, 'Failed to Process ODP Event. ODPEventManager is not running.');\n      return;\n    }\n\n    if (!this.hasNecessaryIdentifiers(event)) {\n      this.logger.log(LogLevel.ERROR, 'ODP events should have at least one key-value pair in identifiers.');\n      return;\n    }\n\n    if (this.queue.length >= this.queueSize) {\n      this.logger.log(\n        LogLevel.WARNING,\n        'Failed to Process ODP Event. Event Queue full. queueSize = %s.',\n        this.queue.length\n      );\n      return;\n    }\n\n    this.queue.push(event);\n\n    this.processQueue();\n  }\n\n  protected abstract hasNecessaryIdentifiers(event: OdpEvent): boolean;\n\n  /**\n   * Process events in the main queue\n   * @param shouldFlush Flush all events regardless of available queue event count\n   * @private\n   */\n  private processQueue(shouldFlush = false): void {\n    if (this.state !== STATE.RUNNING) {\n      return;\n    }\n\n    if (!this.isOdpConfigurationReady()) {\n      return;\n    }\n\n    // Flush interval occurred & queue has items\n    if (shouldFlush) {\n      // clear the queue completely\n      this.clearCurrentTimeout();\n\n      this.state = STATE.PROCESSING;\n\n      while (this.queueContainsItems()) {\n        this.makeAndSend1Batch();\n      }\n    }\n    // Check if queue has a full batch available\n    else if (this.queueHasBatches()) {\n      this.clearCurrentTimeout();\n\n      this.state = STATE.PROCESSING;\n\n      while (this.queueHasBatches()) {\n        this.makeAndSend1Batch();\n      }\n    }\n\n    this.state = STATE.RUNNING;\n    this.setNewTimeout();\n  }\n\n  /**\n   * Clear the currently running timout\n   * @private\n   */\n  private clearCurrentTimeout(): void {\n    clearTimeout(this.timeoutId);\n    this.timeoutId = undefined;\n  }\n\n  /**\n   * Start a new timeout\n   * @private\n   */\n  private setNewTimeout(): void {\n    if (this.timeoutId !== undefined) {\n      return;\n    }\n    this.timeoutId = setTimeout(() => this.processQueue(true), this.flushInterval);\n  }\n\n  /**\n   * Make a batch and send it to ODP\n   * @private\n   */\n  private makeAndSend1Batch(): void {\n    const batch = new Array<OdpEvent>();\n    \n    // remove a batch from the queue\n    for (let count = 0; count < this.batchSize; count += 1) {\n      const event = this.queue.shift();\n      if (event) {\n        batch.push(event);\n      } else {\n        break;\n      }\n    }\n\n    if (batch.length > 0) {\n      // put sending the event on another event loop\n      setTimeout(async () => {\n        let shouldRetry: boolean;\n        let attemptNumber = 0;\n        do {\n          shouldRetry = await this.apiManager.sendEvents(batch);\n          attemptNumber += 1;\n        } while (shouldRetry && attemptNumber < MAX_RETRIES);\n      });\n    }\n  }\n\n  /**\n   * Check if main queue has any full/even batches available\n   * @returns True if there are event batches available in the queue otherwise False\n   * @private\n   */\n  private queueHasBatches(): boolean {\n    return this.queueContainsItems() && this.queue.length % this.batchSize === 0;\n  }\n\n  /**\n   * Check if main queue has any items\n   * @returns True if there are any events in the queue otherwise False\n   * @private\n   */\n  private queueContainsItems(): boolean {\n    return this.queue.length > 0;\n  }\n\n  /**\n   * Check if the ODP Configuration is ready and log if not.\n   * Potentially clear queue if server-side\n   * @returns True if the ODP configuration is ready otherwise False\n   * @private\n   */\n  private isOdpConfigurationReady(): boolean {\n    if (this.odpConfig.isReady()) {\n      return true;\n    }\n    this.discardEventsIfNeeded();\n    return false;\n  }\n\n  protected abstract discardEventsIfNeeded(): void;\n\n  /**\n   * Add additional common data including an idempotent ID and execution context to event data\n   * @param sourceData Existing event data to augment\n   * @returns Augmented event data\n   * @private\n   */\n  private augmentCommonData(sourceData: Map<string, unknown>): Map<string, unknown> {\n    const data = new Map<string, unknown>(this.userAgentData);\n  \n    data.set('idempotence_id', uuid());\n    data.set('data_source_type', 'sdk');\n    data.set('data_source', this.clientEngine);\n    data.set('data_source_version', this.clientVersion);\n\n    sourceData.forEach((value, key) => data.set(key, value));\n    return data;\n  }\n\n  protected getLogger(): LogHandler {\n    return this.logger;\n  }\n}\n","import { OdpEvent } from '../../../core/odp/odp_event';\nimport { OdpEventApiManager } from '../../../core/odp/odp_event_api_manager';\nimport { LogLevel } from '../../../modules/logging';\nimport { ODP_CONFIG_NOT_READY_MESSAGE } from '../../../core/odp/odp_event_api_manager';\nexport class NodeOdpEventApiManager extends OdpEventApiManager {\n  protected shouldSendEvents(events: OdpEvent[]): boolean {\n    return true;\n  }\n\n  protected generateRequestData(\n    events: OdpEvent[]\n  ): { method: string; endpoint: string; headers: { [key: string]: string }; data: string } {\n    // the caller should ensure odpConfig is ready before calling\n    if (!this.odpConfig?.isReady()) {\n      this.getLogger().log(LogLevel.ERROR, ODP_CONFIG_NOT_READY_MESSAGE);\n      throw new Error(ODP_CONFIG_NOT_READY_MESSAGE);\n    }\n    \n    const apiHost = this.odpConfig.apiHost;\n    const apiKey = this.odpConfig.apiKey;\n    \n    return {\n      method: 'POST',\n      endpoint: `${apiHost}/v3/events`,\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-key': apiKey,\n      },\n      data: JSON.stringify(events, this.replacer),\n    };\n  }\n\n  private replacer(_: unknown, value: unknown) {\n    if (value instanceof Map) {\n      return Object.fromEntries(value);\n    } else {\n      return value;\n    }\n  }\n}\n","/**\n * Copyright 2022-2023, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LogHandler, LogLevel } from '../../modules/logging';\nimport { OdpEvent } from './odp_event';\nimport { RequestHandler } from '../../utils/http_request_handler/http';\nimport { OdpConfig } from './odp_config';\n\nconst EVENT_SENDING_FAILURE_MESSAGE = 'ODP event send failed';\nexport const ODP_CONFIG_NOT_READY_MESSAGE = 'ODP config not ready';\n\n/**\n * Manager for communicating with the Optimizely Data Platform REST API\n */\nexport interface IOdpEventApiManager {\n  sendEvents(events: OdpEvent[]): Promise<boolean>;\n  updateSettings(odpConfig: OdpConfig): void;\n}\n\n/**\n * Concrete implementation for accessing the ODP REST API\n */\nexport abstract class OdpEventApiManager implements IOdpEventApiManager {\n  /**\n   * Handler for recording execution logs\n   * @private\n   */\n  private readonly logger: LogHandler;\n\n  /**\n   * Handler for making external HTTP/S requests\n   * @private\n   */\n  private readonly requestHandler: RequestHandler;\n\n  /**\n   * ODP configuration settings for identifying the target API and segments\n   */\n  protected odpConfig?: OdpConfig;\n\n  /**\n   * Creates instance to access Optimizely Data Platform (ODP) REST API\n   * @param requestHandler Desired request handler for testing\n   * @param logger Collect and record events/errors for this GraphQL implementation\n   */\n  constructor(requestHandler: RequestHandler, logger: LogHandler) {\n    this.requestHandler = requestHandler;\n    this.logger = logger;\n  }\n\n  /**\n   * Updates odpConfig of the api manager instance\n   * @param odpConfig \n   */\n  updateSettings(odpConfig: OdpConfig): void {\n    this.odpConfig = odpConfig;\n  }\n\n  getLogger(): LogHandler {\n    return this.logger;\n  }\n\n  /**\n   * Service for sending ODP events to REST API\n   * @param events ODP events to send\n   * @returns Retry is true - if network or server error (5xx), otherwise false\n   */\n  async sendEvents(events: OdpEvent[]): Promise<boolean> {\n    let shouldRetry = false;\n\n    if (!this.odpConfig?.isReady()) {\n      this.logger.log(LogLevel.ERROR, `${EVENT_SENDING_FAILURE_MESSAGE} (${ODP_CONFIG_NOT_READY_MESSAGE})`);\n      return shouldRetry;\n    }\n\n    if (events.length === 0) {\n      this.logger.log(LogLevel.ERROR, `${EVENT_SENDING_FAILURE_MESSAGE} (no events)`);\n      return shouldRetry;\n    }\n\n    if (!this.shouldSendEvents(events)) {\n      return shouldRetry;\n    }\n\n    const { method, endpoint, headers, data } = this.generateRequestData(events);\n\n    let statusCode = 0;\n    try {\n      const request = this.requestHandler.makeRequest(endpoint, headers, method, data);\n      const response = await request.responsePromise;\n      statusCode = response.statusCode ?? statusCode;\n    } catch (err) {\n      let message = 'network error';\n      if (err instanceof Error) {\n        message = (err as Error).message;\n      }\n      this.logger.log(LogLevel.ERROR, `${EVENT_SENDING_FAILURE_MESSAGE} (${message})`);\n      shouldRetry = true;\n    }\n\n    if (statusCode >= 400) {\n      this.logger.log(LogLevel.ERROR, `${EVENT_SENDING_FAILURE_MESSAGE} (${statusCode})`);\n    }\n\n    if (statusCode >= 500) {\n      shouldRetry = true;\n    }\n\n    return shouldRetry;\n  }\n\n  protected abstract shouldSendEvents(events: OdpEvent[]): boolean;\n\n  protected abstract generateRequestData(\n    events: OdpEvent[]\n  ): {\n    method: string;\n    endpoint: string;\n    headers: { [key: string]: string };\n    data: string;\n  };\n}\n","/**\n * Copyright 2023, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OdpEvent } from '../../../core/odp/odp_event';\nimport { IOdpEventManager, OdpEventManager } from '../../../core/odp/odp_event_manager';\nimport { LogLevel } from '../../../modules/logging';\n\nconst DEFAULT_BATCH_SIZE = 10;\nconst DEFAULT_FLUSH_INTERVAL_MSECS = 1000;\nconst DEFAULT_SERVER_QUEUE_SIZE = 10000;\n\nexport class NodeOdpEventManager extends OdpEventManager implements IOdpEventManager {\n  protected initParams(\n    batchSize: number | undefined,\n    queueSize: number | undefined,\n    flushInterval: number | undefined\n  ): void {\n    this.queueSize = queueSize || DEFAULT_SERVER_QUEUE_SIZE;\n    this.batchSize = batchSize || DEFAULT_BATCH_SIZE;\n\n    if (flushInterval === 0) {\n      // disable event batching\n      this.batchSize = 1;\n      this.flushInterval = 0;\n    } else {\n      this.flushInterval = flushInterval || DEFAULT_FLUSH_INTERVAL_MSECS;\n    }\n  }\n\n  protected discardEventsIfNeeded(): void {\n    // if Node/server-side context, empty queue items before ready state\n    this.getLogger().log(LogLevel.WARNING, 'ODPConfig not ready. Discarding events in queue.');\n    this.queue = new Array<OdpEvent>();\n  }\n\n  protected hasNecessaryIdentifiers = (event: OdpEvent): boolean => event.identifiers.size >= 1;\n}\n","/**\n * Copyright 2022-2023, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getLogger, LogHandler, LogLevel } from '../../modules/logging';\nimport { ERROR_MESSAGES, ODP_USER_KEY } from '../../utils/enums';\nimport { ICache } from '../../utils/lru_cache';\nimport { IOdpSegmentApiManager } from './odp_segment_api_manager';\nimport { OdpConfig } from './odp_config';\nimport { OptimizelySegmentOption } from './optimizely_segment_option';\n\nexport interface IOdpSegmentManager {\n  fetchQualifiedSegments(\n    userKey: ODP_USER_KEY,\n    userValue: string,\n    options: Array<OptimizelySegmentOption>\n  ): Promise<string[] | null>;\n  reset(): void;\n  makeCacheKey(userKey: string, userValue: string): string;\n  updateSettings(config: OdpConfig): void;\n}\n\n/**\n * Schedules connections to ODP for audience segmentation and caches the results.\n */\nexport class OdpSegmentManager implements IOdpSegmentManager {\n  /**\n   * ODP configuration settings in used\n   * @private\n   */\n  private odpConfig: OdpConfig;\n\n  /**\n   * Holds cached audience segments\n   * @private\n   */\n  private _segmentsCache: ICache<string, string[]>;\n\n  /**\n   * Getter for private segments cache\n   * @public\n   */\n  get segmentsCache(): ICache<string, string[]> {\n    return this._segmentsCache;\n  }\n\n  /**\n   * GraphQL API Manager used to fetch segments\n   * @private\n   */\n  private odpSegmentApiManager: IOdpSegmentApiManager;\n\n  /**\n   * Handler for recording execution logs\n   * @private\n   */\n  private readonly logger: LogHandler;\n\n  constructor(\n    odpConfig: OdpConfig,\n    segmentsCache: ICache<string, string[]>,\n    odpSegmentApiManager: IOdpSegmentApiManager,\n    logger?: LogHandler\n  ) {\n    this.odpConfig = odpConfig;\n    this._segmentsCache = segmentsCache;\n    this.odpSegmentApiManager = odpSegmentApiManager;\n    this.logger = logger || getLogger('OdpSegmentManager');\n  }\n\n  /**\n   * Attempts to fetch and return a list of a user's qualified segments from the local segments cache.\n   * If no cached data exists for the target user, this fetches and caches data from the ODP server instead.\n   * @param userKey Key used for identifying the id type.\n   * @param userValue The id value itself.\n   * @param options An array of OptimizelySegmentOption used to ignore and/or reset the cache.\n   * @returns Qualified segments for the user from the cache or the ODP server if the cache is empty.\n   */\n  async fetchQualifiedSegments(\n    userKey: ODP_USER_KEY,\n    userValue: string,\n    options: Array<OptimizelySegmentOption>\n  ): Promise<string[] | null> {\n    const { apiHost: odpApiHost, apiKey: odpApiKey } = this.odpConfig;\n\n    if (!odpApiKey || !odpApiHost) {\n      this.logger.log(LogLevel.WARNING, ERROR_MESSAGES.FETCH_SEGMENTS_FAILED_INVALID_IDENTIFIER);\n      return null;\n    }\n\n    const segmentsToCheck = this.odpConfig.segmentsToCheck;\n    if (!segmentsToCheck || segmentsToCheck.length <= 0) {\n      this.logger.log(LogLevel.DEBUG, 'No segments are used in the project. Returning an empty list.');\n      return [];\n    }\n\n    const cacheKey = this.makeCacheKey(userKey, userValue);\n\n    const ignoreCache = options.includes(OptimizelySegmentOption.IGNORE_CACHE);\n    const resetCache = options.includes(OptimizelySegmentOption.RESET_CACHE);\n\n    if (resetCache) {\n      this.reset();\n    }\n\n    if (!ignoreCache && !resetCache) {\n      const cachedSegments = this._segmentsCache.lookup(cacheKey);\n      if (cachedSegments) {\n        this.logger.log(LogLevel.DEBUG, 'ODP cache hit. Returning segments from cache \"%s\".', cacheKey);\n        return cachedSegments;\n      }\n      this.logger.log(LogLevel.DEBUG, `ODP cache miss.`);\n    }\n\n    this.logger.log(LogLevel.DEBUG, `Making a call to ODP server.`);\n\n    const segments = await this.odpSegmentApiManager.fetchSegments(\n      odpApiKey,\n      odpApiHost,\n      userKey,\n      userValue,\n      segmentsToCheck\n    );\n\n    if (segments && !ignoreCache) {\n      this._segmentsCache.save({ key: cacheKey, value: segments });\n    }\n\n    return segments;\n  }\n\n  /**\n   * Clears the segments cache\n   */\n  reset(): void {\n    this._segmentsCache.reset();\n  }\n\n  /**\n   * Creates a key used to identify which user fetchQualifiedSegments should lookup and save to in the segments cache\n   * @param userKey User type based on ODP_USER_KEY, such as \"vuid\" or \"fs_user_id\"\n   * @param userValue Arbitrary string, such as \"test-user\"\n   * @returns Concatenates inputs and returns the string \"{userKey}-$-{userValue}\"\n   */\n  makeCacheKey(userKey: string, userValue: string): string {\n    return `${userKey}-$-${userValue}`;\n  }\n\n  /**\n   * Updates the ODP Config settings of ODP Segment Manager\n   * @param config New ODP Config that will overwrite the existing config\n   */\n  updateSettings(config: OdpConfig): void {\n    this.odpConfig = config;\n    this._segmentsCache.reset();\n  }\n}\n","/**\n * Copyright 2016-2017, 2020, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*eslint-disable */\n/**\n * Project Config JSON Schema file used to validate the project json datafile\n */\nimport { JSONSchema4 } from 'json-schema';\n\nvar schemaDefinition = {\n  $schema: 'http://json-schema.org/draft-04/schema#',\n  title: 'Project Config JSON Schema',\n  type: 'object',\n  properties: {\n    projectId: {\n      type: 'string',\n      required: true,\n    },\n    accountId: {\n      type: 'string',\n      required: true,\n    },\n    groups: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string',\n            required: true,\n          },\n          policy: {\n            type: 'string',\n            required: true,\n          },\n          trafficAllocation: {\n            type: 'array',\n            items: {\n              type: 'object',\n              properties: {\n                entityId: {\n                  type: 'string',\n                  required: true,\n                },\n                endOfRange: {\n                  type: 'integer',\n                  required: true,\n                },\n              },\n            },\n            required: true,\n          },\n          experiments: {\n            type: 'array',\n            items: {\n              type: 'object',\n              properties: {\n                id: {\n                  type: 'string',\n                  required: true,\n                },\n                key: {\n                  type: 'string',\n                  required: true,\n                },\n                status: {\n                  type: 'string',\n                  required: true,\n                },\n                layerId: {\n                  type: 'string',\n                  required: true,\n                },\n                variations: {\n                  type: 'array',\n                  items: {\n                    type: 'object',\n                    properties: {\n                      id: {\n                        type: 'string',\n                        required: true,\n                      },\n                      key: {\n                        type: 'string',\n                        required: true,\n                      },\n                    },\n                  },\n                  required: true,\n                },\n                trafficAllocation: {\n                  type: 'array',\n                  items: {\n                    type: 'object',\n                    properties: {\n                      entityId: {\n                        type: 'string',\n                        required: true,\n                      },\n                      endOfRange: {\n                        type: 'integer',\n                        required: true,\n                      },\n                    },\n                  },\n                  required: true,\n                },\n                audienceIds: {\n                  type: 'array',\n                  items: {\n                    type: 'string',\n                  },\n                  required: true,\n                },\n                forcedVariations: {\n                  type: 'object',\n                  required: true,\n                },\n              },\n            },\n            required: true,\n          },\n        },\n      },\n      required: true,\n    },\n    experiments: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string',\n            required: true,\n          },\n          key: {\n            type: 'string',\n            required: true,\n          },\n          status: {\n            type: 'string',\n            required: true,\n          },\n          layerId: {\n            type: 'string',\n            required: true,\n          },\n          variations: {\n            type: 'array',\n            items: {\n              type: 'object',\n              properties: {\n                id: {\n                  type: 'string',\n                  required: true,\n                },\n                key: {\n                  type: 'string',\n                  required: true,\n                },\n              },\n            },\n            required: true,\n          },\n          trafficAllocation: {\n            type: 'array',\n            items: {\n              type: 'object',\n              properties: {\n                entityId: {\n                  type: 'string',\n                  required: true,\n                },\n                endOfRange: {\n                  type: 'integer',\n                  required: true,\n                },\n              },\n            },\n            required: true,\n          },\n          audienceIds: {\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n            required: true,\n          },\n          forcedVariations: {\n            type: 'object',\n            required: true,\n          },\n        },\n      },\n      required: true,\n    },\n    events: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          key: {\n            type: 'string',\n            required: true,\n          },\n          experimentIds: {\n            type: 'array',\n            items: {\n              type: 'string',\n              required: true,\n            },\n          },\n          id: {\n            type: 'string',\n            required: true,\n          },\n        },\n      },\n      required: true,\n    },\n    audiences: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string',\n            required: true,\n          },\n          name: {\n            type: 'string',\n            required: true,\n          },\n          conditions: {\n            type: 'string',\n            required: true,\n          },\n        },\n      },\n      required: true,\n    },\n    attributes: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string',\n            required: true,\n          },\n          key: {\n            type: 'string',\n            required: true,\n          },\n        },\n      },\n      required: true,\n    },\n    version: {\n      type: 'string',\n      required: true,\n    },\n    revision: {\n      type: 'string',\n      required: true,\n    },\n    integrations: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          key: {\n            type: 'string',\n            required: true\n          },\n          host: {\n            type: 'string'\n          },\n          publicKey: {\n            type: 'string'\n          },\n          pixelUrl: {\n            type: 'string'\n          },\n        },\n      },\n    },\n  },\n};\n\nconst schema = schemaDefinition as JSONSchema4\n\nexport default schema\n","/**\n * Copyright 2022, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JSONSchema4 } from 'json-schema';\n\n/**\n * JSON Schema used to validate the ODP GraphQL response\n */\nexport const OdpResponseSchema = {\n  $schema: 'https://json-schema.org/draft/2019-09/schema',\n  $id: 'https://example.com/example.json',\n  title: 'ODP Response Schema',\n  type: 'object',\n  required: [\n    'data',\n  ],\n  properties: {\n    data: {\n      title: 'The data Schema',\n      type: 'object',\n      required: [\n        'customer',\n      ],\n      properties: {\n        customer: {\n          title: 'The customer Schema',\n          type: 'object',\n          required: [],\n          properties: {\n            audiences: {\n              title: 'The audiences Schema',\n              type: 'object',\n              required: [\n                'edges',\n              ],\n              properties: {\n                edges: {\n                  title: 'The edges Schema',\n                  type: 'array',\n                  items: {\n                    title: 'A Schema',\n                    type: 'object',\n                    required: [\n                      'node',\n                    ],\n                    properties: {\n                      node: {\n                        title: 'The node Schema',\n                        type: 'object',\n                        required: [\n                          'name',\n                          'state',\n                        ],\n                        properties: {\n                          name: {\n                            title: 'The name Schema',\n                            type: 'string',\n                            examples: [\n                              'has_email',\n                              'has_email_opted_in',\n                            ],\n                          },\n                          state: {\n                            title: 'The state Schema',\n                            type: 'string',\n                            examples: [\n                              'qualified',\n                            ],\n                          },\n                        },\n                        examples: [],\n                      },\n                    },\n                    examples: [],\n                  },\n                  examples: [],\n                },\n              },\n              examples: [],\n            },\n          },\n          examples: [],\n        },\n      },\n      examples: [],\n    },\n    errors: {\n      title: 'The errors Schema',\n      type: 'array',\n      default: [],\n      items: {\n        title: 'A Schema',\n        type: 'object',\n        required: [\n          'message',\n          'locations',\n          'extensions',\n        ],\n        properties: {\n          message: {\n            title: 'The message Schema',\n            type: 'string',\n            examples: [\n              'Exception while fetching data (/customer) : java.lang.RuntimeException: could not resolve _fs_user_id = asdsdaddddd',\n            ],\n          },\n          locations: {\n            title: 'The locations Schema',\n            type: 'array',\n            items: {\n              title: 'A Schema',\n              type: 'object',\n              required: [\n                'line',\n                'column',\n              ],\n              properties: {\n                line: {\n                  title: 'The line Schema',\n                  type: 'integer',\n                  examples: [\n                    2,\n                  ],\n                },\n                column: {\n                  title: 'The column Schema',\n                  type: 'integer',\n                  examples: [\n                    3,\n                  ],\n                },\n              },\n              examples: [],\n            },\n            examples: [],\n          },\n          path: {\n            title: 'The path Schema',\n            type: 'array',\n            items: {\n              title: 'A Schema',\n              type: 'string',\n              examples: [\n                'customer',\n              ],\n            },\n            examples: [],\n          },\n          extensions: {\n            title: 'The extensions Schema',\n            type: 'object',\n            required: [\n              'classification',\n            ],\n            properties: {\n              classification: {\n                title: 'The classification Schema',\n                type: 'string',\n                examples: [\n                  'InvalidIdentifierException',\n                ],\n              },\n            },\n            examples: [],\n          },\n        },\n        examples: [],\n      },\n      examples: [],\n    },\n  },\n  examples: [],\n} as JSONSchema4;\n","/**\n * Copyright 2022-2023, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LogHandler, LogLevel } from '../../modules/logging';\nimport { validate } from '../../utils/json_schema_validator';\nimport { OdpResponseSchema } from './odp_response_schema';\nimport { ODP_USER_KEY } from '../../utils/enums';\nimport { RequestHandler, Response as HttpResponse } from '../../utils/http_request_handler/http';\nimport { Response as GraphQLResponse } from './odp_types';\n\n/**\n * Expected value for a qualified/valid segment\n */\nconst QUALIFIED = 'qualified';\n/**\n * Return value when no valid segments found\n */\nconst EMPTY_SEGMENTS_COLLECTION: string[] = [];\n/**\n * Return value for scenarios with no valid JSON\n */\nconst EMPTY_JSON_RESPONSE = null;\n/**\n * Standard message for audience querying fetch errors\n */\nconst AUDIENCE_FETCH_FAILURE_MESSAGE = 'Audience segments fetch failed';\n\n/**\n * Manager for communicating with the Optimizely Data Platform GraphQL endpoint\n */\nexport interface IOdpSegmentApiManager {\n  fetchSegments(\n    apiKey: string,\n    apiHost: string,\n    userKey: string,\n    userValue: string,\n    segmentsToCheck: string[]\n  ): Promise<string[] | null>;\n}\n\n/**\n * Concrete implementation for communicating with the ODP GraphQL endpoint\n */\nexport class OdpSegmentApiManager implements IOdpSegmentApiManager {\n  private readonly logger: LogHandler;\n  private readonly requestHandler: RequestHandler;\n\n  /**\n   * Communicates with Optimizely Data Platform's GraphQL endpoint\n   * @param requestHandler Desired request handler for testing\n   * @param logger Collect and record events/errors for this GraphQL implementation\n   */\n  constructor(requestHandler: RequestHandler, logger: LogHandler) {\n    this.requestHandler = requestHandler;\n    this.logger = logger;\n  }\n\n  /**\n   * Retrieves the audience segments from ODP\n   * @param apiKey ODP public key\n   * @param apiHost Host of ODP endpoint\n   * @param userKey 'vuid' or 'fs_user_id key'\n   * @param userValue Associated value to query for the user key\n   * @param segmentsToCheck Audience segments to check for experiment inclusion\n   */\n  async fetchSegments(\n    apiKey: string,\n    apiHost: string,\n    userKey: ODP_USER_KEY,\n    userValue: string,\n    segmentsToCheck: string[]\n  ): Promise<string[] | null> {\n    if (!apiKey || !apiHost) {\n      this.logger.log(LogLevel.ERROR, `${AUDIENCE_FETCH_FAILURE_MESSAGE} (Parameters apiKey or apiHost invalid)`);\n      return null;\n    }\n\n    if (segmentsToCheck?.length === 0) {\n      return EMPTY_SEGMENTS_COLLECTION;\n    }\n\n    const endpoint = `${apiHost}/v3/graphql`;\n    const query = this.toGraphQLJson(userKey, userValue, segmentsToCheck);\n\n    const segmentsResponse = await this.querySegments(apiKey, endpoint, userKey, userValue, query);\n    if (!segmentsResponse) {\n      this.logger.log(LogLevel.ERROR, `${AUDIENCE_FETCH_FAILURE_MESSAGE} (network error)`);\n      return null;\n    }\n\n    const parsedSegments = this.parseSegmentsResponseJson(segmentsResponse);\n    if (!parsedSegments) {\n      this.logger.log(LogLevel.ERROR, `${AUDIENCE_FETCH_FAILURE_MESSAGE} (decode error)`);\n      return null;\n    }\n\n    if (parsedSegments.errors?.length > 0) {\n      const { code, classification } = parsedSegments.errors[0].extensions;\n\n      if (code == 'INVALID_IDENTIFIER_EXCEPTION') {\n        this.logger.log(LogLevel.ERROR, `${AUDIENCE_FETCH_FAILURE_MESSAGE} (invalid identifier)`);\n      } else {\n        this.logger.log(LogLevel.ERROR, `${AUDIENCE_FETCH_FAILURE_MESSAGE} (${classification})`);\n      }\n\n      return null;\n    }\n\n    const edges = parsedSegments?.data?.customer?.audiences?.edges;\n    if (!edges) {\n      this.logger.log(LogLevel.ERROR, `${AUDIENCE_FETCH_FAILURE_MESSAGE} (decode error)`);\n      return null;\n    }\n\n    return edges.filter(edge => edge.node.state == QUALIFIED).map(edge => edge.node.name);\n  }\n\n  /**\n   * Converts the query parameters to a GraphQL JSON payload\n   * @returns GraphQL JSON string\n   */\n  private toGraphQLJson = (userKey: string, userValue: string, segmentsToCheck: string[]): string =>\n    [\n      '{\"query\" : \"query {customer',\n      `(${userKey} : \\\\\"${userValue}\\\\\") `,\n      '{audiences',\n      '(subset: [',\n      ...(segmentsToCheck?.map(\n        (segment, index) => `\\\\\"${segment}\\\\\"${index < segmentsToCheck.length - 1 ? ',' : ''}`\n      ) || ''),\n      ']) {edges {node {name state}}}}}\"}',\n    ].join('');\n\n  /**\n   * Handler for querying the ODP GraphQL endpoint\n   * @param apiKey ODP API key\n   * @param endpoint Fully-qualified GraphQL endpoint URL\n   * @param userKey 'vuid' or 'fs_user_id'\n   * @param userValue userKey's value\n   * @param query GraphQL formatted query string\n   * @returns JSON response string from ODP or null\n   */\n  private async querySegments(\n    apiKey: string,\n    endpoint: string,\n    userKey: string,\n    userValue: string,\n    query: string\n  ): Promise<string | null> {\n    const method = 'POST';\n    const url = endpoint;\n    const headers = {\n      'Content-Type': 'application/json',\n      'x-api-key': apiKey,\n    };\n\n    let response: HttpResponse;\n    try {\n      const request = this.requestHandler.makeRequest(url, headers, method, query);\n      response = await request.responsePromise;\n    } catch {\n      return null;\n    }\n\n    return response.body;\n  }\n\n  /**\n   * Parses JSON response\n   * @param jsonResponse JSON response from ODP\n   * @private\n   * @returns Response Strongly-typed ODP Response object\n   */\n  private parseSegmentsResponseJson(jsonResponse: string): GraphQLResponse | null {\n    let jsonObject = {};\n\n    try {\n      jsonObject = JSON.parse(jsonResponse);\n    } catch {\n      return EMPTY_JSON_RESPONSE;\n    }\n\n    if (validate(jsonObject, OdpResponseSchema, false)) {\n      return jsonObject as GraphQLResponse;\n    }\n\n    return EMPTY_JSON_RESPONSE;\n  }\n}\n","/**\n * Copyright 2016-2017, 2020, 2022 Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { sprintf } from '../fns';\nimport { JSONSchema4, validate as jsonSchemaValidator } from 'json-schema';\n\nimport { ERROR_MESSAGES } from '../enums';\nimport schema from '../../core/project_config/project_config_schema';\n\nconst MODULE_NAME = 'JSON_SCHEMA_VALIDATOR';\n\n/**\n * Validate the given json object against the specified schema\n * @param {unknown} jsonObject The object to validate against the schema\n * @param {JSONSchema4} validationSchema Provided schema to use for validation\n * @param {boolean} shouldThrowOnError Should validation throw if invalid JSON object\n * @return {boolean} true if the given object is valid; throws or false if invalid\n */\nexport function validate(\n  jsonObject: unknown,\n  validationSchema: JSONSchema4 = schema,\n  shouldThrowOnError = true\n): boolean {\n  const moduleTitle = `${MODULE_NAME} (${validationSchema.title})`;\n\n  if (typeof jsonObject !== 'object' || jsonObject === null) {\n    throw new Error(sprintf(ERROR_MESSAGES.NO_JSON_PROVIDED, moduleTitle));\n  }\n\n  const result = jsonSchemaValidator(jsonObject, validationSchema);\n  if (result.valid) {\n    return true;\n  }\n\n  if (!shouldThrowOnError) {\n    return false;\n  }\n\n  if (Array.isArray(result.errors)) {\n    throw new Error(\n      sprintf(ERROR_MESSAGES.INVALID_DATAFILE, moduleTitle, result.errors[0].property, result.errors[0].message)\n    );\n  }\n\n  throw new Error(sprintf(ERROR_MESSAGES.INVALID_JSON, moduleTitle));\n}\n","/**\n * Copyright 2023, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NodeRequestHandler } from '../../utils/http_request_handler/node_request_handler';\n\nimport { ServerLRUCache } from './../../utils/lru_cache/server_lru_cache';\n\nimport { getLogger, LogHandler, LogLevel } from '../../modules/logging';\nimport {\n  LOG_MESSAGES,\n  NODE_CLIENT_ENGINE,\n  NODE_CLIENT_VERSION,\n  REQUEST_TIMEOUT_ODP_EVENTS_MS,\n  REQUEST_TIMEOUT_ODP_SEGMENTS_MS,\n} from '../../utils/enums';\n\nimport { OdpManager } from '../../core/odp/odp_manager';\nimport { OdpOptions } from '../../shared_types';\nimport { NodeOdpEventApiManager } from '../odp/event_api_manager/index.node';\nimport { NodeOdpEventManager } from '../odp/event_manager/index.node';\nimport { OdpSegmentManager } from '../../core/odp/odp_segment_manager';\nimport { OdpSegmentApiManager } from '../../core/odp/odp_segment_api_manager';\n\ninterface NodeOdpManagerConfig {\n  logger?: LogHandler;\n  odpOptions?: OdpOptions;\n}\n\n/**\n * Server-side Node Plugin for ODP Manager.\n * Note: As this is still a work-in-progress. Please avoid using the Node ODP Manager.\n */\nexport class NodeOdpManager extends OdpManager {\n  constructor({ logger, odpOptions }: NodeOdpManagerConfig) {\n    super();\n\n    this.logger = logger || getLogger();\n\n    if (odpOptions?.disabled) {\n      this.initPromise = Promise.resolve();\n      this.enabled = false;\n      this.logger.log(LogLevel.INFO, LOG_MESSAGES.ODP_DISABLED);\n      return;\n    }\n\n    const nodeClientEngine = NODE_CLIENT_ENGINE;\n    const nodeClientVersion = NODE_CLIENT_VERSION;\n\n    let customSegmentRequestHandler;\n\n    if (odpOptions?.segmentsRequestHandler) {\n      customSegmentRequestHandler = odpOptions.segmentsRequestHandler;\n    } else {\n      customSegmentRequestHandler = new NodeRequestHandler(\n        this.logger,\n        odpOptions?.segmentsApiTimeout || REQUEST_TIMEOUT_ODP_SEGMENTS_MS\n      );\n    }\n\n    // Set up Segment Manager (Audience Segments GraphQL API Interface)\n    if (odpOptions?.segmentManager) {\n      this.segmentManager = odpOptions.segmentManager;\n      this.segmentManager.updateSettings(this.odpConfig);\n    } else {\n      this.segmentManager = new OdpSegmentManager(\n        this.odpConfig,\n        odpOptions?.segmentsCache ||\n          new ServerLRUCache<string, string[]>({\n            maxSize: odpOptions?.segmentsCacheSize,\n            timeout: odpOptions?.segmentsCacheTimeout,\n          }),\n        new OdpSegmentApiManager(customSegmentRequestHandler, this.logger)\n      );\n    }\n\n    let customEventRequestHandler;\n\n    if (odpOptions?.eventRequestHandler) {\n      customEventRequestHandler = odpOptions.eventRequestHandler;\n    } else {\n      customEventRequestHandler = new NodeRequestHandler(\n        this.logger,\n        odpOptions?.eventApiTimeout || REQUEST_TIMEOUT_ODP_EVENTS_MS\n      );\n    }\n\n    // Set up Events Manager (Events REST API Interface)\n    if (odpOptions?.eventManager) {\n      this.eventManager = odpOptions.eventManager;\n      this.eventManager.updateSettings(this.odpConfig);\n    } else {\n      this.eventManager = new NodeOdpEventManager({\n        odpConfig: this.odpConfig,\n        apiManager: new NodeOdpEventApiManager(customEventRequestHandler, this.logger),\n        logger: this.logger,\n        clientEngine: nodeClientEngine,\n        clientVersion: nodeClientVersion,\n        flushInterval: odpOptions?.eventFlushInterval,\n        batchSize: odpOptions?.eventBatchSize,\n        queueSize: odpOptions?.eventQueueSize,\n      });\n    }\n\n    this.eventManager.start();\n\n    this.initPromise = Promise.resolve();\n  }\n\n  public isVuidEnabled(): boolean {\n    return false;\n  }\n\n  public getVuid(): string | undefined {\n    return undefined;\n  }\n}\n","/****************************************************************************\n * Copyright 2016-2017, 2019-2024 Optimizely, Inc. and contributors        *\n *                                                                          *\n * Licensed under the Apache License, Version 2.0 (the \"License\");          *\n * you may not use this file except in compliance with the License.         *\n * You may obtain a copy of the License at                                  *\n *                                                                          *\n *    https://www.apache.org/licenses/LICENSE-2.0                           *\n *                                                                          *\n * Unless required by applicable law or agreed to in writing, software      *\n * distributed under the License is distributed on an \"AS IS\" BASIS,        *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *\n * See the License for the specific language governing permissions and      *\n * limitations under the License.                                           *\n ***************************************************************************/\n\nimport { getLogger, setErrorHandler, getErrorHandler, LogLevel, setLogHandler, setLogLevel } from './modules/logging';\nimport Optimizely from './optimizely';\nimport * as enums from './utils/enums';\nimport * as loggerPlugin from './plugins/logger';\nimport configValidator from './utils/config_validator';\nimport defaultErrorHandler from './plugins/error_handler';\nimport defaultEventDispatcher from './plugins/event_dispatcher/index.node';\nimport eventProcessorConfigValidator from './utils/event_processor_config_validator';\nimport { createNotificationCenter } from './core/notification_center';\nimport { createEventProcessor } from './plugins/event_processor';\nimport { OptimizelyDecideOption, Client, Config } from './shared_types';\nimport { createHttpPollingDatafileManager } from './plugins/datafile_manager/http_polling_datafile_manager';\nimport { NodeOdpManager } from './plugins/odp_manager/index.node';\nimport * as commonExports from './common_exports';\n\nconst logger = getLogger();\nsetLogLevel(LogLevel.ERROR);\n\nconst DEFAULT_EVENT_BATCH_SIZE = 10;\nconst DEFAULT_EVENT_FLUSH_INTERVAL = 30000; // Unit is ms, default is 30s\nconst DEFAULT_EVENT_MAX_QUEUE_SIZE = 10000;\n\n/**\n * Creates an instance of the Optimizely class\n * @param  {Config} config\n * @return {Client|null} the Optimizely client object\n *                           null on error\n */\nconst createInstance = function(config: Config): Client | null {\n  try {\n    let hasLogger = false;\n    let isValidInstance = false;\n\n    // TODO warn about setting per instance errorHandler / logger / logLevel\n    if (config.errorHandler) {\n      setErrorHandler(config.errorHandler);\n    }\n    if (config.logger) {\n      // only set a logger in node if one is provided, by not setting we are noop-ing\n      hasLogger = true;\n      setLogHandler(config.logger);\n      // respect the logger's shouldLog functionality\n      setLogLevel(LogLevel.NOTSET);\n    }\n    if (config.logLevel !== undefined) {\n      setLogLevel(config.logLevel);\n    }\n    try {\n      configValidator.validate(config);\n      isValidInstance = true;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (ex) {\n      if (hasLogger) {\n        logger.error(ex);\n      } else {\n        console.error(ex.message);\n      }\n    }\n\n    let eventBatchSize = config.eventBatchSize;\n    let eventFlushInterval = config.eventFlushInterval;\n\n    if (!eventProcessorConfigValidator.validateEventBatchSize(config.eventBatchSize)) {\n      logger.warn('Invalid eventBatchSize %s, defaulting to %s', config.eventBatchSize, DEFAULT_EVENT_BATCH_SIZE);\n      eventBatchSize = DEFAULT_EVENT_BATCH_SIZE;\n    }\n    if (!eventProcessorConfigValidator.validateEventFlushInterval(config.eventFlushInterval)) {\n      logger.warn(\n        'Invalid eventFlushInterval %s, defaulting to %s',\n        config.eventFlushInterval,\n        DEFAULT_EVENT_FLUSH_INTERVAL\n      );\n      eventFlushInterval = DEFAULT_EVENT_FLUSH_INTERVAL;\n    }\n\n    const errorHandler = getErrorHandler();\n    const notificationCenter = createNotificationCenter({ logger: logger, errorHandler: errorHandler });\n\n    const eventProcessorConfig = {\n      dispatcher: config.eventDispatcher || defaultEventDispatcher,\n      flushInterval: eventFlushInterval,\n      batchSize: eventBatchSize,\n      maxQueueSize: config.eventMaxQueueSize || DEFAULT_EVENT_MAX_QUEUE_SIZE,\n      notificationCenter,\n    };\n\n    const eventProcessor = createEventProcessor(eventProcessorConfig);\n\n    const odpExplicitlyOff = config.odpOptions?.disabled === true;\n    if (odpExplicitlyOff) {\n      logger.info(enums.LOG_MESSAGES.ODP_DISABLED);\n    }\n\n    const optimizelyOptions = {\n      clientEngine: enums.NODE_CLIENT_ENGINE,\n      ...config,\n      eventProcessor,\n      logger,\n      errorHandler,\n      datafileManager: config.sdkKey\n        ? createHttpPollingDatafileManager(config.sdkKey, logger, config.datafile, config.datafileOptions)\n        : undefined,\n      notificationCenter,\n      isValidInstance,\n      odpManager: odpExplicitlyOff ? undefined : new NodeOdpManager({ logger, odpOptions: config.odpOptions }),\n    };\n\n    return new Optimizely(optimizelyOptions);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } catch (e) {\n    logger.error(e);\n    return null;\n  }\n};\n\n/**\n * Entry point into the Optimizely Node testing SDK\n */\nexport {\n  loggerPlugin as logging,\n  defaultErrorHandler as errorHandler,\n  defaultEventDispatcher as eventDispatcher,\n  enums,\n  setLogHandler as setLogger,\n  setLogLevel,\n  createInstance,\n  OptimizelyDecideOption,\n};\n\nexport * from './common_exports';\n\nexport default {\n  ...commonExports,\n  logging: loggerPlugin,\n  errorHandler: defaultErrorHandler,\n  eventDispatcher: defaultEventDispatcher,\n  enums,\n  setLogger: setLogHandler,\n  setLogLevel,\n  createInstance,\n  OptimizelyDecideOption,\n};\n\nexport * from './export_types';\n","/**\n * Copyright 2020, 2022-2023, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LogTierV1EventProcessor, LocalStoragePendingEventsDispatcher } from '../../modules/event_processor';\n\nexport function createEventProcessor(\n  ...args: ConstructorParameters<typeof LogTierV1EventProcessor>\n): LogTierV1EventProcessor {\n  return new LogTierV1EventProcessor(...args);\n}\n\nexport default { createEventProcessor, LocalStoragePendingEventsDispatcher };\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","TypeError","String","__","this","constructor","create","__assign","assign","t","s","i","n","arguments","length","apply","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","pop","push","__spreadArray","to","from","pack","ar","l","slice","concat","SuppressedError","LogLevel","globalErrorHandler","NoopErrorHandler","exception","getErrorHandler","MAX_SAFE_INTEGER_LIMIT","Math","pow","target","_i","sources","index","nextSource","nextKey","keyBy","arr","key","keyByUtil","item","uuid","v4","getTimestamp","Date","getTime","isValidEnum","enumToCheck","found","keys","objectValues","obj","map","objectEntries","find","cond","arr_1","keyByFn","forEach","sprintf","format","args","replace","arg","type","checkArrayEquality","arrayA","arrayB","every","currentTimestamp","round","isSafeInteger","number","abs","isNumber","groupBy","grouperFn","grouper","stringToLogLevel","NOTSET","DEBUG","INFO","WARNING","ERROR","coerceLogLevel","level","toUpperCase","OptimizelyLogger","loggers","DefaultLogManager","name","messagePrefix","defaultLoggerFacade","config","logLevel","undefined","setLogLevel","logToConsole","prefix","ConsoleLogHandler","message","shouldLog","logMessage","getLogLevelName","consoleLog","toISOString","targetLogLevel","logArguments","console","log","info","warn","error","globalLogLevel","globalLogHandler","opts","splat","internalLog","namedLog","data","Error","handleError","last","splice","globalLogManager","getLogger","setLogHandler","logger","OptimizelySegmentOption","VariableType","OptimizelyDecideOption","apiKey","apiHost","pixelUrl","segmentsToCheck","_apiKey","_apiHost","_pixelUrl","_segmentsToCheck","OdpConfig","equals","configToCompare","action","identifiers","Map","newErrorDecision","user","reasons","variationKey","enabled","variables","ruleKey","flagKey","userContext","NOTIFICATION_TYPES","LOG_LEVEL","ERROR_MESSAGES","BROWSER_ODP_MANAGER_INITIALIZATION_FAILED","CONDITION_EVALUATOR_ERROR","DATAFILE_AND_SDK_KEY_MISSING","EXPERIMENT_KEY_NOT_IN_DATAFILE","FEATURE_NOT_IN_DATAFILE","FETCH_SEGMENTS_FAILED_INVALID_IDENTIFIER","FETCH_SEGMENTS_FAILED_NETWORK_ERROR","FETCH_SEGMENTS_FAILED_DECODE_ERROR","IMPROPERLY_FORMATTED_EXPERIMENT","INVALID_ATTRIBUTES","INVALID_BUCKETING_ID","INVALID_DATAFILE","INVALID_DATAFILE_MALFORMED","INVALID_CONFIG","INVALID_JSON","INVALID_ERROR_HANDLER","INVALID_EVENT_DISPATCHER","INVALID_EVENT_TAGS","INVALID_EXPERIMENT_KEY","INVALID_EXPERIMENT_ID","INVALID_GROUP_ID","INVALID_LOGGER","INVALID_ROLLOUT_ID","INVALID_USER_ID","INVALID_USER_PROFILE_SERVICE","LOCAL_STORAGE_DOES_NOT_EXIST","MISSING_INTEGRATION_KEY","NO_DATAFILE_SPECIFIED","NO_JSON_PROVIDED","NO_VARIATION_FOR_EXPERIMENT_KEY","ODP_EVENT_FAILED","ODP_FETCH_QUALIFIED_SEGMENTS_SEGMENTS_MANAGER_MISSING","ODP_IDENTIFY_FAILED_EVENT_MANAGER_MISSING","ODP_INITIALIZATION_FAILED","ODP_INVALID_DATA","ODP_EVENT_FAILED_ODP_MANAGER_MISSING","ODP_FETCH_QUALIFIED_SEGMENTS_FAILED_ODP_MANAGER_MISSING","ODP_IDENTIFY_USER_FAILED_ODP_MANAGER_MISSING","ODP_IDENTIFY_USER_FAILED_USER_CONTEXT_INITIALIZATION","ODP_MANAGER_UPDATE_SETTINGS_FAILED_EVENT_MANAGER_MISSING","ODP_MANAGER_UPDATE_SETTINGS_FAILED_SEGMENTS_MANAGER_MISSING","ODP_NOT_ENABLED","ODP_NOT_INTEGRATED","ODP_SEND_EVENT_FAILED_EVENT_MANAGER_MISSING","ODP_SEND_EVENT_FAILED_UID_MISSING","ODP_SEND_EVENT_FAILED_VUID_MISSING","ODP_SDK_KEY_MISSING_NOTIFICATION_CENTER_FAILURE","ODP_VUID_INITIALIZATION_FAILED","ODP_VUID_REGISTRATION_FAILED","ODP_VUID_REGISTRATION_FAILED_EVENT_MANAGER_MISSING","UNDEFINED_ATTRIBUTE","UNRECOGNIZED_ATTRIBUTE","UNABLE_TO_CAST_VALUE","USER_NOT_IN_FORCED_VARIATION","USER_PROFILE_LOOKUP_ERROR","USER_PROFILE_SAVE_ERROR","VARIABLE_KEY_NOT_IN_DATAFILE","VARIATION_ID_NOT_IN_DATAFILE","VARIATION_ID_NOT_IN_DATAFILE_NO_EXPERIMENT","INVALID_INPUT_FORMAT","INVALID_DATAFILE_VERSION","INVALID_VARIATION_KEY","LOG_MESSAGES","ACTIVATE_USER","DISPATCH_CONVERSION_EVENT","DISPATCH_IMPRESSION_EVENT","DEPRECATED_EVENT_VALUE","EVENT_KEY_NOT_FOUND","EXPERIMENT_NOT_RUNNING","FEATURE_ENABLED_FOR_USER","FEATURE_NOT_ENABLED_FOR_USER","FEATURE_HAS_NO_EXPERIMENTS","FAILED_TO_PARSE_VALUE","FAILED_TO_PARSE_REVENUE","FORCED_BUCKETING_FAILED","INVALID_OBJECT","INVALID_CLIENT_ENGINE","INVALID_DEFAULT_DECIDE_OPTIONS","INVALID_DECIDE_OPTIONS","INVALID_VARIATION_ID","NOTIFICATION_LISTENER_EXCEPTION","NO_ROLLOUT_EXISTS","NOT_ACTIVATING_USER","NOT_TRACKING_USER","ODP_DISABLED","ODP_IDENTIFY_FAILED_ODP_DISABLED","ODP_IDENTIFY_FAILED_ODP_NOT_INTEGRATED","ODP_SEND_EVENT_IDENTIFIER_CONVERSION_FAILED","PARSED_REVENUE_VALUE","PARSED_NUMERIC_VALUE","RETURNING_STORED_VARIATION","ROLLOUT_HAS_NO_EXPERIMENTS","SAVED_VARIATION","SAVED_VARIATION_NOT_FOUND","SHOULD_NOT_DISPATCH_ACTIVATE","SKIPPING_JSON_VALIDATION","TRACK_EVENT","UNRECOGNIZED_DECIDE_OPTION","USER_ASSIGNED_TO_EXPERIMENT_BUCKET","USER_BUCKETED_INTO_EXPERIMENT_IN_GROUP","USER_BUCKETED_INTO_TARGETING_RULE","USER_IN_FEATURE_EXPERIMENT","USER_IN_ROLLOUT","USER_NOT_BUCKETED_INTO_EVERYONE_TARGETING_RULE","USER_NOT_BUCKETED_INTO_EXPERIMENT_IN_GROUP","USER_NOT_BUCKETED_INTO_ANY_EXPERIMENT_IN_GROUP","USER_NOT_BUCKETED_INTO_TARGETING_RULE","USER_NOT_IN_FEATURE_EXPERIMENT","USER_NOT_IN_ROLLOUT","USER_FORCED_IN_VARIATION","USER_MAPPED_TO_FORCED_VARIATION","USER_DOESNT_MEET_CONDITIONS_FOR_TARGETING_RULE","USER_MEETS_CONDITIONS_FOR_TARGETING_RULE","USER_HAS_VARIATION","USER_HAS_FORCED_DECISION_WITH_RULE_SPECIFIED","USER_HAS_FORCED_DECISION_WITH_NO_RULE_SPECIFIED","USER_HAS_FORCED_DECISION_WITH_RULE_SPECIFIED_BUT_INVALID","USER_HAS_FORCED_DECISION_WITH_NO_RULE_SPECIFIED_BUT_INVALID","USER_HAS_FORCED_VARIATION","USER_HAS_NO_VARIATION","USER_HAS_NO_FORCED_VARIATION","USER_HAS_NO_FORCED_VARIATION_FOR_EXPERIMENT","USER_NOT_IN_ANY_EXPERIMENT","USER_NOT_IN_EXPERIMENT","USER_RECEIVED_DEFAULT_VARIABLE_VALUE","FEATURE_NOT_ENABLED_RETURN_DEFAULT_VARIABLE_VALUE","VARIABLE_NOT_USED_RETURN_DEFAULT_VARIABLE_VALUE","USER_RECEIVED_VARIABLE_VALUE","VALID_DATAFILE","VALID_USER_PROFILE_SERVICE","VARIATION_REMOVED_FOR_USER","VARIABLE_REQUESTED_WITH_WRONG_TYPE","VALID_BUCKETING_ID","BUCKETING_ID_NOT_STRING","EVALUATING_AUDIENCE","EVALUATING_AUDIENCES_COMBINED","AUDIENCE_EVALUATION_RESULT","AUDIENCE_EVALUATION_RESULT_COMBINED","MISSING_ATTRIBUTE_VALUE","UNEXPECTED_CONDITION_VALUE","UNEXPECTED_TYPE","UNEXPECTED_TYPE_NULL","UNKNOWN_CONDITION_TYPE","UNKNOWN_MATCH_TYPE","UPDATED_OPTIMIZELY_CONFIG","OUT_OF_BOUNDS","UNABLE_TO_ATTACH_UNLOAD","CONTROL_ATTRIBUTES","BOT_FILTERING","BUCKETING_ID","STICKY_BUCKETING_KEY","USER_AGENT","FORCED_DECISION_NULL_RULE_KEY","DECISION_NOTIFICATION_TYPES","AB_TEST","FEATURE","FEATURE_TEST","FEATURE_VARIABLE","ALL_FEATURE_VARIABLES","FLAG","DECISION_SOURCES","ROLLOUT","EXPERIMENT","AUDIENCE_EVALUATION_TYPES","RULE","FEATURE_VARIABLE_TYPES","BOOLEAN","DOUBLE","INTEGER","STRING","JSON","DATAFILE_VERSIONS","V2","V3","V4","DECISION_MESSAGES","SDK_NOT_READY","FLAG_KEY_INVALID","VARIABLE_VALUE_INVALID","ODP_USER_KEY","ODP_EVENT_ACTION","_a","optimizely","userId","attributes","_b","shouldIdentifyUser","forcedDecisionsMap","identifyUser","OptimizelyUserContext","_qualifiedSegments","qualifiedSegments","options","decide","cloneUserContext","decideForKeys","decideAll","eventName","eventTags","track","context","decision","forcedDecision","findForcedDecision","isForcedDecisionRemoved","validRuleKey","forcedDecisionByRuleKey","getOptimizely","getUserId","getAttributes","fetchQualifiedSegments","segments","segment","indexOf","DEFAULT_OPERATOR_TYPES","evaluate","conditions","leafEvaluator","isArray","firstOperator","restOfConditions","sawNullResult","conditionResult","andEvaluator","notEvaluator","orEvaluator","configObj","datafile","sdkKey","environmentKey","audiences","OptimizelyConfig","getAudiences","events","revision","featureIdVariablesMap","featureFlags","reduce","resultMap","feature","id","variableIdMap","getVariableIdMap","_c","getExperimentsMap","experimentsMapById","experimentsMapByKey","experimentsMap","featuresMap","getFeaturesMap","typedAudienceIds","typedAudiences","typedAudience","stringify","audience","audiencesById","serializedAudience","cond_1","subAudience","getSerializedAudiences","audienceName","experiment","audienceConditions","featureIdVariableMap","featureId","featureVariableUsages","isFeatureEnabled","variablesMap","optlyVariablesMap","featureVariable","defaultValue","featureVariableUsage","defaultVariable","optimizelyVariable","variations","optlyVariationsMap","variation","mergeFeatureVariables","featureEnabled","variable","featureVariableIdMap","experiments","getExperimentAudiences","variationsMap","getVariationsMap","rollouts","experimentIds","rollout","rolloutExperimentIds","getRolloutExperimentIds","featureIds","experimentFeatureMap","toString","optimizelyExperiment","experimentKeysMap","featureFlag","featureExperimentMap","experimentRules","experimentId","featureVariableMap","deliveryRules","rolloutIdMap","rolloutId","getDeliveryRules","MODULE_NAME","SUPPORTED_VERSIONS","errorHandler","eventDispatcher","parse","ex","createProjectConfig","datafileObj","datafileStr","datafileCopy","projectConfig","groups","group","groupCopy","rolloutCopy","__datafileStr","allSegments","allSegmentsSet","Set","getAudienceSegments","audienceSegments","add","attributeKeyMap","eventKeyMap","groupIdMap","Id","groupId","variationKeyMap","integrations","integrationKeyMap","integration","publicKey","publicKeyForOdp","host","hostForOdp","pixelUrlForOdp","experimentKeyMap","experimentIdMap","variationIdMap","variationVariableUsageMap","featureKeyMap","subType","variableKeyMap","flagRulesMap","flagRuleExperiments","flagVariationsMap","rules","rule","getSegmentsFromConditions","condition","includes","isLogicalOperator","nextCondition","getLayerId","layerId","getAttributeId","attributeKey","attribute","hasReservedPrefix","getEventId","eventKey","event","getExperimentStatus","experimentKey","status","getVariationKeyFromId","variationId","getExperimentFromKey","getTrafficAllocation","trafficAllocation","getExperimentFromId","getFlagVariationByKey","getFeatureFromKey","featureKey","toDatafile","tryCreatingProjectConfig","newDatafileObj","configValidator","jsonSchemaValidator","validate","createProjectConfigArgs","getSendFlagDecisionsValue","sendFlagDecisions","getErrorMessage","maybeError","defaultMessage","datafileAndSdkKeyMissingError","readyPromise","success","reason","handleNewDatafileException","handleNewDatafile","datafileManager","start","onReady","onDatafileManagerReadyFulfill","bind","onDatafileManagerReadyReject","on","onDatafileManagerUpdate","ProjectConfigManager","newDatafileError","get","err","newDatafile","oldRevision","optimizelyConfigObj","updateListeners","listener","createOptimizelyConfig","_this","stop","MAX_HASH_VALUE","bucket","bucketerParams","decideReasons","policy","bucketedExperimentId","bucketUserIntoExperiment","bucketingId","bucketValue","_generateBucketValue","entityId","_findBucket","trafficAllocationConfig","bucketingKey","endOfRange","ratio","murmurhash","v3","floor","content","test","isPreReleaseVersion","version","preReleaseIndex","buildIndex","isBuildVersion","splitVersion","targetPrefix","targetSuffix","hasWhiteSpaces","substring","dotCount","split","targetVersionParts","targetVersionParts_1","MATCH_TYPES","EVALUATORS_BY_MATCH_TYPE","isValueTypeValidForExactConditions","fns","exactEvaluator","userAttributes","conditionValue","conditionValueType","conditionName","userValue","userValueType","debug","validateValuesForNumericCondition","evaluateSemanticVersion","conditionsVersion","userProvidedVersion","userVersionParts","conditionsVersionParts","userVersionPartsLen","idx","userVersionPart","parseInt","conditionsVersionPart","compareVersion","conditionMatch","match","qualifiedEvaluator","isQualifiedFor","UNSTABLE_conditionEvaluators","typeToEvaluatorMap","custom_attribute","customAttributeConditionEvaluator","third_party_dimension","odpSegmentsConditionEvaluator","AudienceEvaluator","conditionTreeEvaluator.evaluate","audienceId","evaluateConditionWithUserAttributes","resultText","evaluator","input","audienceEvaluator","forcedVariationMap","userProfileService","DecisionService","getBucketingId","checkIfExperimentIsActive","decisionForcedVariation","getForcedVariation","forcedVariationKey","decisionWhitelistedVariation","getWhitelistedVariation","shouldIgnoreUPS","IGNORE_USER_PROFILE_SERVICE","experimentBucketMap","resolveExperimentBucketMap","getStoredVariation","decisionifUserIsInAudience","checkIfUserIsInAudience","buildBucketerParams","decisionVariation","saveUserProfile","userProfile","getUserProfile","attributeExperimentBucketMap","experiment_bucket_map","isActive","forcedVariations","evaluationAttribute","loggingKey","experimentAudienceConditions","audienceIds","getExperimentAudienceConditions","variation_id","user_id","lookup","save","getVariationForFeatureExperiment","experimentDecision","decisionRolloutVariation","getVariationForRollout","rolloutDecision","getVariationFromExperimentRule","decisionSource","skipToEveryoneElse","rolloutRules","getVariationFromDeliveryRule","getForcedDecision","experimentToVariationMap","stringValidator.validate","removeForcedVariation","getVariationIdFromExperimentAndVariationKey","setInForcedVariationMap","forcedDecisionResponse","findValidatedForcedDecision","forcedVariation","getVariation","ruleIndex","bucketerVariationId","everyoneElse","bucketedVariation","getRevenueValue","rawValue","parsedRevenueValue","isFinite","getEventValue","parsedEventValue","parseFloat","isAttributeValid","attributeValue","ENDPOINT","getCommonEventParams","clientEngine","clientVersion","anonymize_ip","anonymizeIP","botFiltering","visitor","snapshots","visitor_id","commonParams","account_id","accountId","project_id","projectId","visitors","client_name","client_version","enrich_decisions","attributeId","entity_id","getImpressionEvent","ruleType","campaignId","impressionEventParams","decisions","campaign_id","experiment_id","metadata","flag_key","rule_key","rule_type","variation_key","timestamp","httpVerb","url","params","getConversionEvent","snapshot","eventDict","revenue","eventTagUtils.getRevenueValue","eventValue","eventTagUtils.getEventValue","getVisitorSnapshot","getExperimentKey","decisionObj","getVariationKey","getFeatureEnabledFromVariation","getExperimentId","getVariationId","buildVisitorAttributes","builtAttributes","attributesValidator.isAttributeValid","notificationListeners","notificationTypeEnum","listenerId","NotificationCenter","notificationType","callback","callbackAlreadyAdded_1","listenerEntry","returnId","indexToRemove_1","typeToRemove_1","some","notificationData","createNotificationCenter","NotificationRegistry","notificationCenter","_notificationCenters","has","set","clearAllNotificationListeners","delete","isOptimizelyConfigValid","isValidInstance","decideOptionsArray","defaultDecideOptions","option","projectConfigManager","createProjectConfigManager","disposeOnUpdate","onUpdate","sendNotifications","OPTIMIZELY_CONFIG_UPDATE","getNotificationCenter","updateOdpSettings","projectConfigManagerReadyPromise","userProfileServiceInstance","userProfileServiceValidator.validate","decisionService","eventProcessor","dependentPromises","odpManager","initPromise","all","promiseResults","eventManager","getConfig","addNotificationListener","readyTimeouts","nextReadyTimeoutId","Optimizely","validateInputs","experiment_key","notActivatingExperiment","projectConfig.isRunning","projectConfig.getExperimentFromKey","sendImpressionEvent","impressionEvent","decision.getExperimentKey","decision.getExperimentId","decision.getVariationKey","decision.getVariationId","clientName","layer","buildImpressionEvent","process","emitNotificationCenterActivate","ACTIVATE","logEvent","event_key","projectConfig.eventWithKeyExists","conversionEvent","eventId","tags","buildConversionEvent","filterEmptyValues","emitNotificationCenterTrack","TRACK","createInternalUserContext","decisionNotificationType","DECISION","decisionInfo","setForcedVariation","stringInputs","eventTagsValidator.validate","feature_key","projectConfig.getFeatureFromKey","sourceInfo","getVariationForFeature","decision.getFeatureEnabledFromVariation","projectConfig.getSendFlagDecisionsValue","featureInfo","source","enabledFeatures_1","variableKey","getFeatureVariableForType","variableType","variable_key","projectConfig.getVariableForFeature","variableValue","getFeatureVariableValueFromVariation","variableUsage","projectConfig.getVariableValueForVariation","castValue","isNaN","projectConfig.getTypeCastValue","decisionObj_1","featureEnabled_1","allVariables_1","variableValues","getOptimizelyConfig","close","removeNotificationCenter","eventProcessorStoppedPromise","readyTimeoutId","readyTimeoutRecord","clearTimeout","readyTimeout","onClose","timeoutValue","resolveTimeoutPromise","timeout","timeoutPromise","timeoutId","setTimeout","race","userIdentifier","isVuidEnabled","getVuid","allDecideOptions","getAllDecideOptions","flagEnabled","decisionEventDispatched","EXCLUDE_VARIABLES","DISABLE_DECISION_EVENT","reportedReasons","INCLUDE_REASONS","decisionMap","optimizelyDecision","ENABLED_FLAGS_ONLY","allFlagKeys","updateSettings","odpEventType","odpIdentifiers","size","identifier_value","identifier_key","toLowerCase","FS_USER_ID","odpEvent","OdpEvent","sendEvent","NoOpLogger","createLogger","dispatchEvent","eventObj","parsedUrl","dataString","requestOptions","path","method","headers","content-type","content-length","req","protocol","http","https","request","response","statusCode","write","end","eventBatchSize","eventFlushInterval","areEventContextsEqual","eventA","eventB","contextA","contextB","max","Timer","sink","SingleEventQueue","flushInterval","maxQueueSize","closingSink","batchComparator","buffer","timer","flush","started","DefaultEventQueue","bufferedEvent","refresh","maxValues","LS_KEY","LocalStorageStore","getMap","window","localStorage","setItem","clean","toRemove","entries","sort","a","getItem","_super","store","dispatcher","PendingEventsDispatcher","send","pendingEvents","values","entry","remove","makeBatchedEventV1","attr","makeVisitor","makeDecisionSnapshot","conversion","makeConversionSnapshot","RequestTracker","reqPromise","reqsInFlightCount","onReqComplete","reqsCompleteResolvers","resolver","closingDispatcher","batchSize","requestTracker","validateAndGetFlushInterval","validateAndGetBatchSize","queue","getQueue","drainQueue","LogTierV1EventProcessor","useClosingDispatcher","notificationSender","formattedEvent","LOG_EVENT","trackRequest","enqueue","onRequestsComplete","UPDATE_INTERVAL_BELOW_MINIMUM_MESSAGE","BACKOFF_BASE_WAIT_SECONDS_BY_ERROR_COUNT","createHeadersFromNodeIncomingMessage","incomingMessage","headerName","headerValue","makeGetRequest","reqUrl","requester","responsePromise","abort","hostname","port","getRequestOptionsFromUrl","accept-encoding","once","aborted","decompressResponse","setEncoding","responseData","chunk","getResponseFromRequest","EventEmitter","listeners","currentListenerId","BackoffController","errorCount","min","random","isSuccessStatusCode","noOpKeyValueCache","contains","configWithDefaultsApplied","getConfigDefaults","autoUpdate","updateInterval","DEFAULT_UPDATE_INTERVAL_MINUTES","urlTemplate","_d","cache","cacheKey","isReadyPromiseSettled","readyPromiseResolver","readyPromiseRejecter","currentDatafile","resolveReadyPromise","isStarted","datafileUrl","emitter","MIN_UPDATE_INTERVAL_SECONDS","currentTimeout","currentRequest","backoffController","syncOnCurrentRequestComplete","HttpPollingDatafileManager","reset","setDatafileFromCacheIfAvailable","syncDatafile","removeAllListeners","countError","trySavingLastModified","getNextDatafileFromResponse","datafileUpdate","emit","rejectReadyPromise","lastResponseLastModified","onRequestComplete","onRequestResolved","onRequestRejected","scheduleNextUpdate","currentBackoffDelay","getDelay","nextUpdateDelay","lastModifiedHeader","defaultUrlTemplate","datafileAccessToken","accessToken","NodeDatafileManager","requestHeaders","createHttpPollingDatafileManager","datafileOptions","datafileManagerConfig","NodeRequestHandler","requestUrl","abortableRequest","getAbortableRequestFromRequest","destroy","_value","_time","now","CacheElement","maxSize","_maxSize","_timeout","LRUCache","_map","element","is_stale","firstMapEntryKey","clear","ServerLRUCacheConfig","_vuid","VuidManager","_instance","load","_keyForVuid","cachedValue","isVuid","makeVuid","formatted","vuidFull","vuid_prefix","vuid","startsWith","invalidOdpDataFound","validTypes","foundInvalidValue","STATE","OdpManager","segmentManager","newConfig","odpConfig","update","VUID","isReady","mType","NodeOdpEventApiManager","endpoint","Content-Type","x-api-key","replacer","fromEntries","requestHandler","OdpEventApiManager","shouldRetry","shouldSendEvents","generateRequestData","makeRequest","err_1","apiManager","queueSize","userAgentParser","STOPPED","initParams","state","parseUserAgentInfo","os","device","userAgentInfo","os_version","device_type","model","userAgentData","filter","OdpEventManager","processQueue","RUNNING","setNewTimeout","INITIALIZED","IDENTIFIED","augmentCommonData","hasNecessaryIdentifiers","shouldFlush","isOdpConfigurationReady","clearCurrentTimeout","PROCESSING","queueContainsItems","makeAndSend1Batch","queueHasBatches","batch","count","event_1","shift","attemptNumber","sendEvents","discardEventsIfNeeded","sourceData","NodeOdpEventManager","segmentsCache","odpSegmentApiManager","_segmentsCache","OdpSegmentManager","userKey","odpApiHost","odpApiKey","makeCacheKey","ignoreCache","IGNORE_CACHE","resetCache","RESET_CACHE","cachedSegments","fetchSegments","schema","$schema","title","properties","required","items","OdpResponseSchema","$id","customer","edges","node","examples","errors","default","locations","line","column","extensions","classification","EMPTY_SEGMENTS_COLLECTION","join","OdpSegmentApiManager","query","toGraphQLJson","querySegments","segmentsResponse","_f","parsedSegments","parseSegmentsResponseJson","_e","code","edge","jsonResponse","jsonObject","validationSchema","shouldThrowOnError","moduleTitle","valid","property","odpOptions","disabled","customSegmentRequestHandler","customEventRequestHandler","segmentsRequestHandler","segmentsApiTimeout","ServerLRUCache","segmentsCacheSize","segmentsCacheTimeout","eventRequestHandler","eventApiTimeout","eventQueueSize","NodeOdpManager","createInstance","handler","hasLogger","eventProcessorConfigValidator","createEventProcessor","defaultEventDispatcher","eventMaxQueueSize","odpExplicitlyOff","enums.LOG_MESSAGES","optimizelyOptions","commonExports","logging","loggerPlugin","defaultErrorHandler","enums","setLogger"],"mappings":"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"}